var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) {
          fail(e);
          return next();
        });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/@softarc/native-federation-runtime/fesm2022/softarc-native-federation-runtime.mjs
var softarc_native_federation_runtime_exports = {};
__export(softarc_native_federation_runtime_exports, {
  initFederation: () => initFederation,
  loadRemoteModule: () => loadRemoteModule,
  processRemoteInfo: () => processRemoteInfo
});
function mergeImportMaps(map1, map2) {
  return {
    imports: { ...map1.imports, ...map2.imports },
    scopes: { ...map1.scopes, ...map2.scopes }
  };
}
function getExternalKey(shared) {
  return `${shared.packageName}@${shared.version}`;
}
function getExternalUrl(shared) {
  const packageKey = getExternalKey(shared);
  return externals.get(packageKey);
}
function setExternalUrl(shared, url) {
  const packageKey = getExternalKey(shared);
  externals.set(packageKey, url);
}
function getDirectory(url) {
  const parts = url.split("/");
  parts.pop();
  return parts.join("/");
}
function joinPaths(path1, path2) {
  while (path1.endsWith("/")) {
    path1 = path1.substring(0, path1.length - 1);
  }
  if (path2.startsWith("./")) {
    path2 = path2.substring(2, path2.length);
  }
  return `${path1}/${path2}`;
}
function addRemote(remoteName, remote) {
  remoteNamesToRemote.set(remoteName, remote);
  baseUrlToRemoteNames.set(remote.baseUrl, remoteName);
}
function getRemoteNameByBaseUrl(baseUrl) {
  return baseUrlToRemoteNames.get(baseUrl);
}
function isRemoteInitialized(baseUrl) {
  return baseUrlToRemoteNames.has(baseUrl);
}
function getRemote(remoteName) {
  return remoteNamesToRemote.get(remoteName);
}
function appendImportMap(importMap) {
  document.body.appendChild(Object.assign(document.createElement("script"), {
    type: "importmap-shim",
    innerHTML: JSON.stringify(importMap)
  }));
}
async function initFederation(remotesOrManifestUrl = {}) {
  const remotes = typeof remotesOrManifestUrl === "string" ? await loadManifest(remotesOrManifestUrl) : remotesOrManifestUrl;
  const hostImportMap = await processHostInfo();
  const remotesImportMap = await processRemoteInfos(remotes);
  const importMap = mergeImportMaps(hostImportMap, remotesImportMap);
  appendImportMap(importMap);
  return importMap;
}
async function loadManifest(remotes) {
  return await fetch(remotes).then((r) => r.json());
}
async function processRemoteInfos(remotes) {
  let importMap = {
    imports: {},
    scopes: {}
  };
  for (const remoteName of Object.keys(remotes)) {
    try {
      const url = remotes[remoteName];
      const remoteMap = await processRemoteInfo(url, remoteName);
      importMap = mergeImportMaps(importMap, remoteMap);
    } catch (e) {
      console.error(`Error loading remote entry for ${remoteName} from file ${remotes[remoteName]}`);
    }
  }
  return importMap;
}
async function processRemoteInfo(federationInfoUrl, remoteName) {
  const baseUrl = getDirectory(federationInfoUrl);
  const remoteInfo = await loadFederationInfo(federationInfoUrl);
  if (!remoteName) {
    remoteName = remoteInfo.name;
  }
  const importMap = createRemoteImportMap(remoteInfo, remoteName, baseUrl);
  addRemote(remoteName, { ...remoteInfo, baseUrl });
  return importMap;
}
function createRemoteImportMap(remoteInfo, remoteName, baseUrl) {
  const imports = processExposed(remoteInfo, remoteName, baseUrl);
  const scopes = processRemoteImports(remoteInfo, baseUrl);
  return { imports, scopes };
}
async function loadFederationInfo(url) {
  const info = await fetch(url).then((r) => r.json());
  return info;
}
function processRemoteImports(remoteInfo, baseUrl) {
  const scopes = {};
  const scopedImports = {};
  for (const shared of remoteInfo.shared) {
    const outFileName = getExternalUrl(shared) ?? joinPaths(baseUrl, shared.outFileName);
    setExternalUrl(shared, outFileName);
    scopedImports[shared.packageName] = outFileName;
  }
  scopes[baseUrl + "/"] = scopedImports;
  return scopes;
}
function processExposed(remoteInfo, remoteName, baseUrl) {
  const imports = {};
  for (const exposed of remoteInfo.exposes) {
    const key = joinPaths(remoteName, exposed.key);
    const value = joinPaths(baseUrl, exposed.outFileName);
    imports[key] = value;
  }
  return imports;
}
async function processHostInfo() {
  const hostInfo = await loadFederationInfo("./remoteEntry.json");
  const imports = hostInfo.shared.reduce((acc, cur) => ({ ...acc, [cur.packageName]: "./" + cur.outFileName }), {});
  for (const shared of hostInfo.shared) {
    setExternalUrl(shared, "./" + shared.outFileName);
  }
  return { imports, scopes: {} };
}
async function loadRemoteModule(optionsOrRemoteName, exposedModule) {
  const options = normalizeOptions(optionsOrRemoteName, exposedModule);
  await ensureRemoteInitialized(options);
  const remoteName = getRemoteNameByOptions(options);
  const remote = getRemote(remoteName);
  if (!remote) {
    throw new Error("unknown remote " + remoteName);
  }
  const exposed = remote.exposes.find((e) => e.key === options.exposedModule);
  if (!exposed) {
    throw new Error(`Unknown exposed module ${options.exposedModule} in remote ${remoteName}`);
  }
  const url = joinPaths(remote.baseUrl, exposed.outFileName);
  const module = await importShim(url);
  return module;
}
function getRemoteNameByOptions(options) {
  let remoteName;
  if (options.remoteName) {
    remoteName = options.remoteName;
  } else if (options.remoteEntry) {
    const baseUrl = getDirectory(options.remoteEntry);
    remoteName = getRemoteNameByBaseUrl(baseUrl);
  } else {
    throw new Error("unexpcted arguments: Please pass remoteName or remoteEntry");
  }
  if (!remoteName) {
    throw new Error("unknown remoteName " + remoteName);
  }
  return remoteName;
}
async function ensureRemoteInitialized(options) {
  if (options.remoteEntry && !isRemoteInitialized(getDirectory(options.remoteEntry))) {
    const importMap = await processRemoteInfo(options.remoteEntry);
    appendImportMap(importMap);
  }
}
function normalizeOptions(optionsOrRemoteName, exposedModule) {
  let options;
  if (typeof optionsOrRemoteName === "string" && exposedModule) {
    options = {
      remoteName: optionsOrRemoteName,
      exposedModule
    };
  } else if (typeof optionsOrRemoteName === "object" && !exposedModule) {
    options = optionsOrRemoteName;
  } else {
    throw new Error("unexpected arguments: please pass options or a remoteName/exposedModule-pair");
  }
  return options;
}
var externals, remoteNamesToRemote, baseUrlToRemoteNames;
var init_softarc_native_federation_runtime = __esm({
  "node_modules/@softarc/native-federation-runtime/fesm2022/softarc-native-federation-runtime.mjs"() {
    externals = /* @__PURE__ */ new Map();
    remoteNamesToRemote = /* @__PURE__ */ new Map();
    baseUrlToRemoteNames = /* @__PURE__ */ new Map();
  }
});

// node_modules/@softarc/native-federation/src/index.js
var require_src = __commonJS({
  "node_modules/@softarc/native-federation/src/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar((init_softarc_native_federation_runtime(), __toCommonJS(softarc_native_federation_runtime_exports)), exports);
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.1";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component44(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component44.prototype.isReactComponent = {};
        Component44.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component44.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component44.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component44.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component44.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef24() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement312(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement11(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement11(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement11(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement11(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext21(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps2;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef30(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo2(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext22(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState36(initialState2) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState2);
        }
        function useReducer2(reducer2, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer2, initialArg, init);
        }
        function useRef35(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect40(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback6(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo8(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle4(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component45) {
          var prototype = Component45.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement11(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement11(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement11(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement312.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement11.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children14 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children14;
        exports.Component = Component44;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext21;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef24;
        exports.forwardRef = forwardRef30;
        exports.isValidElement = isValidElement11;
        exports.lazy = lazy;
        exports.memo = memo2;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback6;
        exports.useContext = useContext22;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect40;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle4;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect2;
        exports.useMemo = useMemo8;
        exports.useReducer = useReducer2;
        exports.useRef = useRef35;
        exports.useState = useState36;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left2 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right2 = heap[rightIndex];
            if (compare(left2, node) < 0) {
              if (rightIndex < length && compare(right2, left2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left2;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right2, node) < 0) {
              heap[index] = right2;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay3 = options.delay;
            if (typeof delay3 === "number" && delay3 > 0) {
              startTime2 = currentTime + delay3;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React355 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React355.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment37 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize2 = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component44) {
          var prototype = Component44.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment37:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React355.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize2 = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize2(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM2) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive2
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            passive: passive2
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start2;
          var startValue = startText;
          var startLength = startValue.length;
          var end2;
          var endValue = getText();
          var endLength = endValue.length;
          for (start2 = 0; start2 < startLength; start2++) {
            if (startValue[start2] !== endValue[start2]) {
              break;
            }
          }
          var minEnd = startLength - start2;
          for (end2 = 1; end2 <= minEnd; end2++) {
            if (startValue[startLength - end2] !== endValue[endLength - end2]) {
              break;
            }
          }
          var sliceTail = end2 > 1 ? 1 - end2 : void 0;
          fallbackText = endValue.slice(start2, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM2 && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM2) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM2) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset2) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset2 && nodeEnd >= offset2) {
                return {
                  node,
                  offset: offset2 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start2 = -1;
          var end2 = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start2 = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end2 = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start2 = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end2 = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          if (start2 === -1 || end2 === -1) {
            return null;
          }
          return {
            start: start2,
            end: end2
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start2 = Math.min(offsets.start, length);
          var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length);
          if (!selection.extend && start2 > end2) {
            var temp = end2;
            end2 = start2;
            start2 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start2);
          var endMarker = getNodeForCharacterOffset(node, end2);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start2 > end2) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start2 = offsets.start;
          var end2 = offsets.end;
          if (end2 === void 0) {
            end2 = start2;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start2;
            input.selectionEnd = Math.min(end2, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM2) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop: while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop2() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop2;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement312(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected") ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement312(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component44, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component44)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component44 = node.type;
                  if (isContextProvider(Component44)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
              !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
              !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
              element._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment37) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment37) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context) ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect4 = effects[i];
              var callback = effect4.callback;
              if (callback !== null) {
                effect4.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component44, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component44(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component44(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer2, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState2;
          if (init !== void 0) {
            initialState2 = init(initialArg);
          } else {
            initialState2 = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState2;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer2,
            lastRenderedState: initialState2
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer2, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer2;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer2(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer2, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer2;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer2(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState2) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState2 === "function") {
            initialState2 = initialState2();
          }
          hook.memoizedState = hook.baseState = initialState2;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState2
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState2) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState2) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect4 = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect4.next = effect4;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect4;
              effect4.next = firstEffect;
              componentUpdateQueue.lastEffect = effect4;
            }
          }
          return effect4;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start2 = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start2;
          return [isPending, start2];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer2, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer2, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component44, baseProps) {
          if (Component44 && Component44.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps2 = Component44.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component44, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component44.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component44)
                );
              }
            }
          }
          var render2 = Component44.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component44, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component44.type;
            if (isSimpleFunctionComponent(type) && Component44.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component44.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component44.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component44.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component44.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component44.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component44, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component44, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component44, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component44.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component44)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component44, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component44, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component44, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component44, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component44.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component44)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component44)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component44, nextProps);
            mountClassInstance(workInProgress2, Component44, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component44, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component44, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component44, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component44, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component44, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component44.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component44, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component44 = init(payload);
          workInProgress2.type = Component44;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component44);
          var resolvedProps = resolveDefaultProps(Component44, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component44);
                workInProgress2.type = Component44 = resolveFunctionForHotReloading(Component44);
              }
              child = updateFunctionComponent(null, workInProgress2, Component44, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component44 = resolveClassForHotReloading(Component44);
              }
              child = updateClassComponent(null, workInProgress2, Component44, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component44 = resolveForwardRefForHotReloading(Component44);
              }
              child = updateForwardRef(null, workInProgress2, Component44, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component44.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component44)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component44,
                resolveDefaultProps(Component44.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component44 !== null && typeof Component44 === "object" && Component44.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component44 + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component44, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component44)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component44, nextProps);
          mountClassInstance(workInProgress2, Component44, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component44, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component44, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component44, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component44.prototype && typeof Component44.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component44) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component44, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component44) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component44) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component44)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component44, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component44, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component44, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component44);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component44) {
          {
            if (Component44) {
              if (Component44.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component44.displayName || Component44.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component44.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component44) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component44.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component44) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component44.contextType === "object" && Component44.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component44) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component44 = workInProgress2.type;
              if (isContextProvider(Component44)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component44 = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component44 ? unresolvedProps : resolveDefaultProps(Component44, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component44, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment37:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden3) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment37:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component44 = workInProgress2.type;
              if (isContextProvider(Component44)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component44 = workInProgress2.type;
              if (isContextProvider(Component44)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect4 = firstEffect;
            do {
              if ((effect4.tag & flags) === flags) {
                var destroy = effect4.destroy;
                effect4.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect4 = effect4.next;
            } while (effect4 !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect4 = firstEffect;
            do {
              if ((effect4.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect4.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect4.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect4.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect4.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect4.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect4 = effect4.next;
            } while (effect4 !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden3) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden3) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden3) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings: while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect4 = firstEffect;
                    do {
                      var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect4 = effect4.next;
                    } while (effect4 !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden3 = newState !== null;
                offscreenInstance.isHidden = isHidden3;
                if (isHidden3) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden3 = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden3 || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root2,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden3 = fiber.memoizedState !== null;
                if (isHidden3) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden3 = fiber.memoizedState !== null;
              if (isHidden3) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component44) {
          var prototype = Component44.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component44) {
          if (typeof Component44 === "function") {
            return shouldConstruct$1(Component44) ? ClassComponent : FunctionComponent;
          } else if (Component44 !== void 0 && Component44 !== null) {
            var $$typeof = Component44.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment37, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.3.1";
        function createPortal6(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component44 = fiber.type;
            if (isContextProvider(Component44)) {
              return processChildContext(fiber, Component44, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot2(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode2(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal6(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM2 && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode2;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports.createRoot = m.createRoot;
      exports.hydrateRoot = m.hydrateRoot;
    } else {
      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// node_modules/@patternfly/react-core/dist/styles/base.css
var init_base = __esm({
  "node_modules/@patternfly/react-core/dist/styles/base.css"() {
  }
});

// node_modules/@patternfly/react-styles/dist/esm/index.js
function css(...args) {
  const classes = [];
  const hasOwn = {}.hasOwnProperty;
  args.filter(Boolean).forEach((arg) => {
    const argType = typeof arg;
    if (argType === "string" || argType === "number") {
      classes.push(arg);
    } else if (Array.isArray(arg) && arg.length) {
      const inner = css(...arg);
      if (inner) {
        classes.push(inner);
      }
    } else if (argType === "object") {
      for (const key in arg) {
        if (hasOwn.call(arg, key) && arg[key]) {
          classes.push(key);
        }
      }
    }
  });
  return classes.join(" ");
}
var init_esm = __esm({
  "node_modules/@patternfly/react-styles/dist/esm/index.js"() {
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_about_modal_box_BackgroundImage.js
var c_about_modal_box_BackgroundImage, c_about_modal_box_BackgroundImage_default;
var init_c_about_modal_box_BackgroundImage = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_about_modal_box_BackgroundImage.js"() {
    c_about_modal_box_BackgroundImage = {
      "name": "--pf-v5-c-about-modal-box--BackgroundImage",
      "value": "none",
      "var": "var(--pf-v5-c-about-modal-box--BackgroundImage)"
    };
    c_about_modal_box_BackgroundImage_default = c_about_modal_box_BackgroundImage;
  }
});

// node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.css
var init_about_modal_box = __esm({
  "node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.mjs
var about_modal_box_default;
var init_about_modal_box2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.mjs"() {
    init_about_modal_box();
    about_modal_box_default = {
      "aboutModalBox": "pf-v5-c-about-modal-box",
      "aboutModalBoxBrand": "pf-v5-c-about-modal-box__brand",
      "aboutModalBoxBrandImage": "pf-v5-c-about-modal-box__brand-image",
      "aboutModalBoxClose": "pf-v5-c-about-modal-box__close",
      "aboutModalBoxContent": "pf-v5-c-about-modal-box__content",
      "aboutModalBoxHeader": "pf-v5-c-about-modal-box__header",
      "aboutModalBoxStrapline": "pf-v5-c-about-modal-box__strapline",
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "plain": "pf-m-plain"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Content/content.css
var init_content = __esm({
  "node_modules/@patternfly/react-styles/css/components/Content/content.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Content/content.mjs
var content_default;
var init_content2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Content/content.mjs"() {
    init_content();
    content_default = {
      "content": "pf-v5-c-content",
      "modifiers": {
        "visited": "pf-m-visited",
        "plain": "pf-m-plain"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxContent.js
var React, AboutModalBoxContent;
var init_AboutModalBoxContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxContent.js"() {
    init_tslib_es6();
    React = __toESM(require_react());
    init_esm();
    init_about_modal_box2();
    init_content2();
    AboutModalBoxContent = (_a) => {
      var { children, trademark, hasNoContentContainer = false } = _a, props = __rest(_a, ["children", "trademark", "hasNoContentContainer"]);
      return React.createElement(
        "div",
        Object.assign({ className: css(about_modal_box_default.aboutModalBoxContent) }, props),
        React.createElement("div", { className: css(`${about_modal_box_default.aboutModalBox}__body`) }, hasNoContentContainer ? children : React.createElement("div", { className: css(content_default.content) }, children)),
        React.createElement("p", { className: css(about_modal_box_default.aboutModalBoxStrapline) }, trademark)
      );
    };
    AboutModalBoxContent.displayName = "AboutModalBoxContent";
  }
});

// node_modules/@patternfly/react-styles/css/components/Title/title.css
var init_title = __esm({
  "node_modules/@patternfly/react-styles/css/components/Title/title.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Title/title.mjs
var title_default;
var init_title2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Title/title.mjs"() {
    init_title();
    title_default = {
      "modifiers": {
        "4xl": "pf-m-4xl",
        "3xl": "pf-m-3xl",
        "2xl": "pf-m-2xl",
        "xl": "pf-m-xl",
        "lg": "pf-m-lg",
        "md": "pf-m-md"
      },
      "title": "pf-v5-c-title"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_sm.js
var global_breakpoint_sm, global_breakpoint_sm_default;
var init_global_breakpoint_sm = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_sm.js"() {
    global_breakpoint_sm = {
      "name": "--pf-v5-global--breakpoint--sm",
      "value": "576px",
      "var": "var(--pf-v5-global--breakpoint--sm)"
    };
    global_breakpoint_sm_default = global_breakpoint_sm;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_md.js
var global_breakpoint_md, global_breakpoint_md_default;
var init_global_breakpoint_md = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_md.js"() {
    global_breakpoint_md = {
      "name": "--pf-v5-global--breakpoint--md",
      "value": "768px",
      "var": "var(--pf-v5-global--breakpoint--md)"
    };
    global_breakpoint_md_default = global_breakpoint_md;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_lg.js
var global_breakpoint_lg, global_breakpoint_lg_default;
var init_global_breakpoint_lg = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_lg.js"() {
    global_breakpoint_lg = {
      "name": "--pf-v5-global--breakpoint--lg",
      "value": "992px",
      "var": "var(--pf-v5-global--breakpoint--lg)"
    };
    global_breakpoint_lg_default = global_breakpoint_lg;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_xl.js
var global_breakpoint_xl, global_breakpoint_xl_default;
var init_global_breakpoint_xl = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_xl.js"() {
    global_breakpoint_xl = {
      "name": "--pf-v5-global--breakpoint--xl",
      "value": "1200px",
      "var": "var(--pf-v5-global--breakpoint--xl)"
    };
    global_breakpoint_xl_default = global_breakpoint_xl;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_2xl.js
var global_breakpoint_2xl, global_breakpoint_2xl_default;
var init_global_breakpoint_2xl = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_2xl.js"() {
    global_breakpoint_2xl = {
      "name": "--pf-v5-global--breakpoint--2xl",
      "value": "1450px",
      "var": "var(--pf-v5-global--breakpoint--2xl)"
    };
    global_breakpoint_2xl_default = global_breakpoint_2xl;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_sm.js
var global_height_breakpoint_sm, global_height_breakpoint_sm_default;
var init_global_height_breakpoint_sm = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_sm.js"() {
    global_height_breakpoint_sm = {
      "name": "--pf-v5-global--height-breakpoint--sm",
      "value": "0",
      "var": "var(--pf-v5-global--height-breakpoint--sm)"
    };
    global_height_breakpoint_sm_default = global_height_breakpoint_sm;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_md.js
var global_height_breakpoint_md, global_height_breakpoint_md_default;
var init_global_height_breakpoint_md = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_md.js"() {
    global_height_breakpoint_md = {
      "name": "--pf-v5-global--height-breakpoint--md",
      "value": "40rem",
      "var": "var(--pf-v5-global--height-breakpoint--md)"
    };
    global_height_breakpoint_md_default = global_height_breakpoint_md;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_lg.js
var global_height_breakpoint_lg, global_height_breakpoint_lg_default;
var init_global_height_breakpoint_lg = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_lg.js"() {
    global_height_breakpoint_lg = {
      "name": "--pf-v5-global--height-breakpoint--lg",
      "value": "48rem",
      "var": "var(--pf-v5-global--height-breakpoint--lg)"
    };
    global_height_breakpoint_lg_default = global_height_breakpoint_lg;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_xl.js
var global_height_breakpoint_xl, global_height_breakpoint_xl_default;
var init_global_height_breakpoint_xl = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_xl.js"() {
    global_height_breakpoint_xl = {
      "name": "--pf-v5-global--height-breakpoint--xl",
      "value": "60rem",
      "var": "var(--pf-v5-global--height-breakpoint--xl)"
    };
    global_height_breakpoint_xl_default = global_height_breakpoint_xl;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_2xl.js
var global_height_breakpoint_2xl, global_height_breakpoint_2xl_default;
var init_global_height_breakpoint_2xl = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_2xl.js"() {
    global_height_breakpoint_2xl = {
      "name": "--pf-v5-global--height-breakpoint--2xl",
      "value": "80rem",
      "var": "var(--pf-v5-global--height-breakpoint--2xl)"
    };
    global_height_breakpoint_2xl_default = global_height_breakpoint_2xl;
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/constants.js
var ValidatedOptions, KeyTypes, globalWidthBreakpoints, globalHeightBreakpoints;
var init_constants = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/constants.js"() {
    init_global_breakpoint_sm();
    init_global_breakpoint_md();
    init_global_breakpoint_lg();
    init_global_breakpoint_xl();
    init_global_breakpoint_2xl();
    init_global_height_breakpoint_sm();
    init_global_height_breakpoint_md();
    init_global_height_breakpoint_lg();
    init_global_height_breakpoint_xl();
    init_global_height_breakpoint_2xl();
    (function(ValidatedOptions2) {
      ValidatedOptions2["success"] = "success";
      ValidatedOptions2["error"] = "error";
      ValidatedOptions2["warning"] = "warning";
      ValidatedOptions2["default"] = "default";
    })(ValidatedOptions || (ValidatedOptions = {}));
    KeyTypes = {
      Tab: "Tab",
      Space: " ",
      Escape: "Escape",
      Enter: "Enter",
      ArrowUp: "ArrowUp",
      ArrowDown: "ArrowDown",
      ArrowLeft: "ArrowLeft",
      ArrowRight: "ArrowRight"
    };
    globalWidthBreakpoints = {
      sm: parseInt(global_breakpoint_sm_default.value),
      md: parseInt(global_breakpoint_md_default.value),
      lg: parseInt(global_breakpoint_lg_default.value),
      xl: parseInt(global_breakpoint_xl_default.value),
      "2xl": parseInt(global_breakpoint_2xl_default.value)
    };
    globalHeightBreakpoints = {
      sm: parseInt(global_height_breakpoint_sm_default.value),
      md: parseInt(global_height_breakpoint_md_default.value),
      lg: parseInt(global_height_breakpoint_lg_default.value),
      xl: parseInt(global_height_breakpoint_xl_default.value),
      "2xl": parseInt(global_height_breakpoint_2xl_default.value)
    };
  }
});

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors, candidateSelector, NoElement, matches, getRootNode, isInert, isContentEditable, getCandidates, getCandidatesIteratively, hasTabIndex, getTabIndex, getSortOrderTabIndex, sortOrderedTabbables, isInput, isHiddenInput, isDetailsWithSummary, getCheckedRadio, isTabbableRadio, isRadio, isNonTabbableRadio, isNodeAttached, isZeroArea, isHidden, isDisabledFromFieldset, isNodeMatchingSelectorFocusable, isNodeMatchingSelectorTabbable, isValidShadowRootTabbable, sortByOrder, tabbable, focusable, isTabbable, focusableCandidateSelector, isFocusable;
var init_index_esm = __esm({
  "node_modules/tabbable/dist/index.esm.js"() {
    candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
    candidateSelector = /* @__PURE__ */ candidateSelectors.join(",");
    NoElement = typeof Element === "undefined";
    matches = NoElement ? function() {
    } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
      var _element$getRootNode;
      return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
    } : function(element) {
      return element === null || element === void 0 ? void 0 : element.ownerDocument;
    };
    isInert = function isInert2(node, lookUp) {
      var _node$getAttribute;
      if (lookUp === void 0) {
        lookUp = true;
      }
      var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
      var inert = inertAtt === "" || inertAtt === "true";
      var result = inert || lookUp && node && isInert2(node.parentNode);
      return result;
    };
    isContentEditable = function isContentEditable2(node) {
      var _node$getAttribute2;
      var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
      return attValue === "" || attValue === "true";
    };
    getCandidates = function getCandidates2(el, includeContainer, filter) {
      if (isInert(el)) {
        return [];
      }
      var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
      if (includeContainer && matches.call(el, candidateSelector)) {
        candidates.unshift(el);
      }
      candidates = candidates.filter(filter);
      return candidates;
    };
    getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
      var candidates = [];
      var elementsToCheck = Array.from(elements);
      while (elementsToCheck.length) {
        var element = elementsToCheck.shift();
        if (isInert(element, false)) {
          continue;
        }
        if (element.tagName === "SLOT") {
          var assigned = element.assignedElements();
          var content = assigned.length ? assigned : element.children;
          var nestedCandidates = getCandidatesIteratively2(content, true, options);
          if (options.flatten) {
            candidates.push.apply(candidates, nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: nestedCandidates
            });
          }
        } else {
          var validCandidate = matches.call(element, candidateSelector);
          if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
            candidates.push(element);
          }
          var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
          typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
          var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
          if (shadowRoot && validShadowRoot) {
            var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
            if (options.flatten) {
              candidates.push.apply(candidates, _nestedCandidates);
            } else {
              candidates.push({
                scopeParent: element,
                candidates: _nestedCandidates
              });
            }
          } else {
            elementsToCheck.unshift.apply(elementsToCheck, element.children);
          }
        }
      }
      return candidates;
    };
    hasTabIndex = function hasTabIndex2(node) {
      return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
    };
    getTabIndex = function getTabIndex2(node) {
      if (!node) {
        throw new Error("No node provided");
      }
      if (node.tabIndex < 0) {
        if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
          return 0;
        }
      }
      return node.tabIndex;
    };
    getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
      var tabIndex = getTabIndex(node);
      if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
        return 0;
      }
      return tabIndex;
    };
    sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
      return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
    };
    isInput = function isInput2(node) {
      return node.tagName === "INPUT";
    };
    isHiddenInput = function isHiddenInput2(node) {
      return isInput(node) && node.type === "hidden";
    };
    isDetailsWithSummary = function isDetailsWithSummary2(node) {
      var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
        return child.tagName === "SUMMARY";
      });
      return r;
    };
    getCheckedRadio = function getCheckedRadio2(nodes, form) {
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].checked && nodes[i].form === form) {
          return nodes[i];
        }
      }
    };
    isTabbableRadio = function isTabbableRadio2(node) {
      if (!node.name) {
        return true;
      }
      var radioScope = node.form || getRootNode(node);
      var queryRadios = function queryRadios2(name) {
        return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
      };
      var radioSet;
      if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
        radioSet = queryRadios(window.CSS.escape(node.name));
      } else {
        try {
          radioSet = queryRadios(node.name);
        } catch (err) {
          console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
          return false;
        }
      }
      var checked = getCheckedRadio(radioSet, node.form);
      return !checked || checked === node;
    };
    isRadio = function isRadio2(node) {
      return isInput(node) && node.type === "radio";
    };
    isNonTabbableRadio = function isNonTabbableRadio2(node) {
      return isRadio(node) && !isTabbableRadio(node);
    };
    isNodeAttached = function isNodeAttached2(node) {
      var _nodeRoot;
      var nodeRoot = node && getRootNode(node);
      var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
      var attached = false;
      if (nodeRoot && nodeRoot !== node) {
        var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
        attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
        while (!attached && nodeRootHost) {
          var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
          nodeRoot = getRootNode(nodeRootHost);
          nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
          attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
        }
      }
      return attached;
    };
    isZeroArea = function isZeroArea2(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
      return width === 0 && height === 0;
    };
    isHidden = function isHidden2(node, _ref) {
      var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
      if (getComputedStyle(node).visibility === "hidden") {
        return true;
      }
      var isDirectSummary = matches.call(node, "details>summary:first-of-type");
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
      if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
        return true;
      }
      if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
        if (typeof getShadowRoot === "function") {
          var originalNode = node;
          while (node) {
            var parentElement = node.parentElement;
            var rootNode = getRootNode(node);
            if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
              return isZeroArea(node);
            } else if (node.assignedSlot) {
              node = node.assignedSlot;
            } else if (!parentElement && rootNode !== node.ownerDocument) {
              node = rootNode.host;
            } else {
              node = parentElement;
            }
          }
          node = originalNode;
        }
        if (isNodeAttached(node)) {
          return !node.getClientRects().length;
        }
        if (displayCheck !== "legacy-full") {
          return true;
        }
      } else if (displayCheck === "non-zero-area") {
        return isZeroArea(node);
      }
      return false;
    };
    isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
      if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement;
        while (parentNode) {
          if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
            for (var i = 0; i < parentNode.children.length; i++) {
              var child = parentNode.children.item(i);
              if (child.tagName === "LEGEND") {
                return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
              }
            }
            return true;
          }
          parentNode = parentNode.parentElement;
        }
      }
      return false;
    };
    isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
      if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
      //  because we're limited in the type of selectors we can use in JSDom (see related
      //  note related to `candidateSelectors`)
      isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }
      return true;
    };
    isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
      if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
        return false;
      }
      return true;
    };
    isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
      var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
      if (isNaN(tabIndex) || tabIndex >= 0) {
        return true;
      }
      return false;
    };
    sortByOrder = function sortByOrder2(candidates) {
      var regularTabbables = [];
      var orderedTabbables = [];
      candidates.forEach(function(item, i) {
        var isScope = !!item.scopeParent;
        var element = isScope ? item.scopeParent : item;
        var candidateTabindex = getSortOrderTabIndex(element, isScope);
        var elements = isScope ? sortByOrder2(item.candidates) : element;
        if (candidateTabindex === 0) {
          isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
        } else {
          orderedTabbables.push({
            documentOrder: i,
            tabIndex: candidateTabindex,
            item,
            isScope,
            content: elements
          });
        }
      });
      return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
        sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
        return acc;
      }, []).concat(regularTabbables);
    };
    tabbable = function tabbable2(container, options) {
      options = options || {};
      var candidates;
      if (options.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options.includeContainer, {
          filter: isNodeMatchingSelectorTabbable.bind(null, options),
          flatten: false,
          getShadowRoot: options.getShadowRoot,
          shadowRootFilter: isValidShadowRootTabbable
        });
      } else {
        candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
      }
      return sortByOrder(candidates);
    };
    focusable = function focusable2(container, options) {
      options = options || {};
      var candidates;
      if (options.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options.includeContainer, {
          filter: isNodeMatchingSelectorFocusable.bind(null, options),
          flatten: true,
          getShadowRoot: options.getShadowRoot
        });
      } else {
        candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
      }
      return candidates;
    };
    isTabbable = function isTabbable2(node, options) {
      options = options || {};
      if (!node) {
        throw new Error("No node provided");
      }
      if (matches.call(node, candidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorTabbable(options, node);
    };
    focusableCandidateSelector = /* @__PURE__ */ candidateSelectors.concat("iframe").join(",");
    isFocusable = function isFocusable2(node, options) {
      options = options || {};
      if (!node) {
        throw new Error("No node provided");
      }
      if (matches.call(node, focusableCandidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorFocusable(options, node);
    };
  }
});

// node_modules/focus-trap/dist/focus-trap.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var activeFocusTraps, isSelectableInput, isEscapeEvent, isTabEvent, isKeyForward, isKeyBackward, delay, findIndex, valueOrHandler, getActualTarget, internalTrapStack, createFocusTrap;
var init_focus_trap_esm = __esm({
  "node_modules/focus-trap/dist/focus-trap.esm.js"() {
    init_index_esm();
    activeFocusTraps = {
      activateTrap: function activateTrap(trapStack, trap) {
        if (trapStack.length > 0) {
          var activeTrap = trapStack[trapStack.length - 1];
          if (activeTrap !== trap) {
            activeTrap.pause();
          }
        }
        var trapIndex = trapStack.indexOf(trap);
        if (trapIndex === -1) {
          trapStack.push(trap);
        } else {
          trapStack.splice(trapIndex, 1);
          trapStack.push(trap);
        }
      },
      deactivateTrap: function deactivateTrap(trapStack, trap) {
        var trapIndex = trapStack.indexOf(trap);
        if (trapIndex !== -1) {
          trapStack.splice(trapIndex, 1);
        }
        if (trapStack.length > 0) {
          trapStack[trapStack.length - 1].unpause();
        }
      }
    };
    isSelectableInput = function isSelectableInput2(node) {
      return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
    };
    isEscapeEvent = function isEscapeEvent2(e) {
      return (e === null || e === void 0 ? void 0 : e.key) === "Escape" || (e === null || e === void 0 ? void 0 : e.key) === "Esc" || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;
    };
    isTabEvent = function isTabEvent2(e) {
      return (e === null || e === void 0 ? void 0 : e.key) === "Tab" || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;
    };
    isKeyForward = function isKeyForward2(e) {
      return isTabEvent(e) && !e.shiftKey;
    };
    isKeyBackward = function isKeyBackward2(e) {
      return isTabEvent(e) && e.shiftKey;
    };
    delay = function delay2(fn) {
      return setTimeout(fn, 0);
    };
    findIndex = function findIndex2(arr, fn) {
      var idx = -1;
      arr.every(function(value, i) {
        if (fn(value)) {
          idx = i;
          return false;
        }
        return true;
      });
      return idx;
    };
    valueOrHandler = function valueOrHandler2(value) {
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      return typeof value === "function" ? value.apply(void 0, params) : value;
    };
    getActualTarget = function getActualTarget2(event) {
      return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
    };
    internalTrapStack = [];
    createFocusTrap = function createFocusTrap2(elements, userOptions) {
      var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
      var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
      var config = _objectSpread2({
        returnFocusOnDeactivate: true,
        escapeDeactivates: true,
        delayInitialFocus: true,
        isKeyForward,
        isKeyBackward
      }, userOptions);
      var state = {
        // containers given to createFocusTrap()
        // @type {Array<HTMLElement>}
        containers: [],
        // list of objects identifying tabbable nodes in `containers` in the trap
        // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
        //  is active, but the trap should never get to a state where there isn't at least one group
        //  with at least one tabbable node in it (that would lead to an error condition that would
        //  result in an error being thrown)
        // @type {Array<{
        //   container: HTMLElement,
        //   tabbableNodes: Array<HTMLElement>, // empty if none
        //   focusableNodes: Array<HTMLElement>, // empty if none
        //   posTabIndexesFound: boolean,
        //   firstTabbableNode: HTMLElement|undefined,
        //   lastTabbableNode: HTMLElement|undefined,
        //   firstDomTabbableNode: HTMLElement|undefined,
        //   lastDomTabbableNode: HTMLElement|undefined,
        //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
        // }>}
        containerGroups: [],
        // same order/length as `containers` list
        // references to objects in `containerGroups`, but only those that actually have
        //  tabbable nodes in them
        // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
        //  the same length
        tabbableGroups: [],
        nodeFocusedBeforeActivation: null,
        mostRecentlyFocusedNode: null,
        active: false,
        paused: false,
        // timer ID for when delayInitialFocus is true and initial focus in this trap
        //  has been delayed during activation
        delayInitialFocusTimer: void 0,
        // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
        recentNavEvent: void 0
      };
      var trap;
      var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
        return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config[configOptionName || optionName];
      };
      var findContainerIndex = function findContainerIndex2(element, event) {
        var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
        return state.containerGroups.findIndex(function(_ref) {
          var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
          return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
          //  web components if the `tabbableOptions.getShadowRoot` option was used for
          //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
          //  look inside web components even if open)
          (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
            return node === element;
          });
        });
      };
      var getNodeForOption = function getNodeForOption2(optionName) {
        var optionValue = config[optionName];
        if (typeof optionValue === "function") {
          for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            params[_key2 - 1] = arguments[_key2];
          }
          optionValue = optionValue.apply(void 0, params);
        }
        if (optionValue === true) {
          optionValue = void 0;
        }
        if (!optionValue) {
          if (optionValue === void 0 || optionValue === false) {
            return optionValue;
          }
          throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
        }
        var node = optionValue;
        if (typeof optionValue === "string") {
          node = doc.querySelector(optionValue);
          if (!node) {
            throw new Error("`".concat(optionName, "` as selector refers to no known node"));
          }
        }
        return node;
      };
      var getInitialFocusNode = function getInitialFocusNode2() {
        var node = getNodeForOption("initialFocus");
        if (node === false) {
          return false;
        }
        if (node === void 0 || !isFocusable(node, config.tabbableOptions)) {
          if (findContainerIndex(doc.activeElement) >= 0) {
            node = doc.activeElement;
          } else {
            var firstTabbableGroup = state.tabbableGroups[0];
            var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
            node = firstTabbableNode || getNodeForOption("fallbackFocus");
          }
        }
        if (!node) {
          throw new Error("Your focus-trap needs to have at least one focusable element");
        }
        return node;
      };
      var updateTabbableNodes = function updateTabbableNodes2() {
        state.containerGroups = state.containers.map(function(container) {
          var tabbableNodes = tabbable(container, config.tabbableOptions);
          var focusableNodes = focusable(container, config.tabbableOptions);
          var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
          var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
          var firstDomTabbableNode = focusableNodes.find(function(node) {
            return isTabbable(node);
          });
          var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
            return isTabbable(node);
          });
          var posTabIndexesFound = !!tabbableNodes.find(function(node) {
            return getTabIndex(node) > 0;
          });
          return {
            container,
            tabbableNodes,
            focusableNodes,
            /** True if at least one node with positive `tabindex` was found in this container. */
            posTabIndexesFound,
            /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
            firstTabbableNode,
            /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
            lastTabbableNode,
            // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
            //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
            //  because that API doesn't work with Shadow DOM as well as it should (@see
            //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
            //  to address an edge case related to positive tabindex support, this seems like a much easier,
            //  "close enough most of the time" alternative for positive tabindexes which should generally
            //  be avoided anyway...
            /** First tabbable node in container, __DOM__ order; `undefined` if none. */
            firstDomTabbableNode,
            /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
            lastDomTabbableNode,
            /**
             * Finds the __tabbable__ node that follows the given node in the specified direction,
             *  in this container, if any.
             * @param {HTMLElement} node
             * @param {boolean} [forward] True if going in forward tab order; false if going
             *  in reverse.
             * @returns {HTMLElement|undefined} The next tabbable node, if any.
             */
            nextTabbableNode: function nextTabbableNode(node) {
              var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              var nodeIdx = tabbableNodes.indexOf(node);
              if (nodeIdx < 0) {
                if (forward) {
                  return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                    return isTabbable(el);
                  });
                }
                return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
                  return isTabbable(el);
                });
              }
              return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
            }
          };
        });
        state.tabbableGroups = state.containerGroups.filter(function(group) {
          return group.tabbableNodes.length > 0;
        });
        if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
          throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
        }
        if (state.containerGroups.find(function(g) {
          return g.posTabIndexesFound;
        }) && state.containerGroups.length > 1) {
          throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
        }
      };
      var tryFocus = function tryFocus2(node) {
        if (node === false) {
          return;
        }
        if (node === doc.activeElement) {
          return;
        }
        if (!node || !node.focus) {
          tryFocus2(getInitialFocusNode());
          return;
        }
        node.focus({
          preventScroll: !!config.preventScroll
        });
        state.mostRecentlyFocusedNode = node;
        if (isSelectableInput(node)) {
          node.select();
        }
      };
      var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
        var node = getNodeForOption("setReturnFocus", previousActiveElement);
        return node ? node : node === false ? false : previousActiveElement;
      };
      var findNextNavNode = function findNextNavNode2(_ref2) {
        var target = _ref2.target, event = _ref2.event, _ref2$isBackward = _ref2.isBackward, isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;
        target = target || getActualTarget(event);
        updateTabbableNodes();
        var destinationNode = null;
        if (state.tabbableGroups.length > 0) {
          var containerIndex = findContainerIndex(target, event);
          var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
          if (containerIndex < 0) {
            if (isBackward) {
              destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
            } else {
              destinationNode = state.tabbableGroups[0].firstTabbableNode;
            }
          } else if (isBackward) {
            var startOfGroupIndex = findIndex(state.tabbableGroups, function(_ref3) {
              var firstTabbableNode = _ref3.firstTabbableNode;
              return target === firstTabbableNode;
            });
            if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
              startOfGroupIndex = containerIndex;
            }
            if (startOfGroupIndex >= 0) {
              var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
              var destinationGroup = state.tabbableGroups[destinationGroupIndex];
              destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
            } else if (!isTabEvent(event)) {
              destinationNode = containerGroup.nextTabbableNode(target, false);
            }
          } else {
            var lastOfGroupIndex = findIndex(state.tabbableGroups, function(_ref4) {
              var lastTabbableNode = _ref4.lastTabbableNode;
              return target === lastTabbableNode;
            });
            if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
              lastOfGroupIndex = containerIndex;
            }
            if (lastOfGroupIndex >= 0) {
              var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
              var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
              destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
            } else if (!isTabEvent(event)) {
              destinationNode = containerGroup.nextTabbableNode(target);
            }
          }
        } else {
          destinationNode = getNodeForOption("fallbackFocus");
        }
        return destinationNode;
      };
      var checkPointerDown = function checkPointerDown2(e) {
        var target = getActualTarget(e);
        if (findContainerIndex(target, e) >= 0) {
          return;
        }
        if (valueOrHandler(config.clickOutsideDeactivates, e)) {
          trap.deactivate({
            // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
            //  which will result in the outside click setting focus to the node
            //  that was clicked (and if not focusable, to "nothing"); by setting
            //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
            //  on activation (or the configured `setReturnFocus` node), whether the
            //  outside click was on a focusable node or not
            returnFocus: config.returnFocusOnDeactivate
          });
          return;
        }
        if (valueOrHandler(config.allowOutsideClick, e)) {
          return;
        }
        e.preventDefault();
      };
      var checkFocusIn = function checkFocusIn2(event) {
        var target = getActualTarget(event);
        var targetContained = findContainerIndex(target, event) >= 0;
        if (targetContained || target instanceof Document) {
          if (targetContained) {
            state.mostRecentlyFocusedNode = target;
          }
        } else {
          event.stopImmediatePropagation();
          var nextNode;
          var navAcrossContainers = true;
          if (state.mostRecentlyFocusedNode) {
            if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
              var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
              var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
              if (tabbableNodes.length > 0) {
                var mruTabIdx = tabbableNodes.findIndex(function(node) {
                  return node === state.mostRecentlyFocusedNode;
                });
                if (mruTabIdx >= 0) {
                  if (config.isKeyForward(state.recentNavEvent)) {
                    if (mruTabIdx + 1 < tabbableNodes.length) {
                      nextNode = tabbableNodes[mruTabIdx + 1];
                      navAcrossContainers = false;
                    }
                  } else {
                    if (mruTabIdx - 1 >= 0) {
                      nextNode = tabbableNodes[mruTabIdx - 1];
                      navAcrossContainers = false;
                    }
                  }
                }
              }
            } else {
              if (!state.containerGroups.some(function(g) {
                return g.tabbableNodes.some(function(n) {
                  return getTabIndex(n) > 0;
                });
              })) {
                navAcrossContainers = false;
              }
            }
          } else {
            navAcrossContainers = false;
          }
          if (navAcrossContainers) {
            nextNode = findNextNavNode({
              // move FROM the MRU node, not event-related node (which will be the node that is
              //  outside the trap causing the focus escape we're trying to fix)
              target: state.mostRecentlyFocusedNode,
              isBackward: config.isKeyBackward(state.recentNavEvent)
            });
          }
          if (nextNode) {
            tryFocus(nextNode);
          } else {
            tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
          }
        }
        state.recentNavEvent = void 0;
      };
      var checkKeyNav = function checkKeyNav2(event) {
        var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        state.recentNavEvent = event;
        var destinationNode = findNextNavNode({
          event,
          isBackward
        });
        if (destinationNode) {
          if (isTabEvent(event)) {
            event.preventDefault();
          }
          tryFocus(destinationNode);
        }
      };
      var checkKey = function checkKey2(event) {
        if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {
          event.preventDefault();
          trap.deactivate();
          return;
        }
        if (config.isKeyForward(event) || config.isKeyBackward(event)) {
          checkKeyNav(event, config.isKeyBackward(event));
        }
      };
      var checkClick = function checkClick2(e) {
        var target = getActualTarget(e);
        if (findContainerIndex(target, e) >= 0) {
          return;
        }
        if (valueOrHandler(config.clickOutsideDeactivates, e)) {
          return;
        }
        if (valueOrHandler(config.allowOutsideClick, e)) {
          return;
        }
        e.preventDefault();
        e.stopImmediatePropagation();
      };
      var addListeners = function addListeners2() {
        if (!state.active) {
          return;
        }
        activeFocusTraps.activateTrap(trapStack, trap);
        state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function() {
          tryFocus(getInitialFocusNode());
        }) : tryFocus(getInitialFocusNode());
        doc.addEventListener("focusin", checkFocusIn, true);
        doc.addEventListener("mousedown", checkPointerDown, {
          capture: true,
          passive: false
        });
        doc.addEventListener("touchstart", checkPointerDown, {
          capture: true,
          passive: false
        });
        doc.addEventListener("click", checkClick, {
          capture: true,
          passive: false
        });
        doc.addEventListener("keydown", checkKey, {
          capture: true,
          passive: false
        });
        return trap;
      };
      var removeListeners = function removeListeners2() {
        if (!state.active) {
          return;
        }
        doc.removeEventListener("focusin", checkFocusIn, true);
        doc.removeEventListener("mousedown", checkPointerDown, true);
        doc.removeEventListener("touchstart", checkPointerDown, true);
        doc.removeEventListener("click", checkClick, true);
        doc.removeEventListener("keydown", checkKey, true);
        return trap;
      };
      var checkDomRemoval = function checkDomRemoval2(mutations) {
        var isFocusedNodeRemoved = mutations.some(function(mutation) {
          var removedNodes = Array.from(mutation.removedNodes);
          return removedNodes.some(function(node) {
            return node === state.mostRecentlyFocusedNode;
          });
        });
        if (isFocusedNodeRemoved) {
          tryFocus(getInitialFocusNode());
        }
      };
      var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
      var updateObservedNodes = function updateObservedNodes2() {
        if (!mutationObserver) {
          return;
        }
        mutationObserver.disconnect();
        if (state.active && !state.paused) {
          state.containers.map(function(container) {
            mutationObserver.observe(container, {
              subtree: true,
              childList: true
            });
          });
        }
      };
      trap = {
        get active() {
          return state.active;
        },
        get paused() {
          return state.paused;
        },
        activate: function activate(activateOptions) {
          if (state.active) {
            return this;
          }
          var onActivate = getOption(activateOptions, "onActivate");
          var onPostActivate = getOption(activateOptions, "onPostActivate");
          var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
          if (!checkCanFocusTrap) {
            updateTabbableNodes();
          }
          state.active = true;
          state.paused = false;
          state.nodeFocusedBeforeActivation = doc.activeElement;
          onActivate === null || onActivate === void 0 ? void 0 : onActivate();
          var finishActivation = function finishActivation2() {
            if (checkCanFocusTrap) {
              updateTabbableNodes();
            }
            addListeners();
            updateObservedNodes();
            onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();
          };
          if (checkCanFocusTrap) {
            checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
            return this;
          }
          finishActivation();
          return this;
        },
        deactivate: function deactivate(deactivateOptions) {
          if (!state.active) {
            return this;
          }
          var options = _objectSpread2({
            onDeactivate: config.onDeactivate,
            onPostDeactivate: config.onPostDeactivate,
            checkCanReturnFocus: config.checkCanReturnFocus
          }, deactivateOptions);
          clearTimeout(state.delayInitialFocusTimer);
          state.delayInitialFocusTimer = void 0;
          removeListeners();
          state.active = false;
          state.paused = false;
          updateObservedNodes();
          activeFocusTraps.deactivateTrap(trapStack, trap);
          var onDeactivate = getOption(options, "onDeactivate");
          var onPostDeactivate = getOption(options, "onPostDeactivate");
          var checkCanReturnFocus = getOption(options, "checkCanReturnFocus");
          var returnFocus = getOption(options, "returnFocus", "returnFocusOnDeactivate");
          onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();
          var finishDeactivation = function finishDeactivation2() {
            delay(function() {
              if (returnFocus) {
                tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
              }
              onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();
            });
          };
          if (returnFocus && checkCanReturnFocus) {
            checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
            return this;
          }
          finishDeactivation();
          return this;
        },
        pause: function pause(pauseOptions) {
          if (state.paused || !state.active) {
            return this;
          }
          var onPause = getOption(pauseOptions, "onPause");
          var onPostPause = getOption(pauseOptions, "onPostPause");
          state.paused = true;
          onPause === null || onPause === void 0 ? void 0 : onPause();
          removeListeners();
          updateObservedNodes();
          onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();
          return this;
        },
        unpause: function unpause(unpauseOptions) {
          if (!state.paused || !state.active) {
            return this;
          }
          var onUnpause = getOption(unpauseOptions, "onUnpause");
          var onPostUnpause = getOption(unpauseOptions, "onPostUnpause");
          state.paused = false;
          onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();
          updateTabbableNodes();
          addListeners();
          updateObservedNodes();
          onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();
          return this;
        },
        updateContainerElements: function updateContainerElements(containerElements) {
          var elementsAsArray = [].concat(containerElements).filter(Boolean);
          state.containers = elementsAsArray.map(function(element) {
            return typeof element === "string" ? doc.querySelector(element) : element;
          });
          if (state.active) {
            updateTabbableNodes();
          }
          updateObservedNodes();
          return this;
        }
      };
      trap.updateContainerElements(elements);
      return trap;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/useUnmountEffect.js
function useUnmountEffect(effect4) {
  const effectRef = (0, import_react.useRef)(effect4);
  effectRef.current = effect4;
  (0, import_react.useEffect)(() => () => {
    effectRef.current();
  }, []);
}
var import_react;
var init_useUnmountEffect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/useUnmountEffect.js"() {
    import_react = __toESM(require_react());
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js
var import_react2, FocusTrap;
var init_FocusTrap = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js"() {
    init_tslib_es6();
    init_focus_trap_esm();
    import_react2 = __toESM(require_react());
    init_useUnmountEffect();
    FocusTrap = (0, import_react2.forwardRef)(function FocusTrap2(_a, forwardedRef) {
      var { active = true, paused = false, focusTrapOptions = {}, preventScrollOnDeactivate = false } = _a, props = __rest(_a, ["active", "paused", "focusTrapOptions", "preventScrollOnDeactivate"]);
      const ref = (0, import_react2.useRef)(null);
      (0, import_react2.useImperativeHandle)(forwardedRef, () => ref.current);
      const focusTrapRef = (0, import_react2.useRef)(null);
      (0, import_react2.useEffect)(() => {
        const focusTrap = createFocusTrap(ref.current, Object.assign(Object.assign({}, focusTrapOptions), { returnFocusOnDeactivate: false }));
        focusTrapRef.current = focusTrap;
        return () => {
          focusTrap.deactivate();
        };
      }, []);
      (0, import_react2.useEffect)(() => {
        const focusTrap = focusTrapRef.current;
        active ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.activate() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.deactivate();
      }, [active]);
      (0, import_react2.useEffect)(() => {
        const focusTrap = focusTrapRef.current;
        paused ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.pause() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.unpause();
      }, [paused]);
      const previousElementRef = (0, import_react2.useRef)(typeof document !== "undefined" ? document.activeElement : null);
      useUnmountEffect(() => {
        if (focusTrapOptions.returnFocusOnDeactivate !== false && previousElementRef.current instanceof HTMLElement) {
          previousElementRef.current.focus({
            preventScroll: preventScrollOnDeactivate
          });
        }
      });
      return import_react2.default.createElement("div", Object.assign({ ref }, props));
    });
    FocusTrap.displayName = "FocusTrap";
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/util.js
function capitalize(input) {
  return input[0].toUpperCase() + input.substring(1);
}
function getUniqueId(prefix = "pf") {
  const uid2 = (/* @__PURE__ */ new Date()).getTime() + Math.random().toString(36).slice(2);
  return `${prefix}-${uid2}`;
}
function debounce(func, wait) {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}
function isElementInView(container, element, partial, strict = false) {
  if (!container || !element) {
    return false;
  }
  const containerBounds = container.getBoundingClientRect();
  const elementBounds = element.getBoundingClientRect();
  const containerBoundsLeft = Math.ceil(containerBounds.left);
  const containerBoundsRight = Math.floor(containerBounds.right);
  const elementBoundsLeft = Math.ceil(elementBounds.left);
  const elementBoundsRight = Math.floor(elementBounds.right);
  const isTotallyInView = elementBoundsLeft >= containerBoundsLeft && elementBoundsRight <= containerBoundsRight;
  const isPartiallyInView = (partial || !strict && containerBounds.width < elementBounds.width) && (elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft || elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight);
  return isTotallyInView || isPartiallyInView;
}
function fillTemplate(templateString, templateVars) {
  return templateString.replace(/\${(.*?)}/g, (_, match) => templateVars[match] || "");
}
function pluralize(i, singular, plural) {
  if (!plural) {
    plural = `${singular}s`;
  }
  return `${i || 0} ${i === 1 ? singular : plural}`;
}
var ReactDOM, setBreakpointCssVars, formatBreakpointMods, getVerticalBreakpoint, getBreakpoint, camelize, toCamel, canUseDOM, getTextWidth, innerDimensions, trimLeft, clearTimeouts, getLanguageDirection;
var init_util = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/util.js"() {
    ReactDOM = __toESM(require_react_dom());
    init_constants();
    setBreakpointCssVars = (mods, cssVar) => Object.entries(mods || {}).reduce((acc, [breakpoint, value]) => breakpoint === "default" ? Object.assign(Object.assign({}, acc), { [cssVar]: value }) : Object.assign(Object.assign({}, acc), { [`${cssVar}-on-${breakpoint}`]: value }), {});
    formatBreakpointMods = (mods, styles, stylePrefix = "", breakpoint, vertical) => {
      if (!mods) {
        return "";
      }
      if (breakpoint && !vertical) {
        if (breakpoint in mods) {
          return styles.modifiers[toCamel(`${stylePrefix}${mods[breakpoint]}`)];
        }
        const breakpointsOrder = ["2xl", "xl", "lg", "md", "sm", "default"];
        const breakpointsIndex = breakpointsOrder.indexOf(breakpoint);
        for (let i = breakpointsIndex; i < breakpointsOrder.length; i++) {
          if (breakpointsOrder[i] in mods) {
            return styles.modifiers[toCamel(`${stylePrefix}${mods[breakpointsOrder[i]]}`)];
          }
        }
        return "";
      }
      return Object.entries(mods || {}).map(([breakpoint2, mod]) => `${stylePrefix}${mod}${breakpoint2 !== "default" ? `-on-${breakpoint2}` : ""}${vertical && breakpoint2 !== "default" ? "-height" : ""}`).map(toCamel).map((mod) => mod.replace(/-?(\dxl)/gi, (_res, group) => `_${group}`)).map((modifierKey) => styles.modifiers[modifierKey]).filter(Boolean).join(" ");
    };
    getVerticalBreakpoint = (height) => {
      if (height === null) {
        return null;
      }
      if (height >= globalHeightBreakpoints["2xl"]) {
        return "2xl";
      }
      if (height >= globalHeightBreakpoints.xl) {
        return "xl";
      }
      if (height >= globalHeightBreakpoints.lg) {
        return "lg";
      }
      if (height >= globalHeightBreakpoints.md) {
        return "md";
      }
      if (height >= globalHeightBreakpoints.sm) {
        return "sm";
      }
      return "default";
    };
    getBreakpoint = (width) => {
      if (width === null) {
        return null;
      }
      if (width >= globalWidthBreakpoints["2xl"]) {
        return "2xl";
      }
      if (width >= globalWidthBreakpoints.xl) {
        return "xl";
      }
      if (width >= globalWidthBreakpoints.lg) {
        return "lg";
      }
      if (width >= globalWidthBreakpoints.md) {
        return "md";
      }
      if (width >= globalWidthBreakpoints.sm) {
        return "sm";
      }
      return "default";
    };
    camelize = (s) => s.toUpperCase().replace("-", "").replace("_", "");
    toCamel = (s) => s.replace(/([-_][a-z])/gi, camelize);
    canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
    getTextWidth = (text, node) => {
      const computedStyle = getComputedStyle(node);
      const getFontFromComputedStyle = () => {
        let computedFont = "";
        const fontStretchLookupTable = {
          "50%": "ultra-condensed",
          "62.5%": "extra-condensed",
          "75%": "condensed",
          "87.5%": "semi-condensed",
          "100%": "normal",
          "112.5%": "semi-expanded",
          "125%": "expanded",
          "150%": "extra-expanded",
          "200%": "ultra-expanded"
        };
        let fontStretch;
        if (computedStyle.fontStretch in fontStretchLookupTable) {
          fontStretch = fontStretchLookupTable[computedStyle.fontStretch];
        } else {
          fontStretch = "normal";
        }
        computedFont = computedStyle.fontStyle + " " + computedStyle.fontVariant + " " + computedStyle.fontWeight + " " + fontStretch + " " + computedStyle.fontSize + "/" + computedStyle.lineHeight + " " + computedStyle.fontFamily;
        return computedFont;
      };
      const canvas = document.createElement("canvas");
      const context = canvas.getContext("2d");
      context.font = computedStyle.font || getFontFromComputedStyle();
      return context.measureText(text).width;
    };
    innerDimensions = (node) => {
      const computedStyle = getComputedStyle(node);
      let width = node.clientWidth;
      let height = node.clientHeight;
      height -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);
      width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
      return { height, width };
    };
    trimLeft = (node, value) => {
      const availableWidth = innerDimensions(node).width;
      let newValue = value;
      if (getTextWidth(value, node) > availableWidth) {
        while (getTextWidth(`...${newValue}`, node) > availableWidth) {
          newValue = newValue.substring(1);
        }
        if (node.value) {
          node.value = `...${newValue}`;
        } else {
          node.innerText = `...${newValue}`;
        }
      } else {
        if (node.value) {
          node.value = value;
        } else {
          node.innerText = value;
        }
      }
    };
    clearTimeouts = (timeoutRefs) => {
      timeoutRefs.forEach((ref) => {
        if (ref.current) {
          clearTimeout(ref.current);
        }
      });
    };
    getLanguageDirection = (targetElement, defaultDirection = "ltr") => {
      if (!targetElement) {
        return defaultDirection;
      }
      const computedDirection = getComputedStyle(targetElement).getPropertyValue("direction");
      if (["ltr", "rtl"].includes(computedDirection)) {
        return computedDirection;
      }
      return defaultDirection;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js
function getRandomId() {
  if (typeof crypto !== "undefined" && crypto.randomUUID) {
    return crypto.randomUUID();
  } else {
    return getUniqueId();
  }
}
var React3, currentId, GenerateId;
var init_GenerateId = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js"() {
    React3 = __toESM(require_react());
    init_util();
    currentId = 0;
    GenerateId = class extends React3.Component {
      constructor() {
        super(...arguments);
        this.uniqueElement = this.props.isRandom ? getRandomId() : currentId++;
        this.id = `${this.props.prefix}${this.uniqueElement}`;
      }
      render() {
        return this.props.children(this.id);
      }
    };
    GenerateId.displayName = "GenerateId";
    GenerateId.defaultProps = {
      prefix: "pf-random-id-",
      isRandom: false
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/htmlConstants.js
var ASTERISK;
var init_htmlConstants = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/htmlConstants.js"() {
    ASTERISK = "*";
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/typeUtils.js
var init_typeUtils = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/typeUtils.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/OUIA/ouia.js
function getOUIAProps(componentType, id, ouiaSafe = true) {
  return {
    "data-ouia-component-type": `PF5/${componentType}`,
    "data-ouia-safe": ouiaSafe,
    "data-ouia-component-id": id
  };
}
function getDefaultOUIAId(componentType, variant) {
  try {
    let key;
    if (typeof window !== "undefined") {
      key = `${window.location.href}-${componentType}-${variant || ""}`;
    } else {
      key = `${componentType}-${variant || ""}`;
    }
    if (!ouiaIdByRoute[key]) {
      ouiaIdByRoute[key] = 0;
    }
    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ""}${++ouiaIdByRoute[key]}`;
  } catch (exception) {
    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ""}${++uid}`;
  }
}
var import_react3, uid, ouiaPrefix, ouiaIdByRoute, useOUIAProps, useOUIAId;
var init_ouia = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/OUIA/ouia.js"() {
    import_react3 = __toESM(require_react());
    uid = 0;
    ouiaPrefix = "OUIA-Generated-";
    ouiaIdByRoute = {};
    useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({
      "data-ouia-component-type": `PF5/${componentType}`,
      "data-ouia-safe": ouiaSafe,
      "data-ouia-component-id": useOUIAId(componentType, id, variant)
    });
    useOUIAId = (componentType, id, variant) => {
      const defaultOUIAId = (0, import_react3.useMemo)(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);
      return id !== null && id !== void 0 ? id : defaultOUIAId;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element) {
  const rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}
var init_getBoundingClientRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getBoundingClientRect.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindow.js
function getWindow(node) {
  if (node.toString() !== "[object Window]") {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }
  return node;
}
var init_getWindow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindow.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  const win = getWindow(node);
  const scrollLeft = win.pageXOffset;
  const scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
var init_getWindowScroll = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScroll.js"() {
    init_getWindow();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/instanceOf.js
function isElement(node) {
  const OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  const OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
var init_instanceOf = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/instanceOf.js"() {
    init_getWindow();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
var init_getHTMLElementScroll = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getHTMLElementScroll.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
var init_getNodeScroll = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeScroll.js"() {
    init_getWindowScroll();
    init_getWindow();
    init_instanceOf();
    init_getHTMLElementScroll();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
var init_getNodeName = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeName.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return (isElement(element) ? element.ownerDocument : element.document).documentElement;
}
var init_getDocumentElement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentElement.js"() {
    init_instanceOf();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
var init_getWindowScrollBarX = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScrollBarX.js"() {
    init_getBoundingClientRect();
    init_getDocumentElement();
    init_getWindowScroll();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getComputedStyle.js
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
var init_getComputedStyle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getComputedStyle.js"() {
    init_getWindow();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isScrollParent.js
function isScrollParent(element) {
  const { overflow, overflowX, overflowY } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
var init_isScrollParent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isScrollParent.js"() {
    init_getComputedStyle();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.js
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {
  const documentElement = getDocumentElement(offsetParent);
  const rect = getBoundingClientRect(elementOrVirtualElement);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  let scroll = { scrollLeft: 0, scrollTop: 0 };
  let offsets = { x: 0, y: 0 };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
var init_getCompositeRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.js"() {
    init_getBoundingClientRect();
    init_getNodeScroll();
    init_getNodeName();
    init_instanceOf();
    init_getWindowScrollBarX();
    init_getDocumentElement();
    init_isScrollParent();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}
var init_getLayoutRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getLayoutRect.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    // $FlowFixMe: need a better way to handle this...
    element.host || // ShadowRoot detected
    // $FlowFixMe: HTMLElement is a Node
    getDocumentElement(element)
  );
}
var init_getParentNode = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getParentNode.js"() {
    init_getNodeName();
    init_getDocumentElement();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
var init_getScrollParent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getScrollParent.js"() {
    init_getParentNode();
    init_isScrollParent();
    init_getNodeName();
    init_instanceOf();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/listScrollParents.js
function listScrollParents(element, list = []) {
  const scrollParent = getScrollParent(element);
  const isBody = getNodeName(scrollParent) === "body";
  const win = getWindow(scrollParent);
  const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  const updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
var init_listScrollParents = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/listScrollParents.js"() {
    init_getScrollParent();
    init_getParentNode();
    init_getNodeName();
    init_getWindow();
    init_isScrollParent();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
var init_isTableElement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isTableElement.js"() {
    init_getNodeName();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element).position === "fixed") {
    return null;
  }
  const offsetParent = element.offsetParent;
  if (offsetParent) {
    const html = getDocumentElement(offsetParent);
    if (getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && getComputedStyle2(html).position !== "static") {
      return html;
    }
  }
  return offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    const css2 = getComputedStyle2(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.willChange && css2.willChange !== "auto") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  const window2 = getWindow(element);
  let offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static") {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
var init_getOffsetParent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.js"() {
    init_getWindow();
    init_getNodeName();
    init_getComputedStyle();
    init_instanceOf();
    init_isTableElement();
    init_getParentNode();
    init_getDocumentElement();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/enums.js
var top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases;
var init_enums = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/enums.js"() {
    top = "top";
    bottom = "bottom";
    right = "right";
    left = "left";
    auto = "auto";
    basePlacements = [top, bottom, right, left];
    start = "start";
    end = "end";
    clippingParents = "clippingParents";
    viewport = "viewport";
    popper = "popper";
    reference = "reference";
    variationPlacements = basePlacements.reduce((acc, placement) => acc.concat([`${placement}-${start}`, `${placement}-${end}`]), []);
    placements = [...basePlacements, auto].reduce((acc, placement) => acc.concat([placement, `${placement}-${start}`, `${placement}-${end}`]), []);
    beforeRead = "beforeRead";
    read = "read";
    afterRead = "afterRead";
    beforeMain = "beforeMain";
    main = "main";
    afterMain = "afterMain";
    beforeWrite = "beforeWrite";
    write = "write";
    afterWrite = "afterWrite";
    modifierPhases = [
      beforeRead,
      read,
      afterRead,
      beforeMain,
      main,
      afterMain,
      beforeWrite,
      write,
      afterWrite
    ];
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.js
function order(modifiers) {
  const map = /* @__PURE__ */ new Map();
  const visited = /* @__PURE__ */ new Set();
  const result = [];
  modifiers.forEach((modifier) => {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    const requires = [...modifier.requires || [], ...modifier.requiresIfExists || []];
    requires.forEach((dep) => {
      if (!visited.has(dep)) {
        const depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach((modifier) => {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  const orderedModifiers = order(modifiers);
  return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter((modifier) => modifier.phase === phase)), []);
}
var init_orderModifiers = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.js"() {
    init_enums();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/debounce.js
function debounce2(fn) {
  let pending;
  return () => {
    if (!pending) {
      pending = new Promise((resolve) => {
        Promise.resolve().then(() => {
          pending = void 0;
          resolve(fn());
        });
      });
    }
    return pending;
  };
}
var init_debounce = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/debounce.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var init_getBasePlacement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getBasePlacement.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergeByName.js
function mergeByName(modifiers) {
  const merged = modifiers.reduce((merged2, current) => {
    const existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), { options: Object.assign(Object.assign({}, existing.options), current.options), data: Object.assign(Object.assign({}, existing.data), current.data) }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map((key) => merged[key]);
}
var init_mergeByName = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergeByName.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.js
function getViewportRect(element) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}
var init_getViewportRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.js"() {
    init_getWindow();
    init_getDocumentElement();
    init_getWindowScrollBarX();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const winScroll = getWindowScroll(element);
  const body = element.ownerDocument.body;
  const width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  const y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return { width, height, x, y };
}
var init_getDocumentRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.js"() {
    init_getDocumentElement();
    init_getComputedStyle();
    init_getWindowScrollBarX();
    init_getWindowScroll();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/contains.js
function contains(parent, child) {
  const isShadow = Boolean(child.getRootNode && child.getRootNode().host);
  if (parent.contains(child)) {
    return true;
  } else if (isShadow) {
    let next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
var init_contains = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/contains.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign(Object.assign({}, rect), { left: rect.x, top: rect.y, right: rect.x + rect.width, bottom: rect.y + rect.height });
}
var init_rectToClientRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/rectToClientRect.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  const rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  const clippingParents2 = listScrollParents(getParentNode(element));
  const canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
  const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter((clippingParent) => isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body");
}
function getClippingRect(element, boundary, rootBoundary) {
  const mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  const clippingParents2 = [...mainClippingParents, rootBoundary];
  const firstClippingParent = clippingParents2[0];
  const clippingRect = clippingParents2.reduce((accRect, clippingParent) => {
    const rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
var init_getClippingRect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getClippingRect.js"() {
    init_enums();
    init_getViewportRect();
    init_getDocumentRect();
    init_listScrollParents();
    init_getOffsetParent();
    init_getDocumentElement();
    init_getComputedStyle();
    init_instanceOf();
    init_getBoundingClientRect();
    init_getParentNode();
    init_contains();
    init_getNodeName();
    init_rectToClientRect();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}
var init_getVariation = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getVariation.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
var init_getMainAxisFromPlacement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getMainAxisFromPlacement.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.js
function computeOffsets({ reference: reference2, element, placement }) {
  const basePlacement = placement ? getBasePlacement(placement) : null;
  const variation = placement ? getVariation(placement) : null;
  const commonX = reference2.x + reference2.width / 2 - element.width / 2;
  const commonY = reference2.y + reference2.height / 2 - element.height / 2;
  let offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    const len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}
var init_computeOffsets = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.js"() {
    init_getBasePlacement();
    init_getVariation();
    init_getMainAxisFromPlacement();
    init_enums();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
var init_getFreshSideObject = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getFreshSideObject.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
}
var init_mergePaddingObject = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergePaddingObject.js"() {
    init_getFreshSideObject();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce((hashMap, key) => {
    hashMap[key] = value;
    return hashMap;
  }, {});
}
var init_expandToHashMap = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/expandToHashMap.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/detectOverflow.js
function detectOverflow(state, options = {}) {
  const { placement = state.placement, boundary = clippingParents, rootBoundary = viewport, elementContext = popper, altBoundary = false, padding = 0 } = options;
  const paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  const altContext = elementContext === popper ? reference : popper;
  const referenceElement = state.elements.reference;
  const popperRect = state.rects.popper;
  const element = state.elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  const referenceClientRect = getBoundingClientRect(referenceElement);
  const popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  const popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets2));
  const elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  const overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  const offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    const offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach((key) => {
      const multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      const axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
var init_detectOverflow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/detectOverflow.js"() {
    init_getBoundingClientRect();
    init_getClippingRect();
    init_getDocumentElement();
    init_computeOffsets();
    init_rectToClientRect();
    init_enums();
    init_instanceOf();
    init_mergePaddingObject();
    init_expandToHashMap();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/types.js
var init_types = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/types.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/index.js
function areValidElements(...args) {
  return !args.some((element) => !(element && typeof element.getBoundingClientRect === "function"));
}
function popperGenerator(generatorOptions = {}) {
  const { defaultModifiers: defaultModifiers2 = [], defaultOptions = DEFAULT_OPTIONS } = generatorOptions;
  return function createPopper3(reference2, popper2, options = defaultOptions) {
    let state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    let effectCleanupFns = [];
    let isDestroyed = false;
    const instance = {
      state,
      setOptions(options2) {
        cleanupModifierEffects();
        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        const orderedModifiers = orderModifiers(mergeByName([...defaultModifiers2, ...state.options.modifiers]));
        state.orderedModifiers = orderedModifiers.filter((m) => m.enabled);
        if (false) {
          const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({ name }) => name);
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            const flipModifier = state.orderedModifiers.find(({ name }) => name === "flip");
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          const { marginTop, marginRight, marginBottom, marginLeft } = getComputedStyle2(popper2);
          if ([marginTop, marginRight, marginBottom, marginLeft].some((margin) => parseFloat(margin))) {
            console.warn([
              'Popper: CSS "margin" styles cannot be used to apply padding',
              "between the popper and its reference element or boundary.",
              "To replicate margin, use the `offset` modifier, as well as",
              "the `padding` option in the `preventOverflow` and `flip`",
              "modifiers."
            ].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate() {
        if (isDestroyed) {
          return;
        }
        const { reference: reference3, popper: popper3 } = state.elements;
        if (!areValidElements(reference3, popper3)) {
          if (false) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach((modifier) => state.modifiersData[modifier.name] = Object.assign({}, modifier.data));
        let __debug_loops__ = 0;
        for (let index = 0; index < state.orderedModifiers.length; index++) {
          if (false) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          const { fn, options: options2 = {}, name } = state.orderedModifiers[index];
          if (typeof fn === "function") {
            state = fn({ state, options: options2, name, instance }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce2(() => new Promise((resolve) => {
        instance.forceUpdate();
        resolve(state);
      })),
      destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (false) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then((state2) => {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(({ name, options: options2 = {}, effect: effect4 }) => {
        if (typeof effect4 === "function") {
          const cleanupFn = effect4({ state, name, instance, options: options2 });
          const noopFn = () => {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach((fn) => fn());
      effectCleanupFns = [];
    }
    return instance;
  };
}
var DEFAULT_OPTIONS, createPopper;
var init_popper_core = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/index.js"() {
    init_getCompositeRect();
    init_getLayoutRect();
    init_listScrollParents();
    init_getOffsetParent();
    init_orderModifiers();
    init_debounce();
    init_mergeByName();
    init_instanceOf();
    init_types();
    init_enums();
    DEFAULT_OPTIONS = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    createPopper = popperGenerator();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/eventListeners.js
function effect({ state, instance, options }) {
  const { scroll = true, resize = true } = options;
  const window2 = getWindow(state.elements.popper);
  const scrollParents = [...state.scrollParents.reference, ...state.scrollParents.popper];
  if (scroll) {
    scrollParents.forEach((scrollParent) => {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return () => {
    if (scroll) {
      scrollParents.forEach((scrollParent) => {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var passive, eventListeners_default;
var init_eventListeners = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/eventListeners.js"() {
    init_getWindow();
    passive = { passive: true };
    eventListeners_default = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: () => {
      },
      effect,
      data: {}
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/popperOffsets.js
function popperOffsets({ state, name }) {
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default;
var init_popperOffsets = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/popperOffsets.js"() {
    init_computeOffsets();
    popperOffsets_default = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/computeStyles.js
function roundOffsets({ x, y }) {
  const win = window;
  const dpr = win.devicePixelRatio || 1;
  return {
    x: Math.round(x * dpr) / dpr || 0,
    y: Math.round(y * dpr) / dpr || 0
  };
}
function mapToStyles({ popper: popper2, popperRect, placement, offsets, position, gpuAcceleration, adaptive }) {
  let { x, y } = roundOffsets(offsets);
  const hasX = offsets.hasOwnProperty("x");
  const hasY = offsets.hasOwnProperty("y");
  let sideX = left;
  let sideY = top;
  const win = window;
  if (adaptive) {
    let offsetParent = getOffsetParent(popper2);
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
    }
    if (placement === top) {
      sideY = bottom;
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left) {
      sideX = right;
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  const commonStyles = Object.assign({ position }, adaptive && unsetSides);
  if (gpuAcceleration) {
    return Object.assign(Object.assign({}, commonStyles), {
      [sideY]: hasY ? "0" : "",
      [sideX]: hasX ? "0" : "",
      // Layer acceleration can disable subpixel rendering which causes slightly
      // blurry text on low PPI displays, so we want to use 2D transforms
      // instead
      transform: (win.devicePixelRatio || 1) < 2 ? `translate(${x}px, ${y}px)` : `translate3d(${x}px, ${y}px, 0)`
    });
  }
  return Object.assign(Object.assign({}, commonStyles), { [sideY]: hasY ? `${y}px` : "", [sideX]: hasX ? `${x}px` : "", transform: "" });
}
function computeStyles({ state, options }) {
  const { gpuAcceleration = true, adaptive = true } = options;
  if (false) {
    const transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some((property) => transitionProperty.indexOf(property) >= 0)) {
      console.warn([
        "Popper: Detected CSS transitions on at least one of the following",
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        "\n\n",
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        "for smooth transitions, or remove these properties from the CSS",
        "transition declaration on the popper element if only transitioning",
        "opacity or background-color for example.",
        "\n\n",
        "We recommend using the popper element as a wrapper around an inner",
        "element that can have any CSS property transitioned for animations."
      ].join(" "));
    }
  }
  const commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.popperOffsets, position: state.options.strategy, adaptive })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.arrow, position: "absolute", adaptive: false })));
  }
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-placement": state.placement });
}
var unsetSides, computeStyles_default;
var init_computeStyles = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/computeStyles.js"() {
    init_enums();
    init_getOffsetParent();
    init_getWindow();
    init_getDocumentElement();
    init_getBasePlacement();
    unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    computeStyles_default = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.js
function applyStyles({ state }) {
  Object.keys(state.elements).forEach((name) => {
    const style = state.styles[name] || {};
    const attributes = state.attributes[name] || {};
    const element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach((name2) => {
      const value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect2({ state }) {
  const initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return () => {
    Object.keys(state.elements).forEach((name) => {
      const element = state.elements[name];
      const attributes = state.attributes[name] || {};
      const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      const style = styleProperties.reduce((style2, property) => {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach((attribute) => {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default;
var init_applyStyles = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.js"() {
    init_getNodeName();
    init_instanceOf();
    applyStyles_default = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect: effect2,
      requires: ["computeStyles"]
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  const basePlacement = getBasePlacement(placement);
  const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  let [skidding, distance] = typeof offset2 === "function" ? offset2(Object.assign(Object.assign({}, rects), { placement })) : offset2;
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };
}
function offset({ state, options, name }) {
  const { offset: offset2 = [0, 0] } = options;
  const data = placements.reduce((acc, placement) => {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  const { x, y } = data[state.placement];
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default;
var init_offset = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/offset.js"() {
    init_getBasePlacement();
    init_enums();
    offset_default = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositePlacement.js
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (matched) => hash[matched]);
}
var hash;
var init_getOppositePlacement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositePlacement.js"() {
    hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositeVariationPlacement.js
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, (matched) => hash2[matched]);
}
var hash2;
var init_getOppositeVariationPlacement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositeVariationPlacement.js"() {
    hash2 = { start: "end", end: "start" };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options = {}) {
  const { placement, boundary, rootBoundary, padding, flipVariations, allowedAutoPlacements = placements } = options;
  const variation = getVariation(placement);
  const placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter((placement2) => getVariation(placement2) === variation) : basePlacements;
  let allowedPlacements = placements2.filter((placement2) => allowedAutoPlacements.indexOf(placement2) >= 0);
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (false) {
      console.error([
        "Popper: The `allowedAutoPlacements` option did not allow any",
        "placements. Ensure the `placement` option matches the variation",
        "of the allowed placements.",
        'For example, "auto" cannot be used to allow "bottom-start".',
        'Use "auto-start" instead.'
      ].join(" "));
    }
  }
  const overflows = allowedPlacements.reduce((acc, placement2) => {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);
}
var init_computeAutoPlacement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.js"() {
    init_getVariation();
    init_enums();
    init_detectOverflow();
    init_getBasePlacement();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  const oppositePlacement = getOppositePlacement(placement);
  return [
    getOppositeVariationPlacement(placement),
    oppositePlacement,
    getOppositeVariationPlacement(oppositePlacement)
  ];
}
function flip({ state, options, name }) {
  if (state.modifiersData[name]._skip) {
    return;
  }
  const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = true, fallbackPlacements: specifiedFallbackPlacements, padding, boundary, rootBoundary, altBoundary, flipVariations = true, allowedAutoPlacements } = options;
  const preferredPlacement = state.options.placement;
  const basePlacement = getBasePlacement(preferredPlacement);
  const isBasePlacement = basePlacement === preferredPlacement;
  const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  const placements2 = [preferredPlacement, ...fallbackPlacements].reduce((acc, placement) => acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
    placement,
    boundary,
    rootBoundary,
    padding,
    flipVariations,
    allowedAutoPlacements
  }) : placement), []);
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;
  const checksMap = /* @__PURE__ */ new Map();
  let makeFallbackChecks = true;
  let firstFittingPlacement = placements2[0];
  for (let i = 0; i < placements2.length; i++) {
    const placement = placements2[i];
    const basePlacement2 = getBasePlacement(placement);
    const isStartVariation = getVariation(placement) === start;
    const isVertical = [top, bottom].indexOf(basePlacement2) >= 0;
    const len = isVertical ? "width" : "height";
    const overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    let mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    const altVariationSide = getOppositePlacement(mainVariationSide);
    const checks = [];
    if (checkMainAxis) {
      checks.push(overflow[basePlacement2] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every((check) => check)) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    const numberOfChecks = flipVariations ? 3 : 1;
    for (let i = numberOfChecks; i > 0; i--) {
      const fittingPlacement = placements2.find((placement) => {
        const checks = checksMap.get(placement);
        if (checks) {
          return checks.slice(0, i).every((check) => check);
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        break;
      }
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default;
var init_flip = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/flip.js"() {
    init_getOppositePlacement();
    init_getBasePlacement();
    init_getOppositeVariationPlacement();
    init_detectOverflow();
    init_computeAutoPlacement();
    init_enums();
    init_getVariation();
    flip_default = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: { _skip: false }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
var init_getAltAxis = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getAltAxis.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/within.js
function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}
var init_within = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/within.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/preventOverflow.js
function preventOverflow({ state, options, name }) {
  const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = false, boundary, rootBoundary, altBoundary, padding, tether = true, tetherOffset = 0 } = options;
  const overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  const basePlacement = getBasePlacement(state.placement);
  const variation = getVariation(state.placement);
  const isBasePlacement = !variation;
  const mainAxis = getMainAxisFromPlacement(basePlacement);
  const altAxis = getAltAxis(mainAxis);
  const popperOffsets2 = state.modifiersData.popperOffsets;
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;
  const tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign(Object.assign({}, state.rects), { placement: state.placement })) : tetherOffset;
  const data = { x: 0, y: 0 };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    const mainSide = mainAxis === "y" ? top : left;
    const altSide = mainAxis === "y" ? bottom : right;
    const len = mainAxis === "y" ? "height" : "width";
    const offset2 = popperOffsets2[mainAxis];
    const min = popperOffsets2[mainAxis] + overflow[mainSide];
    const max = popperOffsets2[mainAxis] - overflow[altSide];
    const additive = tether ? -popperRect[len] / 2 : 0;
    const minLen = variation === start ? referenceRect[len] : popperRect[len];
    const maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    const arrowElement = state.elements.arrow;
    const arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : { width: 0, height: 0 };
    const arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    const arrowPaddingMin = arrowPaddingObject[mainSide];
    const arrowPaddingMax = arrowPaddingObject[altSide];
    const arrowLen = within(0, referenceRect[len], arrowRect[len]);
    const minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    const maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    const arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    const clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    const tetherMin = popperOffsets2[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    const tetherMax = popperOffsets2[mainAxis] + maxOffset - offsetModifierValue;
    const preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset2, tether ? Math.max(max, tetherMax) : max);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    const mainSide = mainAxis === "x" ? top : left;
    const altSide = mainAxis === "x" ? bottom : right;
    const offset2 = popperOffsets2[altAxis];
    const min = offset2 + overflow[mainSide];
    const max = offset2 - overflow[altSide];
    const preventedOffset = within(min, offset2, max);
    popperOffsets2[altAxis] = preventedOffset;
    data[altAxis] = preventedOffset - offset2;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default;
var init_preventOverflow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/preventOverflow.js"() {
    init_enums();
    init_getBasePlacement();
    init_getMainAxisFromPlacement();
    init_getAltAxis();
    init_within();
    init_getLayoutRect();
    init_getOffsetParent();
    init_detectOverflow();
    init_getVariation();
    init_getFreshSideObject();
    preventOverflow_default = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/arrow.js
function arrow({ state, name }) {
  const arrowElement = state.elements.arrow;
  const popperOffsets2 = state.modifiersData.popperOffsets;
  const basePlacement = getBasePlacement(state.placement);
  const axis = getMainAxisFromPlacement(basePlacement);
  const isVertical = [left, right].indexOf(basePlacement) >= 0;
  const len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  const paddingObject = state.modifiersData[`${name}#persistent`].padding;
  const arrowRect = getLayoutRect(arrowElement);
  const minProp = axis === "y" ? top : left;
  const maxProp = axis === "y" ? bottom : right;
  const endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  const startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  const arrowOffsetParent = getOffsetParent(arrowElement);
  const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  const centerToReference = endDiff / 2 - startDiff / 2;
  const min = paddingObject[minProp];
  const max = clientSize - arrowRect[len] - paddingObject[maxProp];
  const center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  const offset2 = within(min, center, max);
  const axisProp = axis;
  state.modifiersData[name] = {
    [axisProp]: offset2,
    centerOffset: offset2 - center
  };
}
function effect3({ state, options, name }) {
  let { element: arrowElement = "[data-popper-arrow]", padding = 0 } = options;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (false) {
    if (!isHTMLElement(arrowElement)) {
      console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        "To use an SVG arrow, wrap it in an HTMLElement that will be used as",
        "the arrow."
      ].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (false) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
  state.modifiersData[`${name}#persistent`] = {
    padding: mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements))
  };
}
var arrow_default;
var init_arrow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/arrow.js"() {
    init_getBasePlacement();
    init_getLayoutRect();
    init_contains();
    init_getOffsetParent();
    init_getMainAxisFromPlacement();
    init_within();
    init_mergePaddingObject();
    init_expandToHashMap();
    init_enums();
    arrow_default = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect: effect3,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets = { x: 0, y: 0 }) {
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some((side) => overflow[side] >= 0);
}
function hide({ state, name }) {
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;
  const preventedOffsets = state.modifiersData.preventOverflow;
  const referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  const popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-reference-hidden": isReferenceHidden, "data-popper-escaped": hasPopperEscaped });
}
var hide_default;
var init_hide = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/hide.js"() {
    init_enums();
    init_detectOverflow();
    hide_default = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/popper.js
var defaultModifiers, createPopper2;
var init_popper = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/popper.js"() {
    init_popper_core();
    init_eventListeners();
    init_popperOffsets();
    init_computeStyles();
    init_applyStyles();
    init_offset();
    init_flip();
    init_preventOverflow();
    init_arrow();
    init_hide();
    init_types();
    defaultModifiers = [
      eventListeners_default,
      popperOffsets_default,
      computeStyles_default,
      applyStyles_default,
      offset_default,
      flip_default,
      preventOverflow_default,
      arrow_default,
      hide_default
    ];
    createPopper2 = popperGenerator({ defaultModifiers });
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/useIsomorphicLayout.js
var React4, useIsomorphicLayoutEffect;
var init_useIsomorphicLayout = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/useIsomorphicLayout.js"() {
    React4 = __toESM(require_react());
    init_util();
    useIsomorphicLayoutEffect = canUseDOM ? React4.useLayoutEffect : React4.useEffect;
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
var React5, isEqual, fromEntries, EMPTY_MODIFIERS, usePopper;
var init_usePopper = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js"() {
    React5 = __toESM(require_react());
    init_popper();
    init_useIsomorphicLayout();
    isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);
    fromEntries = (entries) => entries.reduce((acc, [key, value]) => {
      acc[key] = value;
      return acc;
    }, {});
    EMPTY_MODIFIERS = [];
    usePopper = (referenceElement, popperElement, options = {}) => {
      const prevOptions = React5.useRef(null);
      const optionsWithDefaults = {
        onFirstUpdate: options.onFirstUpdate,
        placement: options.placement || "bottom",
        strategy: options.strategy || "absolute",
        modifiers: options.modifiers || EMPTY_MODIFIERS
      };
      const [state, setState] = React5.useState({
        styles: {
          popper: {
            position: optionsWithDefaults.strategy,
            left: "0",
            top: "0"
          }
        },
        attributes: {}
      });
      const updateStateModifier = React5.useMemo(() => ({
        name: "updateState",
        enabled: true,
        phase: "write",
        // eslint-disable-next-line no-shadow
        fn: ({ state: state2 }) => {
          const elements = Object.keys(state2.elements);
          setState({
            styles: fromEntries(elements.map((element) => [element, state2.styles[element] || {}])),
            attributes: fromEntries(elements.map((element) => [element, state2.attributes[element]]))
          });
        },
        requires: ["computeStyles"]
      }), []);
      const popperOptions = React5.useMemo(() => {
        const newOptions = {
          onFirstUpdate: optionsWithDefaults.onFirstUpdate,
          placement: optionsWithDefaults.placement,
          strategy: optionsWithDefaults.strategy,
          modifiers: [...optionsWithDefaults.modifiers, updateStateModifier, { name: "applyStyles", enabled: false }]
        };
        if (isEqual(prevOptions.current, newOptions)) {
          return prevOptions.current || newOptions;
        } else {
          prevOptions.current = newOptions;
          return newOptions;
        }
      }, [
        optionsWithDefaults.onFirstUpdate,
        optionsWithDefaults.placement,
        optionsWithDefaults.strategy,
        optionsWithDefaults.modifiers,
        updateStateModifier
      ]);
      const popperInstanceRef = React5.useRef();
      useIsomorphicLayoutEffect(() => {
        if (popperInstanceRef && popperInstanceRef.current) {
          popperInstanceRef.current.setOptions(popperOptions);
        }
      }, [popperOptions]);
      useIsomorphicLayoutEffect(() => {
        if (referenceElement == null || popperElement == null) {
          return;
        }
        const createPopper3 = options.createPopper || createPopper2;
        const popperInstance = createPopper3(referenceElement, popperElement, popperOptions);
        popperInstanceRef.current = popperInstance;
        return () => {
          popperInstance.destroy();
          popperInstanceRef.current = null;
        };
      }, [referenceElement, popperElement, options.createPopper]);
      return {
        state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
        styles: state.styles,
        attributes: state.attributes,
        update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
        forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
      };
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Popper/Popper.css
var init_Popper = __esm({
  "node_modules/@patternfly/react-styles/css/components/Popper/Popper.css"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
var React6, ReactDOM2, hash3, getOppositePlacement2, getOpacityTransition, Popper;
var init_Popper2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js"() {
    React6 = __toESM(require_react());
    ReactDOM2 = __toESM(require_react_dom());
    init_usePopper();
    init_util();
    init_esm();
    init_Popper();
    init_util();
    hash3 = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom",
      "top-start": "bottom-end",
      "top-end": "bottom-start",
      "bottom-start": "top-end",
      "bottom-end": "top-start",
      "left-start": "right-end",
      "left-end": "right-start",
      "right-start": "left-end",
      "right-end": "left-start"
    };
    getOppositePlacement2 = (placement) => placement.replace(/left|right|bottom|top|top-start|top-end|bottom-start|bottom-end|right-start|right-end|left-start|left-end/g, (matched) => hash3[matched]);
    getOpacityTransition = (animationDuration) => `opacity ${animationDuration}ms cubic-bezier(.54, 1.5, .38, 1.11)`;
    Popper = ({ trigger, popper: popper2, direction = "down", position = "start", placement, width, minWidth = "trigger", maxWidth, appendTo = "inline", zIndex = 9999, isVisible = true, positionModifiers, distance = 0, onMouseEnter, onMouseLeave, onFocus, onBlur, onDocumentClick, onTriggerClick, onTriggerEnter, onPopperClick, onPopperMouseEnter, onPopperMouseLeave, onDocumentKeyDown, enableFlip = true, flipBehavior = "flip", triggerRef, popperRef, animationDuration = 0, entryDelay = 0, exitDelay = 0, onHidden = () => {
    }, onHide = () => {
    }, onMount = () => {
    }, onShow = () => {
    }, onShown = () => {
    }, preventOverflow: preventOverflow2 = false }) => {
      var _a;
      const [triggerElement, setTriggerElement] = React6.useState(null);
      const [refElement, setRefElement] = React6.useState(null);
      const [popperElement, setPopperElement] = React6.useState(null);
      const [popperContent, setPopperContent] = React6.useState(null);
      const [ready, setReady] = React6.useState(false);
      const [opacity, setOpacity] = React6.useState(0);
      const [internalIsVisible, setInternalIsVisible] = React6.useState(isVisible);
      const transitionTimerRef = React6.useRef(null);
      const showTimerRef = React6.useRef(null);
      const hideTimerRef = React6.useRef(null);
      const prevExitDelayRef = React6.useRef();
      const refOrTrigger = refElement || triggerElement;
      const showPopper = isVisible || internalIsVisible;
      const triggerParent = (_a = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || triggerElement) === null || _a === void 0 ? void 0 : _a.parentElement;
      const languageDirection = getLanguageDirection(triggerParent);
      const internalPosition = React6.useMemo(() => {
        const fixedPositions = { left: "left", right: "right", center: "center" };
        const positionMap = {
          ltr: Object.assign({ start: "left", end: "right" }, fixedPositions),
          rtl: Object.assign({ start: "right", end: "left" }, fixedPositions)
        };
        return positionMap[languageDirection][position];
      }, [position, languageDirection]);
      const onDocumentClickCallback = React6.useCallback((event) => onDocumentClick(event, refOrTrigger, popperElement), [showPopper, triggerElement, refElement, popperElement, onDocumentClick]);
      React6.useEffect(() => {
        setReady(true);
        onMount();
      }, []);
      React6.useEffect(() => () => {
        clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);
      }, []);
      React6.useEffect(() => {
        if (triggerRef) {
          if (triggerRef.current) {
            setRefElement(triggerRef.current);
          } else if (typeof triggerRef === "function") {
            setRefElement(triggerRef());
          }
        }
      }, [triggerRef, trigger]);
      React6.useEffect(() => {
        if (popperRef) {
          if (popperRef.current) {
            setPopperElement(popperRef.current);
          } else if (typeof popperRef === "function") {
            setPopperElement(popperRef());
          }
        }
      }, [showPopper, popperRef]);
      React6.useEffect(() => {
        const observer = new MutationObserver(() => {
          update && update();
        });
        popperElement && observer.observe(popperElement, { attributes: true, childList: true, subtree: true });
        return () => {
          observer.disconnect();
        };
      }, [popperElement]);
      const addEventListener = (listener, element, event, capture = false) => {
        if (listener && element) {
          element.addEventListener(event, listener, { capture });
        }
      };
      const removeEventListener = (listener, element, event, capture = false) => {
        if (listener && element) {
          element.removeEventListener(event, listener, { capture });
        }
      };
      React6.useEffect(() => {
        addEventListener(onMouseEnter, refOrTrigger, "mouseenter");
        addEventListener(onMouseLeave, refOrTrigger, "mouseleave");
        addEventListener(onFocus, refOrTrigger, "focus");
        addEventListener(onBlur, refOrTrigger, "blur");
        addEventListener(onTriggerClick, refOrTrigger, "click");
        addEventListener(onTriggerEnter, refOrTrigger, "keydown");
        addEventListener(onPopperClick, popperElement, "click");
        addEventListener(onPopperMouseEnter, popperElement, "mouseenter");
        addEventListener(onPopperMouseLeave, popperElement, "mouseleave");
        onDocumentClick && addEventListener(onDocumentClickCallback, document, "click", true);
        addEventListener(onDocumentKeyDown, document, "keydown", true);
        return () => {
          removeEventListener(onMouseEnter, refOrTrigger, "mouseenter");
          removeEventListener(onMouseLeave, refOrTrigger, "mouseleave");
          removeEventListener(onFocus, refOrTrigger, "focus");
          removeEventListener(onBlur, refOrTrigger, "blur");
          removeEventListener(onTriggerClick, refOrTrigger, "click");
          removeEventListener(onTriggerEnter, refOrTrigger, "keydown");
          removeEventListener(onPopperClick, popperElement, "click");
          removeEventListener(onPopperMouseEnter, popperElement, "mouseenter");
          removeEventListener(onPopperMouseLeave, popperElement, "mouseleave");
          onDocumentClick && removeEventListener(onDocumentClickCallback, document, "click", true);
          removeEventListener(onDocumentKeyDown, document, "keydown", true);
        };
      }, [
        triggerElement,
        popperElement,
        onMouseEnter,
        onMouseLeave,
        onFocus,
        onBlur,
        onTriggerClick,
        onTriggerEnter,
        onPopperClick,
        onPopperMouseEnter,
        onPopperMouseLeave,
        onDocumentClick,
        onDocumentKeyDown,
        refElement
      ]);
      const getPlacement = () => {
        if (placement) {
          return placement;
        }
        let convertedPlacement = direction === "up" ? "top" : "bottom";
        if (internalPosition !== "center") {
          convertedPlacement = `${convertedPlacement}-${internalPosition === "right" ? "end" : "start"}`;
        }
        return convertedPlacement;
      };
      const getPlacementMemo = React6.useMemo(getPlacement, [direction, internalPosition, placement]);
      const getOppositePlacementMemo = React6.useMemo(() => getOppositePlacement2(getPlacement()), [direction, internalPosition, placement]);
      const widthMods = React6.useMemo(() => ({
        name: "widthMods",
        enabled: width !== void 0 || minWidth !== void 0 || maxWidth !== void 0,
        phase: "beforeWrite",
        requires: ["computeStyles"],
        fn: ({ state }) => {
          const triggerWidth = state.rects.reference.width;
          if (width) {
            state.styles.popper.width = width === "trigger" ? `${triggerWidth}px` : width;
          }
          if (minWidth) {
            state.styles.popper.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
          }
          if (maxWidth) {
            state.styles.popper.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
          }
        },
        effect: ({ state }) => {
          const triggerWidth = state.elements.reference.offsetWidth;
          if (width) {
            state.elements.popper.style.width = width === "trigger" ? `${triggerWidth}px` : width;
          }
          if (minWidth) {
            state.elements.popper.style.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
          }
          if (maxWidth) {
            state.elements.popper.style.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
          }
          return () => {
          };
        }
      }), [width, minWidth, maxWidth]);
      const { styles: popperStyles, attributes, update, forceUpdate } = usePopper(refOrTrigger, popperElement, {
        placement: getPlacementMemo,
        modifiers: [
          {
            name: "offset",
            options: {
              offset: [0, distance]
            }
          },
          {
            name: "preventOverflow",
            enabled: preventOverflow2
          },
          {
            // adds attribute [data-popper-reference-hidden] to the popper element which can be used to hide it using CSS
            name: "hide",
            enabled: true
          },
          {
            name: "flip",
            enabled: getPlacementMemo.startsWith("auto") || enableFlip,
            options: {
              fallbackPlacements: flipBehavior === "flip" ? [getOppositePlacementMemo] : flipBehavior
            }
          },
          widthMods
        ]
      });
      React6.useEffect(() => {
        var _a2, _b, _c, _d, _e, _f, _g;
        const currentPopperContent = ((_d = (_c = (_b = (_a2 = popper2 === null || popper2 === void 0 ? void 0 : popper2.props) === null || _a2 === void 0 ? void 0 : _a2.children) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c.props) === null || _d === void 0 ? void 0 : _d.children) || ((_g = (_f = (_e = popper2 === null || popper2 === void 0 ? void 0 : popper2.props) === null || _e === void 0 ? void 0 : _e.children) === null || _f === void 0 ? void 0 : _f.props) === null || _g === void 0 ? void 0 : _g.children);
        setPopperContent(currentPopperContent);
        if (currentPopperContent && popperContent && currentPopperContent !== popperContent) {
          forceUpdate && forceUpdate();
        }
      }, [popper2]);
      React6.useEffect(() => {
        if (prevExitDelayRef.current < exitDelay) {
          clearTimeouts([transitionTimerRef, hideTimerRef]);
          hideTimerRef.current = setTimeout(() => {
            transitionTimerRef.current = setTimeout(() => {
              setInternalIsVisible(false);
            }, animationDuration);
          }, exitDelay);
        }
        prevExitDelayRef.current = exitDelay;
      }, [exitDelay]);
      const show = () => {
        onShow();
        clearTimeouts([transitionTimerRef, hideTimerRef]);
        showTimerRef.current = setTimeout(() => {
          setInternalIsVisible(true);
          setOpacity(1);
          onShown();
        }, entryDelay);
      };
      const hide2 = () => {
        onHide();
        clearTimeouts([showTimerRef]);
        hideTimerRef.current = setTimeout(() => {
          setOpacity(0);
          transitionTimerRef.current = setTimeout(() => {
            setInternalIsVisible(false);
            onHidden();
          }, animationDuration);
        }, exitDelay);
      };
      React6.useEffect(() => {
        if (isVisible) {
          show();
        } else {
          hide2();
        }
      }, [isVisible]);
      const modifierFromPopperPosition = () => {
        if (attributes && attributes.popper && attributes.popper["data-popper-placement"]) {
          const popperPlacement = attributes.popper["data-popper-placement"];
          return positionModifiers[popperPlacement];
        }
        return positionModifiers.top;
      };
      const options = Object.assign({ className: css(popper2.props && popper2.props.className, positionModifiers && modifierFromPopperPosition()), style: Object.assign(Object.assign(Object.assign({}, popper2.props && popper2.props.style || {}), popperStyles.popper), {
        zIndex,
        opacity,
        transition: getOpacityTransition(animationDuration)
      }) }, attributes.popper);
      const getMenuWithPopper = () => {
        const localPopper = React6.cloneElement(popper2, options);
        return popperRef ? localPopper : React6.createElement("div", { style: { display: "contents" }, ref: (node) => setPopperElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, localPopper);
      };
      const getPopper = () => {
        if (appendTo === "inline") {
          return getMenuWithPopper();
        } else {
          const target = typeof appendTo === "function" ? appendTo() : appendTo;
          return ReactDOM2.createPortal(getMenuWithPopper(), target);
        }
      };
      return React6.createElement(
        React6.Fragment,
        null,
        !triggerRef && trigger && React6.isValidElement(trigger) && React6.createElement("div", { style: { display: "contents" }, ref: (node) => setTriggerElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, trigger),
        triggerRef && trigger && React6.isValidElement(trigger) && trigger,
        ready && showPopper && getPopper()
      );
    };
    Popper.displayName = "Popper";
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js
var React7, handleArrows, KeyboardHandler;
var init_KeyboardHandler = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js"() {
    React7 = __toESM(require_react());
    init_util();
    handleArrows = (event, navigableElements, isActiveElement = (element) => document.activeElement.contains(element), getFocusableElement = (element) => element, validSiblingTags = ["A", "BUTTON", "INPUT"], noVerticalArrowHandling = false, noHorizontalArrowHandling = false, updateTabIndex = true, onlyTraverseSiblings = true) => {
      const activeElement = document.activeElement;
      const key = event.key;
      let moveTarget = null;
      if (!noVerticalArrowHandling) {
        if (["ArrowUp", "ArrowDown"].includes(key)) {
          event.preventDefault();
          event.stopImmediatePropagation();
          let currentIndex = -1;
          navigableElements.forEach((element, index) => {
            if (isActiveElement(element)) {
              let increment = 0;
              while (!moveTarget && increment < navigableElements.length && increment * -1 < navigableElements.length) {
                key === "ArrowUp" ? increment-- : increment++;
                currentIndex = index + increment;
                if (currentIndex >= navigableElements.length) {
                  currentIndex = 0;
                }
                if (currentIndex < 0) {
                  currentIndex = navigableElements.length - 1;
                }
                moveTarget = getFocusableElement(navigableElements[currentIndex]);
              }
            }
          });
        }
      }
      if (!noHorizontalArrowHandling) {
        if (["ArrowLeft", "ArrowRight"].includes(key)) {
          event.preventDefault();
          event.stopImmediatePropagation();
          let currentIndex = -1;
          navigableElements.forEach((element, index) => {
            if (isActiveElement(element)) {
              const activeRow = navigableElements[index].querySelectorAll(validSiblingTags.join(","));
              if (!activeRow.length || onlyTraverseSiblings) {
                let nextSibling = activeElement;
                while (nextSibling) {
                  nextSibling = key === "ArrowLeft" ? nextSibling.previousElementSibling : nextSibling.nextElementSibling;
                  if (nextSibling) {
                    if (validSiblingTags.includes(nextSibling.tagName)) {
                      moveTarget = nextSibling;
                      break;
                    }
                  }
                }
              } else {
                activeRow.forEach((focusableElement, index2) => {
                  if (event.target === focusableElement) {
                    const increment = key === "ArrowLeft" ? -1 : 1;
                    currentIndex = index2 + increment;
                    if (currentIndex >= activeRow.length) {
                      currentIndex = 0;
                    }
                    if (currentIndex < 0) {
                      currentIndex = activeRow.length - 1;
                    }
                    moveTarget = activeRow[currentIndex];
                  }
                });
              }
            }
          });
        }
      }
      if (moveTarget) {
        if (updateTabIndex) {
          activeElement.tabIndex = -1;
          moveTarget.tabIndex = 0;
        }
        moveTarget.focus();
      }
    };
    KeyboardHandler = class extends React7.Component {
      constructor() {
        super(...arguments);
        this.keyHandler = (event) => {
          const { isEventFromContainer } = this.props;
          if (isEventFromContainer ? !isEventFromContainer(event) : !this._isEventFromContainer(event)) {
            return;
          }
          const { isActiveElement, getFocusableElement, noVerticalArrowHandling, noHorizontalArrowHandling, noEnterHandling, noSpaceHandling, updateTabIndex, validSiblingTags, additionalKeyHandler, createNavigableElements, onlyTraverseSiblings } = this.props;
          additionalKeyHandler && additionalKeyHandler(event);
          const navigableElements = createNavigableElements();
          if (!navigableElements) {
            console.warn("No navigable elements have been passed to the KeyboardHandler. Keyboard navigation provided by this component will be ignored.");
            return;
          }
          const key = event.key;
          if (!noEnterHandling) {
            if (key === "Enter") {
              event.preventDefault();
              event.stopImmediatePropagation();
              document.activeElement.click();
            }
          }
          if (!noSpaceHandling) {
            if (key === " ") {
              event.preventDefault();
              event.stopImmediatePropagation();
              document.activeElement.click();
            }
          }
          handleArrows(event, navigableElements, isActiveElement, getFocusableElement, validSiblingTags, noVerticalArrowHandling, noHorizontalArrowHandling, updateTabIndex, onlyTraverseSiblings);
        };
        this._isEventFromContainer = (event) => {
          const { containerRef } = this.props;
          return containerRef.current && containerRef.current.contains(event.target);
        };
      }
      componentDidMount() {
        if (canUseDOM) {
          window.addEventListener("keydown", this.keyHandler);
        }
      }
      componentWillUnmount() {
        if (canUseDOM) {
          window.removeEventListener("keydown", this.keyHandler);
        }
      }
      render() {
        return null;
      }
    };
    KeyboardHandler.displayName = "KeyboardHandler";
    KeyboardHandler.defaultProps = {
      containerRef: null,
      createNavigableElements: () => null,
      isActiveElement: (navigableElement) => document.activeElement === navigableElement,
      getFocusableElement: (navigableElement) => navigableElement,
      validSiblingTags: ["BUTTON", "A"],
      onlyTraverseSiblings: true,
      updateTabIndex: true,
      noHorizontalArrowHandling: false,
      noVerticalArrowHandling: false,
      noEnterHandling: false,
      noSpaceHandling: false
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/resizeObserver.js
var getResizeObserver;
var init_resizeObserver = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/resizeObserver.js"() {
    init_util();
    getResizeObserver = (containerRefElement, handleResize, useRequestAnimationFrame) => {
      let unobserve;
      if (canUseDOM) {
        const { ResizeObserver } = window;
        if (containerRefElement && ResizeObserver) {
          const resizeObserver = new ResizeObserver((entries) => {
            if (useRequestAnimationFrame) {
              window.requestAnimationFrame(() => {
                if (Array.isArray(entries) && entries.length > 0) {
                  handleResize();
                }
              });
            } else {
              if (Array.isArray(entries) && entries.length > 0) {
                handleResize();
              }
            }
          });
          resizeObserver.observe(containerRefElement);
          unobserve = () => resizeObserver.unobserve(containerRefElement);
        } else {
          window.addEventListener("resize", handleResize);
          unobserve = () => window.removeEventListener("resize", handleResize);
        }
      }
      return () => {
        if (unobserve) {
          unobserve();
        }
      };
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/useInterval.js
var React8;
var init_useInterval = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/useInterval.js"() {
    React8 = __toESM(require_react());
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/datetimeUtils.js
var isValidDate;
var init_datetimeUtils = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/datetimeUtils.js"() {
    isValidDate = (date) => Boolean(date && !isNaN(date));
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/index.js
var init_helpers = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/index.js"() {
    init_constants();
    init_FocusTrap();
    init_GenerateId();
    init_htmlConstants();
    init_typeUtils();
    init_ouia();
    init_util();
    init_Popper2();
    init_useIsomorphicLayout();
    init_KeyboardHandler();
    init_resizeObserver();
    init_useInterval();
    init_datetimeUtils();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
var React9, TitleSizes, headingLevelSizeMap, Title;
var init_Title = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js"() {
    init_tslib_es6();
    React9 = __toESM(require_react());
    init_esm();
    init_title2();
    init_helpers();
    (function(TitleSizes2) {
      TitleSizes2["md"] = "md";
      TitleSizes2["lg"] = "lg";
      TitleSizes2["xl"] = "xl";
      TitleSizes2["2xl"] = "2xl";
      TitleSizes2["3xl"] = "3xl";
      TitleSizes2["4xl"] = "4xl";
    })(TitleSizes || (TitleSizes = {}));
    (function(headingLevelSizeMap2) {
      headingLevelSizeMap2["h1"] = "2xl";
      headingLevelSizeMap2["h2"] = "xl";
      headingLevelSizeMap2["h3"] = "lg";
      headingLevelSizeMap2["h4"] = "md";
      headingLevelSizeMap2["h5"] = "md";
      headingLevelSizeMap2["h6"] = "md";
    })(headingLevelSizeMap || (headingLevelSizeMap = {}));
    Title = (_a) => {
      var { className = "", children = "", headingLevel: HeadingLevel, size = headingLevelSizeMap[HeadingLevel], ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["className", "children", "headingLevel", "size", "ouiaId", "ouiaSafe"]);
      const ouiaProps = useOUIAProps(Title.displayName, ouiaId, ouiaSafe);
      return React9.createElement(HeadingLevel, Object.assign({}, ouiaProps, props, { className: css(title_default.title, size && title_default.modifiers[size], className) }), children);
    };
    Title.displayName = "Title";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Title/index.js
var init_Title2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Title/index.js"() {
    init_Title();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxHeader.js
var React10, AboutModalBoxHeader;
var init_AboutModalBoxHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxHeader.js"() {
    init_tslib_es6();
    React10 = __toESM(require_react());
    init_esm();
    init_about_modal_box2();
    init_Title2();
    AboutModalBoxHeader = (_a) => {
      var { productName, id } = _a, props = __rest(_a, ["productName", "id"]);
      return React10.createElement(
        "div",
        Object.assign({ className: css(about_modal_box_default.aboutModalBoxHeader) }, props),
        React10.createElement(Title, { headingLevel: "h1", size: "4xl", id }, productName)
      );
    };
    AboutModalBoxHeader.displayName = "AboutModalBoxHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxBrand.js
var React11, AboutModalBoxBrand;
var init_AboutModalBoxBrand = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxBrand.js"() {
    init_tslib_es6();
    React11 = __toESM(require_react());
    init_esm();
    init_about_modal_box2();
    AboutModalBoxBrand = (_a) => {
      var { src, alt } = _a, props = __rest(_a, ["src", "alt"]);
      return React11.createElement(
        "div",
        Object.assign({ className: css(about_modal_box_default.aboutModalBoxBrand) }, props),
        React11.createElement("img", { className: css(about_modal_box_default.aboutModalBoxBrandImage), src, alt })
      );
    };
    AboutModalBoxBrand.displayName = "AboutModalBoxBrand";
  }
});

// node_modules/@patternfly/react-styles/css/components/Button/button.css
var init_button = __esm({
  "node_modules/@patternfly/react-styles/css/components/Button/button.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Button/button.mjs
var button_default;
var init_button2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Button/button.mjs"() {
    init_button();
    button_default = {
      "badge": "pf-v5-c-badge",
      "button": "pf-v5-c-button",
      "buttonCount": "pf-v5-c-button__count",
      "buttonIcon": "pf-v5-c-button__icon",
      "buttonProgress": "pf-v5-c-button__progress",
      "modifiers": {
        "active": "pf-m-active",
        "block": "pf-m-block",
        "small": "pf-m-small",
        "primary": "pf-m-primary",
        "displayLg": "pf-m-display-lg",
        "secondary": "pf-m-secondary",
        "tertiary": "pf-m-tertiary",
        "link": "pf-m-link",
        "unread": "pf-m-unread",
        "inline": "pf-m-inline",
        "danger": "pf-m-danger",
        "warning": "pf-m-warning",
        "control": "pf-m-control",
        "expanded": "pf-m-expanded",
        "plain": "pf-m-plain",
        "noPadding": "pf-m-no-padding",
        "disabled": "pf-m-disabled",
        "ariaDisabled": "pf-m-aria-disabled",
        "progress": "pf-m-progress",
        "inProgress": "pf-m-in-progress",
        "start": "pf-m-start",
        "end": "pf-m-end"
      },
      "spinner": "pf-v5-c-spinner",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Spinner/spinner.css
var init_spinner = __esm({
  "node_modules/@patternfly/react-styles/css/components/Spinner/spinner.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Spinner/spinner.mjs
var spinner_default;
var init_spinner2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Spinner/spinner.mjs"() {
    init_spinner();
    spinner_default = {
      "modifiers": {
        "inline": "pf-m-inline",
        "sm": "pf-m-sm",
        "md": "pf-m-md",
        "lg": "pf-m-lg",
        "xl": "pf-m-xl"
      },
      "spinner": "pf-v5-c-spinner",
      "spinnerPath": "pf-v5-c-spinner__path"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_spinner_diameter.js
var c_spinner_diameter, c_spinner_diameter_default;
var init_c_spinner_diameter = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_spinner_diameter.js"() {
    c_spinner_diameter = {
      "name": "--pf-v5-c-spinner--diameter",
      "value": "0.875rem",
      "var": "var(--pf-v5-c-spinner--diameter)"
    };
    c_spinner_diameter_default = c_spinner_diameter;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
var React12, spinnerSize, Spinner;
var init_Spinner = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js"() {
    init_tslib_es6();
    React12 = __toESM(require_react());
    init_spinner2();
    init_esm();
    init_c_spinner_diameter();
    (function(spinnerSize2) {
      spinnerSize2["sm"] = "sm";
      spinnerSize2["md"] = "md";
      spinnerSize2["lg"] = "lg";
      spinnerSize2["xl"] = "xl";
    })(spinnerSize || (spinnerSize = {}));
    Spinner = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        size = "xl",
        "aria-valuetext": ariaValueText = "Loading...",
        diameter,
        isInline = false,
        "aria-label": ariaLabel,
        "aria-labelledBy": ariaLabelledBy
      } = _a, props = __rest(_a, ["className", "size", "aria-valuetext", "diameter", "isInline", "aria-label", "aria-labelledBy"]);
      return React12.createElement(
        "svg",
        Object.assign({ className: css(spinner_default.spinner, isInline ? spinner_default.modifiers.inline : spinner_default.modifiers[size], className), role: "progressbar", "aria-valuetext": ariaValueText, viewBox: "0 0 100 100" }, diameter && { style: { [c_spinner_diameter_default.name]: diameter } }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledBy && { "aria-labelledBy": ariaLabelledBy }, !ariaLabel && !ariaLabelledBy && { "aria-label": "Contents" }, props),
        React12.createElement("circle", { className: spinner_default.spinnerPath, cx: "50", cy: "50", r: "45", fill: "none" })
      );
    };
    Spinner.displayName = "Spinner";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Spinner/index.js
var init_Spinner2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Spinner/index.js"() {
    init_Spinner();
  }
});

// node_modules/@patternfly/react-styles/css/components/Badge/badge.css
var init_badge = __esm({
  "node_modules/@patternfly/react-styles/css/components/Badge/badge.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Badge/badge.mjs
var badge_default;
var init_badge2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Badge/badge.mjs"() {
    init_badge();
    badge_default = {
      "badge": "pf-v5-c-badge",
      "modifiers": {
        "read": "pf-m-read",
        "unread": "pf-m-unread"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
var React13, Badge;
var init_Badge = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js"() {
    init_tslib_es6();
    React13 = __toESM(require_react());
    init_esm();
    init_badge2();
    Badge = (_a) => {
      var { isRead = false, className = "", children = "", screenReaderText } = _a, props = __rest(_a, ["isRead", "className", "children", "screenReaderText"]);
      return React13.createElement(
        "span",
        Object.assign({}, props, { className: css(badge_default.badge, isRead ? badge_default.modifiers.read : badge_default.modifiers.unread, className) }),
        children,
        screenReaderText && React13.createElement("span", { className: "pf-v5-screen-reader" }, screenReaderText)
      );
    };
    Badge.displayName = "Badge";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Badge/index.js
var init_Badge2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Badge/index.js"() {
    init_Badge();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
var React14, ButtonVariant, ButtonType, ButtonSize, ButtonBase, Button;
var init_Button = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js"() {
    init_tslib_es6();
    React14 = __toESM(require_react());
    init_button2();
    init_esm();
    init_Spinner2();
    init_ouia();
    init_Badge2();
    (function(ButtonVariant2) {
      ButtonVariant2["primary"] = "primary";
      ButtonVariant2["secondary"] = "secondary";
      ButtonVariant2["tertiary"] = "tertiary";
      ButtonVariant2["danger"] = "danger";
      ButtonVariant2["warning"] = "warning";
      ButtonVariant2["link"] = "link";
      ButtonVariant2["plain"] = "plain";
      ButtonVariant2["control"] = "control";
    })(ButtonVariant || (ButtonVariant = {}));
    (function(ButtonType2) {
      ButtonType2["button"] = "button";
      ButtonType2["submit"] = "submit";
      ButtonType2["reset"] = "reset";
    })(ButtonType || (ButtonType = {}));
    (function(ButtonSize2) {
      ButtonSize2["default"] = "default";
      ButtonSize2["sm"] = "sm";
      ButtonSize2["lg"] = "lg";
    })(ButtonSize || (ButtonSize = {}));
    ButtonBase = (_a) => {
      var { children = null, className = "", component = "button", isActive = false, isBlock = false, isDisabled = false, isAriaDisabled = false, isLoading = null, isDanger = false, spinnerAriaValueText, spinnerAriaLabelledBy, spinnerAriaLabel, size = ButtonSize.default, inoperableEvents = ["onClick", "onKeyPress"], isInline = false, type = ButtonType.button, variant = ButtonVariant.primary, iconPosition = "start", "aria-label": ariaLabel = null, icon = null, ouiaId, ouiaSafe = true, tabIndex = null, innerRef, countOptions } = _a, props = __rest(_a, ["children", "className", "component", "isActive", "isBlock", "isDisabled", "isAriaDisabled", "isLoading", "isDanger", "spinnerAriaValueText", "spinnerAriaLabelledBy", "spinnerAriaLabel", "size", "inoperableEvents", "isInline", "type", "variant", "iconPosition", "aria-label", "icon", "ouiaId", "ouiaSafe", "tabIndex", "innerRef", "countOptions"]);
      const ouiaProps = useOUIAProps(Button.displayName, ouiaId, ouiaSafe, variant);
      const Component44 = component;
      const isButtonElement = Component44 === "button";
      const isInlineSpan = isInline && Component44 === "span";
      const preventedEvents = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
        event.preventDefault();
      } }), {});
      const getDefaultTabIdx = () => {
        if (isDisabled) {
          return isButtonElement ? null : -1;
        } else if (isAriaDisabled) {
          return null;
        } else if (isInlineSpan) {
          return 0;
        }
      };
      return React14.createElement(
        Component44,
        Object.assign({}, props, isAriaDisabled ? preventedEvents : null, { "aria-disabled": isDisabled || isAriaDisabled, "aria-label": ariaLabel, className: css(button_default.button, button_default.modifiers[variant], isBlock && button_default.modifiers.block, isDisabled && button_default.modifiers.disabled, isAriaDisabled && button_default.modifiers.ariaDisabled, isActive && button_default.modifiers.active, isInline && variant === ButtonVariant.link && button_default.modifiers.inline, isDanger && (variant === ButtonVariant.secondary || variant === ButtonVariant.link) && button_default.modifiers.danger, isLoading !== null && variant !== ButtonVariant.plain && button_default.modifiers.progress, isLoading && button_default.modifiers.inProgress, size === ButtonSize.sm && button_default.modifiers.small, size === ButtonSize.lg && button_default.modifiers.displayLg, className), disabled: isButtonElement ? isDisabled : null, tabIndex: tabIndex !== null ? tabIndex : getDefaultTabIdx(), type: isButtonElement || isInlineSpan ? type : null, role: isInlineSpan ? "button" : null, ref: innerRef }, ouiaProps),
        isLoading && React14.createElement(
          "span",
          { className: css(button_default.buttonProgress) },
          React14.createElement(Spinner, { size: spinnerSize.md, isInline, "aria-valuetext": spinnerAriaValueText, "aria-label": spinnerAriaLabel, "aria-labelledby": spinnerAriaLabelledBy })
        ),
        variant === ButtonVariant.plain && children === null && icon ? icon : null,
        variant !== ButtonVariant.plain && icon && (iconPosition === "start" || iconPosition === "left") && React14.createElement("span", { className: css(button_default.buttonIcon, button_default.modifiers.start) }, icon),
        children,
        variant !== ButtonVariant.plain && icon && (iconPosition === "end" || iconPosition === "right") && React14.createElement("span", { className: css(button_default.buttonIcon, button_default.modifiers.end) }, icon),
        countOptions && React14.createElement(
          "span",
          { className: css(button_default.buttonCount, countOptions.className) },
          React14.createElement(Badge, { isRead: countOptions.isRead }, countOptions.count)
        )
      );
    };
    Button = React14.forwardRef((props, ref) => React14.createElement(ButtonBase, Object.assign({ innerRef: ref }, props)));
    Button.displayName = "Button";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Button/index.js
var init_Button2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Button/index.js"() {
    init_Button();
  }
});

// node_modules/@patternfly/react-icons/dist/esm/createIcon.js
function createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {
  var _a;
  return _a = class SVGIcon extends React15.Component {
    constructor() {
      super(...arguments);
      this.id = `icon-title-${currentId2++}`;
    }
    render() {
      const _a2 = this.props, { title, className } = _a2, props = __rest(_a2, ["title", "className"]);
      const classes = className ? `pf-v5-svg ${className}` : "pf-v5-svg";
      const hasTitle = Boolean(title);
      const viewBox = [xOffset, yOffset, width, height].join(" ");
      return React15.createElement(
        "svg",
        Object.assign({ className: classes, viewBox, fill: "currentColor", "aria-labelledby": hasTitle ? this.id : null, "aria-hidden": hasTitle ? null : true, role: "img", width: "1em", height: "1em" }, props),
        hasTitle && React15.createElement("title", { id: this.id }, title),
        React15.createElement("path", { d: svgPath })
      );
    }
  }, _a.displayName = name, _a;
}
var React15, currentId2;
var init_createIcon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/createIcon.js"() {
    init_tslib_es6();
    React15 = __toESM(require_react());
    currentId2 = 0;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/times-icon.js
var TimesIconConfig, TimesIcon, times_icon_default;
var init_times_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/times-icon.js"() {
    init_createIcon();
    TimesIconConfig = {
      name: "TimesIcon",
      height: 512,
      width: 352,
      svgPath: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
      yOffset: 0,
      xOffset: 0
    };
    TimesIcon = createIcon(TimesIconConfig);
    times_icon_default = TimesIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxCloseButton.js
var React16, AboutModalBoxCloseButton;
var init_AboutModalBoxCloseButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxCloseButton.js"() {
    init_tslib_es6();
    React16 = __toESM(require_react());
    init_esm();
    init_about_modal_box2();
    init_Button2();
    init_times_icon();
    AboutModalBoxCloseButton = (_a) => {
      var { onClose = (_e) => void 0, "aria-label": ariaLabel = "Close Dialog" } = _a, props = __rest(_a, ["onClose", "aria-label"]);
      return React16.createElement(
        "div",
        Object.assign({ className: css(about_modal_box_default.aboutModalBoxClose) }, props),
        React16.createElement(
          Button,
          { variant: "plain", onClick: onClose, "aria-label": ariaLabel },
          React16.createElement(times_icon_default, null)
        )
      );
    };
    AboutModalBoxCloseButton.displayName = "AboutModalBoxCloseButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBox.js
var React17, AboutModalBox;
var init_AboutModalBox = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBox.js"() {
    init_tslib_es6();
    React17 = __toESM(require_react());
    init_esm();
    init_about_modal_box2();
    AboutModalBox = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React17.createElement("div", Object.assign({ className: css(about_modal_box_default.aboutModalBox, className) }, props), children);
    };
    AboutModalBox.displayName = "AboutModalBox";
  }
});

// node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.css
var init_backdrop = __esm({
  "node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.mjs
var backdrop_default;
var init_backdrop2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.mjs"() {
    init_backdrop();
    backdrop_default = {
      "backdrop": "pf-v5-c-backdrop",
      "backdropOpen": "pf-v5-c-backdrop__open"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.css
var init_modal_box = __esm({
  "node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.mjs
var modal_box_default;
var init_modal_box2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.mjs"() {
    init_modal_box();
    modal_box_default = {
      "button": "pf-v5-c-button",
      "modalBox": "pf-v5-c-modal-box",
      "modalBoxBody": "pf-v5-c-modal-box__body",
      "modalBoxClose": "pf-v5-c-modal-box__close",
      "modalBoxDescription": "pf-v5-c-modal-box__description",
      "modalBoxFooter": "pf-v5-c-modal-box__footer",
      "modalBoxHeader": "pf-v5-c-modal-box__header",
      "modalBoxHeaderMain": "pf-v5-c-modal-box__header-main",
      "modalBoxTitle": "pf-v5-c-modal-box__title",
      "modalBoxTitleIcon": "pf-v5-c-modal-box__title-icon",
      "modalBoxTitleText": "pf-v5-c-modal-box__title-text",
      "modifiers": {
        "sm": "pf-m-sm",
        "md": "pf-m-md",
        "lg": "pf-m-lg",
        "alignTop": "pf-m-align-top",
        "danger": "pf-m-danger",
        "warning": "pf-m-warning",
        "success": "pf-m-success",
        "custom": "pf-m-custom",
        "info": "pf-m-info",
        "help": "pf-m-help",
        "icon": "pf-m-icon"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.css
var init_bullseye = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.mjs
var bullseye_default;
var init_bullseye2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.mjs"() {
    init_bullseye();
    bullseye_default = {
      "bullseye": "pf-v5-l-bullseye"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Backdrop/Backdrop.js
var React18, Backdrop;
var init_Backdrop = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Backdrop/Backdrop.js"() {
    init_tslib_es6();
    React18 = __toESM(require_react());
    init_esm();
    init_backdrop2();
    Backdrop = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React18.createElement("div", Object.assign({}, props, { className: css(backdrop_default.backdrop, className) }), children);
    };
    Backdrop.displayName = "Backdrop";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxBody.js
var React19, ModalBoxBody;
var init_ModalBoxBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxBody.js"() {
    init_tslib_es6();
    React19 = __toESM(require_react());
    init_esm();
    init_modal_box2();
    ModalBoxBody = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React19.createElement("div", Object.assign({}, props, { className: css(modal_box_default.modalBoxBody, className) }), children);
    };
    ModalBoxBody.displayName = "ModalBoxBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxCloseButton.js
var React20, ModalBoxCloseButton;
var init_ModalBoxCloseButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxCloseButton.js"() {
    init_tslib_es6();
    React20 = __toESM(require_react());
    init_esm();
    init_modal_box2();
    init_Button2();
    init_times_icon();
    ModalBoxCloseButton = (_a) => {
      var { className, onClose = () => void 0, "aria-label": ariaLabel = "Close", ouiaId } = _a, props = __rest(_a, ["className", "onClose", "aria-label", "ouiaId"]);
      return React20.createElement(
        "div",
        { className: css(modal_box_default.modalBoxClose, className) },
        React20.createElement(
          Button,
          Object.assign({ variant: "plain", onClick: (event) => onClose(event), "aria-label": ariaLabel }, ouiaId && { ouiaId: `${ouiaId}-${ModalBoxCloseButton.displayName}` }, props),
          React20.createElement(times_icon_default, null)
        )
      );
    };
    ModalBoxCloseButton.displayName = "ModalBoxCloseButton";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_modal_box_m_align_top_spacer.js
var c_modal_box_m_align_top_spacer, c_modal_box_m_align_top_spacer_default;
var init_c_modal_box_m_align_top_spacer = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_modal_box_m_align_top_spacer.js"() {
    c_modal_box_m_align_top_spacer = {
      "name": "--pf-v5-c-modal-box--m-align-top--spacer",
      "value": "0.5rem",
      "var": "var(--pf-v5-c-modal-box--m-align-top--spacer)"
    };
    c_modal_box_m_align_top_spacer_default = c_modal_box_m_align_top_spacer;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBox.js
var React21, ModalBox;
var init_ModalBox = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBox.js"() {
    init_tslib_es6();
    React21 = __toESM(require_react());
    init_esm();
    init_modal_box2();
    init_c_modal_box_m_align_top_spacer();
    ModalBox = (_a) => {
      var { children, className = "", variant = "default", position, positionOffset, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel = "", "aria-describedby": ariaDescribedby, style } = _a, props = __rest(_a, ["children", "className", "variant", "position", "positionOffset", "aria-labelledby", "aria-label", "aria-describedby", "style"]);
      if (positionOffset) {
        style = style || {};
        style[c_modal_box_m_align_top_spacer_default.name] = positionOffset;
      }
      return React21.createElement("div", Object.assign({}, props, { role: "dialog", "aria-label": ariaLabel || null, "aria-labelledby": ariaLabelledby || null, "aria-describedby": ariaDescribedby, "aria-modal": "true", className: css(modal_box_default.modalBox, className, position === "top" && modal_box_default.modifiers.alignTop, variant === "large" && modal_box_default.modifiers.lg, variant === "small" && modal_box_default.modifiers.sm, variant === "medium" && modal_box_default.modifiers.md), style }), children);
    };
    ModalBox.displayName = "ModalBox";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxFooter.js
var React22, ModalBoxFooter;
var init_ModalBoxFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxFooter.js"() {
    init_tslib_es6();
    React22 = __toESM(require_react());
    init_esm();
    init_modal_box2();
    ModalBoxFooter = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React22.createElement("footer", Object.assign({}, props, { className: css(modal_box_default.modalBoxFooter, className) }), children);
    };
    ModalBoxFooter.displayName = "ModalBoxFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxDescription.js
var React23, ModalBoxDescription;
var init_ModalBoxDescription = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxDescription.js"() {
    init_tslib_es6();
    React23 = __toESM(require_react());
    init_esm();
    init_modal_box2();
    ModalBoxDescription = (_a) => {
      var { children = null, className = "", id = "" } = _a, props = __rest(_a, ["children", "className", "id"]);
      return React23.createElement("div", Object.assign({}, props, { id, className: css(modal_box_default.modalBoxDescription, className) }), children);
    };
    ModalBoxDescription.displayName = "ModalBoxDescription";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxHeader.js
var React24, ModalBoxHeader;
var init_ModalBoxHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxHeader.js"() {
    init_tslib_es6();
    React24 = __toESM(require_react());
    init_esm();
    init_modal_box2();
    ModalBoxHeader = (_a) => {
      var { children = null, className = "", help = null } = _a, props = __rest(_a, ["children", "className", "help"]);
      return React24.createElement(
        "header",
        Object.assign({ className: css(modal_box_default.modalBoxHeader, help && modal_box_default.modifiers.help, className) }, props),
        help && React24.createElement(
          React24.Fragment,
          null,
          React24.createElement("div", { className: css(modal_box_default.modalBoxHeaderMain) }, children),
          React24.createElement("div", { className: `${modal_box_default.modalBoxHeader}-help` }, help)
        ),
        !help && children
      );
    };
    ModalBoxHeader.displayName = "ModalBoxHeader";
  }
});

// node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.css
var init_tooltip = __esm({
  "node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs
var tooltip_default;
var init_tooltip2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs"() {
    init_tooltip();
    tooltip_default = {
      "modifiers": {
        "top": "pf-m-top",
        "topLeft": "pf-m-top-left",
        "topRight": "pf-m-top-right",
        "bottom": "pf-m-bottom",
        "bottomLeft": "pf-m-bottom-left",
        "bottomRight": "pf-m-bottom-right",
        "left": "pf-m-left",
        "leftTop": "pf-m-left-top",
        "leftBottom": "pf-m-left-bottom",
        "right": "pf-m-right",
        "rightTop": "pf-m-right-top",
        "rightBottom": "pf-m-right-bottom",
        "textAlignLeft": "pf-m-text-align-left"
      },
      "themeDark": "pf-v5-theme-dark",
      "tooltip": "pf-v5-c-tooltip",
      "tooltipArrow": "pf-v5-c-tooltip__arrow",
      "tooltipContent": "pf-v5-c-tooltip__content"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipContent.js
var React25, TooltipContent;
var init_TooltipContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipContent.js"() {
    init_tslib_es6();
    React25 = __toESM(require_react());
    init_tooltip2();
    init_esm();
    TooltipContent = (_a) => {
      var { className, children, isLeftAligned } = _a, props = __rest(_a, ["className", "children", "isLeftAligned"]);
      return React25.createElement("div", Object.assign({ className: css(tooltip_default.tooltipContent, isLeftAligned && tooltip_default.modifiers.textAlignLeft, className) }, props), children);
    };
    TooltipContent.displayName = "TooltipContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipArrow.js
var React26, TooltipArrow;
var init_TooltipArrow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipArrow.js"() {
    init_tslib_es6();
    React26 = __toESM(require_react());
    init_tooltip2();
    init_esm();
    TooltipArrow = (_a) => {
      var { className } = _a, props = __rest(_a, ["className"]);
      return React26.createElement("div", Object.assign({ className: css(tooltip_default.tooltipArrow, className) }, props));
    };
    TooltipArrow.displayName = "TooltipArrow";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth.js
var c_tooltip_MaxWidth, c_tooltip_MaxWidth_default;
var init_c_tooltip_MaxWidth = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth.js"() {
    c_tooltip_MaxWidth = {
      "name": "--pf-v5-c-tooltip--MaxWidth",
      "value": "18.75rem",
      "var": "var(--pf-v5-c-tooltip--MaxWidth)"
    };
    c_tooltip_MaxWidth_default = c_tooltip_MaxWidth;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
var React27, TooltipPosition, pfTooltipIdCounter, Tooltip;
var init_Tooltip = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js"() {
    init_tslib_es6();
    React27 = __toESM(require_react());
    init_tooltip2();
    init_esm();
    init_TooltipContent();
    init_TooltipArrow();
    init_constants();
    init_c_tooltip_MaxWidth();
    init_Popper2();
    (function(TooltipPosition2) {
      TooltipPosition2["auto"] = "auto";
      TooltipPosition2["top"] = "top";
      TooltipPosition2["bottom"] = "bottom";
      TooltipPosition2["left"] = "left";
      TooltipPosition2["right"] = "right";
      TooltipPosition2["topStart"] = "top-start";
      TooltipPosition2["topEnd"] = "top-end";
      TooltipPosition2["bottomStart"] = "bottom-start";
      TooltipPosition2["bottomEnd"] = "bottom-end";
      TooltipPosition2["leftStart"] = "left-start";
      TooltipPosition2["leftEnd"] = "left-end";
      TooltipPosition2["rightStart"] = "right-start";
      TooltipPosition2["rightEnd"] = "right-end";
    })(TooltipPosition || (TooltipPosition = {}));
    pfTooltipIdCounter = 1;
    Tooltip = (_a) => {
      var {
        content: bodyContent,
        position = "top",
        trigger = "mouseenter focus",
        isVisible = false,
        isContentLeftAligned = false,
        enableFlip = true,
        className = "",
        entryDelay = 300,
        exitDelay = 300,
        appendTo = () => document.body,
        zIndex = 9999,
        minWidth,
        maxWidth = c_tooltip_MaxWidth_default.value,
        distance = 15,
        aria = "describedby",
        // For every initial starting position, there are 3 escape positions
        flipBehavior = ["top", "right", "bottom", "left", "top", "right", "bottom"],
        id = `pf-tooltip-${pfTooltipIdCounter++}`,
        children,
        animationDuration = 300,
        triggerRef,
        "aria-live": ariaLive = triggerRef ? "polite" : "off",
        onTooltipHidden = () => {
        }
      } = _a, rest = __rest(_a, ["content", "position", "trigger", "isVisible", "isContentLeftAligned", "enableFlip", "className", "entryDelay", "exitDelay", "appendTo", "zIndex", "minWidth", "maxWidth", "distance", "aria", "flipBehavior", "id", "children", "animationDuration", "triggerRef", "aria-live", "onTooltipHidden"]);
      const hideOnClick = true;
      const triggerOnMouseenter = trigger.includes("mouseenter");
      const triggerOnFocus = trigger.includes("focus");
      const triggerOnClick = trigger.includes("click");
      const triggerManually = trigger === "manual";
      const [visible, setVisible] = React27.useState(false);
      const popperRef = React27.createRef();
      const onDocumentKeyDown = (event) => {
        if (!triggerManually) {
          if (event.key === KeyTypes.Escape && visible) {
            hide2();
          }
        }
      };
      const onTriggerEnter = (event) => {
        if (event.key === KeyTypes.Enter) {
          if (!visible) {
            show();
          } else {
            hide2();
          }
        }
      };
      React27.useEffect(() => {
        if (isVisible) {
          show();
        } else {
          hide2();
        }
      }, [isVisible]);
      const show = () => {
        setVisible(true);
      };
      const hide2 = () => {
        setVisible(false);
      };
      const positionModifiers = {
        top: tooltip_default.modifiers.top,
        bottom: tooltip_default.modifiers.bottom,
        left: tooltip_default.modifiers.left,
        right: tooltip_default.modifiers.right,
        "top-start": tooltip_default.modifiers.topLeft,
        "top-end": tooltip_default.modifiers.topRight,
        "bottom-start": tooltip_default.modifiers.bottomLeft,
        "bottom-end": tooltip_default.modifiers.bottomRight,
        "left-start": tooltip_default.modifiers.leftTop,
        "left-end": tooltip_default.modifiers.leftBottom,
        "right-start": tooltip_default.modifiers.rightTop,
        "right-end": tooltip_default.modifiers.rightBottom
      };
      const hasCustomMaxWidth = maxWidth !== c_tooltip_MaxWidth_default.value;
      const content = React27.createElement(
        "div",
        Object.assign({ "aria-live": ariaLive, className: css(tooltip_default.tooltip, className), role: "tooltip", id, style: {
          maxWidth: hasCustomMaxWidth ? maxWidth : null
        }, ref: popperRef }, rest),
        React27.createElement(TooltipArrow, null),
        React27.createElement(TooltipContent, { isLeftAligned: isContentLeftAligned }, bodyContent)
      );
      const onDocumentClick = (event, triggerElement) => {
        if (hideOnClick === true) {
          if (visible) {
            hide2();
          } else if (event.target === triggerElement) {
            show();
          }
        } else if (hideOnClick === "toggle" && event.target === triggerElement) {
          if (visible) {
            hide2();
          } else {
            show();
          }
        } else if (hideOnClick === false && !visible && event.target === triggerElement) {
          show();
        }
      };
      const addAriaToTrigger = () => {
        if (aria === "describedby" && children && children.props && !children.props["aria-describedby"]) {
          return React27.cloneElement(children, { "aria-describedby": id });
        } else if (aria === "labelledby" && children.props && !children.props["aria-labelledby"]) {
          return React27.cloneElement(children, { "aria-labelledby": id });
        }
        return children;
      };
      return React27.createElement(Popper, { trigger: aria !== "none" && visible ? addAriaToTrigger() : children, triggerRef, popper: content, popperRef, minWidth: minWidth !== void 0 ? minWidth : "revert", appendTo, isVisible: visible, positionModifiers, distance, placement: position, onMouseEnter: triggerOnMouseenter && show, onMouseLeave: triggerOnMouseenter && hide2, onPopperMouseEnter: triggerOnMouseenter && show, onPopperMouseLeave: triggerOnMouseenter && hide2, onFocus: triggerOnFocus && show, onBlur: triggerOnFocus && hide2, onDocumentClick: triggerOnClick && onDocumentClick, onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown, onTriggerEnter: triggerManually ? null : onTriggerEnter, enableFlip, zIndex, flipBehavior, animationDuration, entryDelay, exitDelay, onHidden: onTooltipHidden });
    };
    Tooltip.displayName = "Tooltip";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/index.js
var init_Tooltip2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tooltip/index.js"() {
    init_Tooltip();
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js
var CheckCircleIconConfig, CheckCircleIcon, check_circle_icon_default;
var init_check_circle_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js"() {
    init_createIcon();
    CheckCircleIconConfig = {
      name: "CheckCircleIcon",
      height: 512,
      width: 512,
      svgPath: "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z",
      yOffset: 0,
      xOffset: 0
    };
    CheckCircleIcon = createIcon(CheckCircleIconConfig);
    check_circle_icon_default = CheckCircleIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js
var ExclamationCircleIconConfig, ExclamationCircleIcon, exclamation_circle_icon_default;
var init_exclamation_circle_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js"() {
    init_createIcon();
    ExclamationCircleIconConfig = {
      name: "ExclamationCircleIcon",
      height: 512,
      width: 512,
      svgPath: "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
      yOffset: 0,
      xOffset: 0
    };
    ExclamationCircleIcon = createIcon(ExclamationCircleIconConfig);
    exclamation_circle_icon_default = ExclamationCircleIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js
var ExclamationTriangleIconConfig, ExclamationTriangleIcon, exclamation_triangle_icon_default;
var init_exclamation_triangle_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js"() {
    init_createIcon();
    ExclamationTriangleIconConfig = {
      name: "ExclamationTriangleIcon",
      height: 512,
      width: 576,
      svgPath: "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
      yOffset: 0,
      xOffset: 0
    };
    ExclamationTriangleIcon = createIcon(ExclamationTriangleIconConfig);
    exclamation_triangle_icon_default = ExclamationTriangleIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js
var InfoCircleIconConfig, InfoCircleIcon, info_circle_icon_default;
var init_info_circle_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js"() {
    init_createIcon();
    InfoCircleIconConfig = {
      name: "InfoCircleIcon",
      height: 512,
      width: 512,
      svgPath: "M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z",
      yOffset: 0,
      xOffset: 0
    };
    InfoCircleIcon = createIcon(InfoCircleIconConfig);
    info_circle_icon_default = InfoCircleIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/bell-icon.js
var BellIconConfig, BellIcon, bell_icon_default;
var init_bell_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/bell-icon.js"() {
    init_createIcon();
    BellIconConfig = {
      name: "BellIcon",
      height: 1024,
      width: 896,
      svgPath: "M448,0 C465.333333,0 480.333333,6.33333333 493,19 C505.666667,31.6666667 512,46.6666667 512,64 L512,106 L514.23,106.45 C587.89,121.39 648.48,157.24 696,214 C744,271.333333 768,338.666667 768,416 C768,500 780,568.666667 804,622 C818.666667,652.666667 841.333333,684 872,716 C873.773676,718.829136 875.780658,721.505113 878,724 C890,737.333333 896,752.333333 896,769 C896,785.666667 890,800.333333 878,813 C866,825.666667 850.666667,832 832,832 L63.3,832 C44.9533333,831.84 29.8533333,825.506667 18,813 C6,800.333333 0,785.666667 0,769 C0,752.333333 6,737.333333 18,724 L24,716 L25.06,714.9 C55.1933333,683.28 77.5066667,652.313333 92,622 C116,568.666667 128,500 128,416 C128,338.666667 152,271.333333 200,214 C248,156.666667 309.333333,120.666667 384,106 L384,63.31 C384.166667,46.27 390.5,31.5 403,19 C415.666667,6.33333333 430.666667,0 448,0 Z M576,896 L576,897.08 C575.74,932.6 563.073333,962.573333 538,987 C512.666667,1011.66667 482.666667,1024 448,1024 C413.333333,1024 383.333333,1011.66667 358,987 C332.666667,962.333333 320,932 320,896 L576,896 Z",
      yOffset: 0,
      xOffset: 0
    };
    BellIcon = createIcon(BellIconConfig);
    bell_icon_default = BellIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxTitle.js
var React28, isVariantIcon, ModalBoxTitle;
var init_ModalBoxTitle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxTitle.js"() {
    init_tslib_es6();
    React28 = __toESM(require_react());
    init_modal_box2();
    init_esm();
    init_helpers();
    init_Tooltip2();
    init_check_circle_icon();
    init_exclamation_circle_icon();
    init_exclamation_triangle_icon();
    init_info_circle_icon();
    init_bell_icon();
    init_helpers();
    isVariantIcon = (icon) => ["success", "danger", "warning", "info", "custom"].includes(icon);
    ModalBoxTitle = (_a) => {
      var { className = "", id, title, titleIconVariant, titleLabel = "" } = _a, props = __rest(_a, ["className", "id", "title", "titleIconVariant", "titleLabel"]);
      const [hasTooltip, setHasTooltip] = React28.useState(false);
      const h1 = React28.useRef(null);
      const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);
      const variantIcons4 = {
        success: React28.createElement(check_circle_icon_default, null),
        danger: React28.createElement(exclamation_circle_icon_default, null),
        warning: React28.createElement(exclamation_triangle_icon_default, null),
        info: React28.createElement(info_circle_icon_default, null),
        custom: React28.createElement(bell_icon_default, null)
      };
      const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;
      useIsomorphicLayoutEffect(() => {
        setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);
      }, []);
      const content = React28.createElement(
        "h1",
        Object.assign({ id, ref: h1, className: css(modal_box_default.modalBoxTitle, titleIconVariant && modal_box_default.modifiers.icon, className) }, props),
        titleIconVariant && React28.createElement("span", { className: css(modal_box_default.modalBoxTitleIcon) }, isVariantIcon(titleIconVariant) ? variantIcons4[titleIconVariant] : React28.createElement(CustomIcon, null)),
        label && React28.createElement("span", { className: "pf-v5-screen-reader" }, label),
        React28.createElement("span", { className: css(modal_box_default.modalBoxTitleText) }, title)
      );
      return hasTooltip ? React28.createElement(Tooltip, { content: title }, content) : content;
    };
    ModalBoxTitle.displayName = "ModalBoxTitle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalContent.js
var React29, ModalContent;
var init_ModalContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalContent.js"() {
    init_tslib_es6();
    React29 = __toESM(require_react());
    init_helpers();
    init_modal_box2();
    init_bullseye2();
    init_esm();
    init_helpers();
    init_Backdrop();
    init_ModalBoxBody();
    init_ModalBoxCloseButton();
    init_ModalBox();
    init_ModalBoxFooter();
    init_ModalBoxDescription();
    init_ModalBoxHeader();
    init_ModalBoxTitle();
    ModalContent = (_a) => {
      var { children, className = "", isOpen = false, header = null, help = null, description = null, title = "", titleIconVariant = null, titleLabel = "", "aria-label": ariaLabel = "", "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, bodyAriaLabel, bodyAriaRole, showClose = true, footer = null, actions = [], onClose = () => void 0, variant = "default", position, positionOffset, width, maxWidth, boxId, labelId, descriptorId, disableFocusTrap = false, hasNoBodyWrapper = false, ouiaId, ouiaSafe = true, elementToFocus } = _a, props = __rest(_a, ["children", "className", "isOpen", "header", "help", "description", "title", "titleIconVariant", "titleLabel", "aria-label", "aria-describedby", "aria-labelledby", "bodyAriaLabel", "bodyAriaRole", "showClose", "footer", "actions", "onClose", "variant", "position", "positionOffset", "width", "maxWidth", "boxId", "labelId", "descriptorId", "disableFocusTrap", "hasNoBodyWrapper", "ouiaId", "ouiaSafe", "elementToFocus"]);
      if (!isOpen) {
        return null;
      }
      const modalBoxHeader = header ? React29.createElement(ModalBoxHeader, { help }, header) : title && React29.createElement(
        ModalBoxHeader,
        { help },
        React29.createElement(ModalBoxTitle, { title, titleIconVariant, titleLabel, id: labelId }),
        description && React29.createElement(ModalBoxDescription, { id: descriptorId }, description)
      );
      const modalBoxFooter = footer ? React29.createElement(ModalBoxFooter, null, footer) : actions.length > 0 && React29.createElement(ModalBoxFooter, null, actions);
      const defaultModalBodyAriaRole = bodyAriaLabel ? "region" : void 0;
      const hasNoDescription = !description && !ariaDescribedby;
      const id = hasNoDescription ? descriptorId : void 0;
      const modalBody = hasNoBodyWrapper ? children : React29.createElement(ModalBoxBody, Object.assign({ "aria-label": bodyAriaLabel, role: bodyAriaRole || defaultModalBodyAriaRole }, props, { id }), children);
      const ariaLabelledbyFormatted = () => {
        if (ariaLabelledby === null) {
          return null;
        }
        const idRefList = [];
        if ((ariaLabel && boxId) !== "") {
          idRefList.push(ariaLabel && boxId);
        }
        if (ariaLabelledby) {
          idRefList.push(ariaLabelledby);
        }
        if (title) {
          idRefList.push(labelId);
        }
        return idRefList.join(" ");
      };
      const modalBox = React29.createElement(
        ModalBox,
        Object.assign({ id: boxId, className: css(className, isVariantIcon(titleIconVariant) && modal_box_default.modifiers[titleIconVariant]), variant, position, positionOffset, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledbyFormatted(), "aria-describedby": ariaDescribedby || (hasNoBodyWrapper ? null : descriptorId) }, getOUIAProps(ModalContent.displayName, ouiaId, ouiaSafe), { style: Object.assign(Object.assign({}, width && { "--pf-v5-c-modal-box--Width": typeof width !== "number" ? width : `${width}px` }), maxWidth && {
          "--pf-v5-c-modal-box--MaxWidth": typeof maxWidth !== "number" ? maxWidth : `${maxWidth}px`
        }) }),
        showClose && React29.createElement(ModalBoxCloseButton, { onClose: (event) => onClose(event), ouiaId }),
        modalBoxHeader,
        modalBody,
        modalBoxFooter
      );
      return React29.createElement(
        Backdrop,
        null,
        React29.createElement(FocusTrap, { active: !disableFocusTrap, focusTrapOptions: {
          clickOutsideDeactivates: true,
          tabbableOptions: { displayCheck: "none" },
          // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
          // We want to prevent this in case false is ever passed in.
          initialFocus: elementToFocus || void 0
        }, className: css(bullseye_default.bullseye) }, modalBox)
      );
    };
    ModalContent.displayName = "ModalContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js
var React30, ReactDOM3, ModalVariant, Modal;
var init_Modal = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js"() {
    init_tslib_es6();
    React30 = __toESM(require_react());
    ReactDOM3 = __toESM(require_react_dom());
    init_helpers();
    init_esm();
    init_backdrop2();
    init_ModalContent();
    init_helpers();
    (function(ModalVariant2) {
      ModalVariant2["small"] = "small";
      ModalVariant2["medium"] = "medium";
      ModalVariant2["large"] = "large";
      ModalVariant2["default"] = "default";
    })(ModalVariant || (ModalVariant = {}));
    Modal = class _Modal extends React30.Component {
      constructor(props) {
        super(props);
        this.boxId = "";
        this.labelId = "";
        this.descriptorId = "";
        this.handleEscKeyClick = (event) => {
          var _a, _b;
          const { onEscapePress } = this.props;
          if (event.key === KeyTypes.Escape && this.props.isOpen) {
            onEscapePress ? onEscapePress(event) : (_b = (_a = this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, event);
          }
        };
        this.getElement = (appendTo) => {
          if (typeof appendTo === "function") {
            return appendTo();
          }
          return appendTo || document.body;
        };
        this.toggleSiblingsFromScreenReaders = (hide2) => {
          const { appendTo } = this.props;
          const target = this.getElement(appendTo);
          const bodyChildren = target.children;
          for (const child of Array.from(bodyChildren)) {
            if (child !== this.state.container) {
              hide2 ? child.setAttribute("aria-hidden", "" + hide2) : child.removeAttribute("aria-hidden");
            }
          }
        };
        this.isEmpty = (value) => value === null || value === void 0 || value === "";
        const boxIdNum = _Modal.currentId++;
        const labelIdNum = boxIdNum + 1;
        const descriptorIdNum = boxIdNum + 2;
        this.boxId = props.id || `pf-modal-part-${boxIdNum}`;
        this.labelId = `pf-modal-part-${labelIdNum}`;
        this.descriptorId = `pf-modal-part-${descriptorIdNum}`;
        this.state = {
          container: void 0,
          ouiaStateId: getDefaultOUIAId(_Modal.displayName, props.variant)
        };
      }
      componentDidMount() {
        const { appendTo, title, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, hasNoBodyWrapper, header } = this.props;
        const target = this.getElement(appendTo);
        const container = document.createElement("div");
        this.setState({ container });
        target.appendChild(container);
        target.addEventListener("keydown", this.handleEscKeyClick, false);
        if (this.props.isOpen) {
          target.classList.add(css(backdrop_default.backdropOpen));
        } else {
          target.classList.remove(css(backdrop_default.backdropOpen));
        }
        if (this.isEmpty(title) && this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby)) {
          console.error("Modal: Specify at least one of: title, aria-label, aria-labelledby.");
        }
        if (this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby) && (hasNoBodyWrapper || header)) {
          console.error("Modal: When using hasNoBodyWrapper or setting a custom header, ensure you assign an accessible name to the the modal container with aria-label or aria-labelledby.");
        }
      }
      componentDidUpdate() {
        const { appendTo } = this.props;
        const target = this.getElement(appendTo);
        if (this.props.isOpen) {
          target.classList.add(css(backdrop_default.backdropOpen));
          this.toggleSiblingsFromScreenReaders(true);
        } else {
          target.classList.remove(css(backdrop_default.backdropOpen));
          this.toggleSiblingsFromScreenReaders(false);
        }
      }
      componentWillUnmount() {
        const { appendTo } = this.props;
        const target = this.getElement(appendTo);
        if (this.state.container) {
          target.removeChild(this.state.container);
        }
        target.removeEventListener("keydown", this.handleEscKeyClick, false);
        target.classList.remove(css(backdrop_default.backdropOpen));
        this.toggleSiblingsFromScreenReaders(false);
      }
      render() {
        const _a = this.props, {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          appendTo,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onEscapePress,
          "aria-labelledby": ariaLabelledby,
          "aria-label": ariaLabel,
          "aria-describedby": ariaDescribedby,
          bodyAriaLabel,
          bodyAriaRole,
          title,
          titleIconVariant,
          titleLabel,
          ouiaId,
          ouiaSafe,
          position,
          elementToFocus
        } = _a, props = __rest(_a, ["appendTo", "onEscapePress", "aria-labelledby", "aria-label", "aria-describedby", "bodyAriaLabel", "bodyAriaRole", "title", "titleIconVariant", "titleLabel", "ouiaId", "ouiaSafe", "position", "elementToFocus"]);
        const { container } = this.state;
        if (!canUseDOM || !container) {
          return null;
        }
        return ReactDOM3.createPortal(React30.createElement(ModalContent, Object.assign({}, props, { boxId: this.boxId, labelId: this.labelId, descriptorId: this.descriptorId, title, titleIconVariant, titleLabel, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, bodyAriaLabel, bodyAriaRole, ouiaId: ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe, position, elementToFocus })), container);
      }
    };
    Modal.displayName = "Modal";
    Modal.currentId = 0;
    Modal.defaultProps = {
      className: "",
      isOpen: false,
      title: "",
      titleIconVariant: null,
      titleLabel: "",
      "aria-label": "",
      showClose: true,
      "aria-describedby": "",
      "aria-labelledby": "",
      id: void 0,
      actions: [],
      onClose: () => void 0,
      variant: "default",
      hasNoBodyWrapper: false,
      appendTo: () => document.body,
      ouiaSafe: true,
      position: "default"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Modal/index.js
var init_Modal2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Modal/index.js"() {
    init_Modal();
    init_ModalBox();
    init_ModalBoxBody();
    init_ModalBoxCloseButton();
    init_ModalBoxHeader();
    init_ModalBoxFooter();
    init_ModalContent();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModal.js
var React31, AboutModal;
var init_AboutModal = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModal.js"() {
    init_tslib_es6();
    React31 = __toESM(require_react());
    init_esm();
    init_c_about_modal_box_BackgroundImage();
    init_AboutModalBoxContent();
    init_AboutModalBoxHeader();
    init_AboutModalBoxBrand();
    init_AboutModalBoxCloseButton();
    init_AboutModalBox();
    init_Modal2();
    init_GenerateId();
    AboutModal = (_a) => {
      var { children, className, isOpen = false, onClose = (_e) => void 0, productName, trademark, backgroundImageSrc, brandImageSrc, brandImageAlt, hasNoContentContainer = false, appendTo, closeButtonAriaLabel, "aria-label": ariaLabel, disableFocusTrap } = _a, props = __rest(_a, ["children", "className", "isOpen", "onClose", "productName", "trademark", "backgroundImageSrc", "brandImageSrc", "brandImageAlt", "hasNoContentContainer", "appendTo", "closeButtonAriaLabel", "aria-label", "disableFocusTrap"]);
      if (brandImageSrc && !brandImageAlt) {
        console.error("AboutModal:", "brandImageAlt is required when a brandImageSrc is specified, and should not be an empty string.");
      }
      if (!productName && !ariaLabel) {
        console.error("AboutModal:", "Either productName or ariaLabel is required for component to be accessible");
      }
      if (!isOpen) {
        return null;
      }
      return React31.createElement(GenerateId, { prefix: "pf-about-modal-title-" }, (ariaLabelledBy) => React31.createElement(
        Modal,
        Object.assign({ isOpen, variant: ModalVariant.large }, productName && { "aria-labelledby": ariaLabelledBy }, { "aria-label": ariaLabel, onEscapePress: onClose, showClose: false, appendTo, disableFocusTrap, hasNoBodyWrapper: true }),
        React31.createElement(
          AboutModalBox,
          { style: backgroundImageSrc ? { [c_about_modal_box_BackgroundImage_default.name]: `url(${backgroundImageSrc})` } : {}, className: css(className) },
          React31.createElement(AboutModalBoxBrand, { src: brandImageSrc, alt: brandImageAlt }),
          React31.createElement(AboutModalBoxCloseButton, { "aria-label": closeButtonAriaLabel, onClose }),
          productName && React31.createElement(AboutModalBoxHeader, { id: ariaLabelledBy, productName }),
          React31.createElement(AboutModalBoxContent, Object.assign({ trademark, hasNoContentContainer }, props), children)
        )
      ));
    };
    AboutModal.displayName = "AboutModal";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/index.js
var init_AboutModal2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/AboutModal/index.js"() {
    init_AboutModal();
  }
});

// node_modules/@patternfly/react-styles/css/components/Accordion/accordion.css
var init_accordion = __esm({
  "node_modules/@patternfly/react-styles/css/components/Accordion/accordion.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Accordion/accordion.mjs
var accordion_default;
var init_accordion2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Accordion/accordion.mjs"() {
    init_accordion();
    accordion_default = {
      "accordion": "pf-v5-c-accordion",
      "accordionExpandableContent": "pf-v5-c-accordion__expandable-content",
      "accordionExpandableContentBody": "pf-v5-c-accordion__expandable-content-body",
      "accordionToggle": "pf-v5-c-accordion__toggle",
      "accordionToggleIcon": "pf-v5-c-accordion__toggle-icon",
      "accordionToggleText": "pf-v5-c-accordion__toggle-text",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "toggleStart": "pf-m-toggle-start",
        "displayLg": "pf-m-display-lg",
        "bordered": "pf-m-bordered",
        "expanded": "pf-m-expanded",
        "fixed": "pf-m-fixed"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContext.js
var React32, AccordionContext;
var init_AccordionContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContext.js"() {
    React32 = __toESM(require_react());
    AccordionContext = React32.createContext({});
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/Accordion.js
var React33, Accordion;
var init_Accordion = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/Accordion.js"() {
    init_tslib_es6();
    React33 = __toESM(require_react());
    init_esm();
    init_accordion2();
    init_AccordionContext();
    Accordion = (_a) => {
      var { children = null, className = "", "aria-label": ariaLabel, headingLevel = "h3", asDefinitionList = true, isBordered = false, displaySize = "default", togglePosition = "end" } = _a, props = __rest(_a, ["children", "className", "aria-label", "headingLevel", "asDefinitionList", "isBordered", "displaySize", "togglePosition"]);
      const AccordionList = asDefinitionList ? "dl" : "div";
      return React33.createElement(
        AccordionList,
        Object.assign({ className: css(accordion_default.accordion, isBordered && accordion_default.modifiers.bordered, togglePosition === "start" && accordion_default.modifiers.toggleStart, displaySize === "lg" && accordion_default.modifiers.displayLg, className), "aria-label": ariaLabel }, !asDefinitionList && ariaLabel && { role: "region" }, props),
        React33.createElement(AccordionContext.Provider, { value: {
          ContentContainer: asDefinitionList ? "dd" : "div",
          ToggleContainer: asDefinitionList ? "dt" : headingLevel,
          togglePosition
        } }, children)
      );
    };
    Accordion.displayName = "Accordion";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionExpandableContentBody.js
var React34, AccordionExpandableContentBody;
var init_AccordionExpandableContentBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionExpandableContentBody.js"() {
    React34 = __toESM(require_react());
    init_esm();
    init_accordion2();
    AccordionExpandableContentBody = ({ children = null }) => React34.createElement("div", { className: css(accordion_default.accordionExpandableContentBody) }, children);
    AccordionExpandableContentBody.displayName = "AccordionExpandableContentBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContent.js
var React35, AccordionContent;
var init_AccordionContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContent.js"() {
    init_tslib_es6();
    React35 = __toESM(require_react());
    init_esm();
    init_accordion2();
    init_AccordionContext();
    init_AccordionExpandableContentBody();
    AccordionContent = (_a) => {
      var { className = "", children = null, id = "", isHidden: isHidden3 = false, isFixed = false, isCustomContent = false, "aria-label": ariaLabel = "", "aria-labelledby": ariaLabelledby, component } = _a, props = __rest(_a, ["className", "children", "id", "isHidden", "isFixed", "isCustomContent", "aria-label", "aria-labelledby", "component"]);
      const [hasScrollbar, setHasScrollbar] = React35.useState(false);
      const containerRef = React35.useRef(null);
      React35.useEffect(() => {
        if ((containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && isFixed && !isHidden3) {
          const { offsetHeight, scrollHeight } = containerRef.current;
          setHasScrollbar(offsetHeight < scrollHeight);
        } else if (!isFixed) {
          setHasScrollbar(false);
        }
      }, [containerRef, isFixed, isHidden3]);
      return React35.createElement(AccordionContext.Consumer, null, ({ ContentContainer }) => {
        const Container = component || ContentContainer;
        return React35.createElement(Container, Object.assign({ ref: containerRef, id, className: css(accordion_default.accordionExpandableContent, isFixed && accordion_default.modifiers.fixed, !isHidden3 && accordion_default.modifiers.expanded, className), hidden: isHidden3 }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledby && { "aria-labelledby": ariaLabelledby }, hasScrollbar && { tabIndex: 0 }, hasScrollbar && Container === "div" && { role: "region" }, props), isCustomContent ? children : React35.createElement(AccordionExpandableContentBody, null, children));
      });
    };
    AccordionContent.displayName = "AccordionContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionItem.js
var React36, AccordionItem;
var init_AccordionItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionItem.js"() {
    React36 = __toESM(require_react());
    AccordionItem = ({ children = null }) => React36.createElement(React36.Fragment, null, children);
    AccordionItem.displayName = "AccordionItem";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-right-icon.js
var AngleRightIconConfig, AngleRightIcon, angle_right_icon_default;
var init_angle_right_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/angle-right-icon.js"() {
    init_createIcon();
    AngleRightIconConfig = {
      name: "AngleRightIcon",
      height: 512,
      width: 256,
      svgPath: "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z",
      yOffset: 0,
      xOffset: 0
    };
    AngleRightIcon = createIcon(AngleRightIconConfig);
    angle_right_icon_default = AngleRightIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionToggle.js
var React37, AccordionToggle;
var init_AccordionToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionToggle.js"() {
    init_tslib_es6();
    React37 = __toESM(require_react());
    init_esm();
    init_accordion2();
    init_angle_right_icon();
    init_AccordionContext();
    AccordionToggle = (_a) => {
      var { className = "", id, isExpanded = false, children = null, component } = _a, props = __rest(_a, ["className", "id", "isExpanded", "children", "component"]);
      const renderToggleIcon = () => React37.createElement(
        "span",
        { className: css(accordion_default.accordionToggleIcon) },
        React37.createElement(angle_right_icon_default, null)
      );
      return React37.createElement(AccordionContext.Consumer, null, ({ ToggleContainer, togglePosition }) => {
        const Container = component || ToggleContainer;
        const isToggleStartPositioned = togglePosition === "start";
        return React37.createElement(
          Container,
          null,
          React37.createElement(
            "button",
            Object.assign({ id, className: css(accordion_default.accordionToggle, isExpanded && accordion_default.modifiers.expanded, className), "aria-expanded": isExpanded, type: "button" }, props),
            isToggleStartPositioned && renderToggleIcon(),
            React37.createElement("span", { className: css(accordion_default.accordionToggleText) }, children),
            !isToggleStartPositioned && renderToggleIcon()
          )
        );
      });
    };
    AccordionToggle.displayName = "AccordionToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/index.js
var init_Accordion2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Accordion/index.js"() {
    init_Accordion();
    init_AccordionContent();
    init_AccordionExpandableContentBody();
    init_AccordionItem();
    init_AccordionToggle();
  }
});

// node_modules/@patternfly/react-styles/css/components/ActionList/action-list.css
var init_action_list = __esm({
  "node_modules/@patternfly/react-styles/css/components/ActionList/action-list.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/ActionList/action-list.mjs
var action_list_default;
var init_action_list2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/ActionList/action-list.mjs"() {
    init_action_list();
    action_list_default = {
      "actionList": "pf-v5-c-action-list",
      "actionListGroup": "pf-v5-c-action-list__group",
      "modifiers": {
        "icons": "pf-m-icons"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionList.js
var React38, ActionList;
var init_ActionList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionList.js"() {
    init_tslib_es6();
    React38 = __toESM(require_react());
    init_esm();
    init_action_list2();
    ActionList = (_a) => {
      var { children, isIconList, className = "" } = _a, props = __rest(_a, ["children", "isIconList", "className"]);
      return React38.createElement("div", Object.assign({ className: css(action_list_default.actionList, isIconList && action_list_default.modifiers.icons, className) }, props), children);
    };
    ActionList.displayName = "ActionList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListGroup.js
var React39, ActionListGroup;
var init_ActionListGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListGroup.js"() {
    init_tslib_es6();
    React39 = __toESM(require_react());
    init_esm();
    init_action_list2();
    ActionListGroup = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React39.createElement("div", Object.assign({ className: css(action_list_default.actionListGroup, className) }, props), children);
    };
    ActionListGroup.displayName = "ActionListGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListItem.js
var React40, ActionListItem;
var init_ActionListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListItem.js"() {
    init_tslib_es6();
    React40 = __toESM(require_react());
    init_esm();
    init_action_list2();
    ActionListItem = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React40.createElement("div", Object.assign({ className: css(`${action_list_default.actionList}__item`, className) }, props), children);
    };
    ActionListItem.displayName = "ActionListItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/index.js
var init_ActionList2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ActionList/index.js"() {
    init_ActionList();
    init_ActionListGroup();
    init_ActionListItem();
  }
});

// node_modules/@patternfly/react-styles/css/components/Alert/alert.css
var init_alert = __esm({
  "node_modules/@patternfly/react-styles/css/components/Alert/alert.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Alert/alert.mjs
var alert_default;
var init_alert2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Alert/alert.mjs"() {
    init_alert();
    alert_default = {
      "alert": "pf-v5-c-alert",
      "alertAction": "pf-v5-c-alert__action",
      "alertActionGroup": "pf-v5-c-alert__action-group",
      "alertDescription": "pf-v5-c-alert__description",
      "alertIcon": "pf-v5-c-alert__icon",
      "alertTitle": "pf-v5-c-alert__title",
      "alertToggle": "pf-v5-c-alert__toggle",
      "alertToggleIcon": "pf-v5-c-alert__toggle-icon",
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "custom": "pf-m-custom",
        "success": "pf-m-success",
        "danger": "pf-m-danger",
        "warning": "pf-m-warning",
        "info": "pf-m-info",
        "inline": "pf-m-inline",
        "plain": "pf-m-plain",
        "expandable": "pf-m-expandable",
        "expanded": "pf-m-expanded",
        "truncate": "pf-m-truncate"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertIcon.js
var React41, variantIcons, AlertIcon;
var init_AlertIcon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertIcon.js"() {
    init_tslib_es6();
    React41 = __toESM(require_react());
    init_esm();
    init_alert2();
    init_check_circle_icon();
    init_exclamation_circle_icon();
    init_exclamation_triangle_icon();
    init_info_circle_icon();
    init_bell_icon();
    variantIcons = {
      success: check_circle_icon_default,
      danger: exclamation_circle_icon_default,
      warning: exclamation_triangle_icon_default,
      info: info_circle_icon_default,
      custom: bell_icon_default
    };
    AlertIcon = (_a) => {
      var { variant, customIcon, className = "" } = _a, props = __rest(_a, ["variant", "customIcon", "className"]);
      const Icon2 = variantIcons[variant];
      return Icon2 ? React41.createElement("div", Object.assign({}, props, { className: css(alert_default.alertIcon, className) }), customIcon || React41.createElement(Icon2, null)) : null;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertContext.js
var React42, AlertContext;
var init_AlertContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertContext.js"() {
    React42 = __toESM(require_react());
    AlertContext = React42.createContext(null);
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_alert__title_max_lines.js
var c_alert__title_max_lines, c_alert_title_max_lines_default;
var init_c_alert_title_max_lines = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_alert__title_max_lines.js"() {
    c_alert__title_max_lines = {
      "name": "--pf-v5-c-alert__title--max-lines",
      "value": "1",
      "var": "var(--pf-v5-c-alert__title--max-lines)"
    };
    c_alert_title_max_lines_default = c_alert__title_max_lines;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertToggleExpandButton.js
var React43, AlertToggleExpandButton;
var init_AlertToggleExpandButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertToggleExpandButton.js"() {
    init_tslib_es6();
    React43 = __toESM(require_react());
    init_Button2();
    init_AlertContext();
    init_angle_right_icon();
    init_esm();
    init_alert2();
    AlertToggleExpandButton = (_a) => {
      var { "aria-label": ariaLabel = "", variantLabel, onToggleExpand, isExpanded = false } = _a, props = __rest(_a, ["aria-label", "variantLabel", "onToggleExpand", "isExpanded"]);
      const { title, variantLabel: alertVariantLabel } = React43.useContext(AlertContext);
      return React43.createElement(
        Button,
        Object.assign({ variant: ButtonVariant.plain, onClick: onToggleExpand, "aria-expanded": isExpanded, "aria-label": ariaLabel === "" ? `Toggle ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel }, props),
        React43.createElement(
          "span",
          { className: css(alert_default.alertToggleIcon) },
          React43.createElement(angle_right_icon_default, { "aria-hidden": "true" })
        )
      );
    };
    AlertToggleExpandButton.displayName = "AlertToggleExpandButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
var React44, import_react4, AlertVariant, Alert;
var init_Alert = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js"() {
    init_tslib_es6();
    React44 = __toESM(require_react());
    import_react4 = __toESM(require_react());
    init_esm();
    init_alert2();
    init_AlertIcon();
    init_helpers();
    init_AlertContext();
    init_c_alert_title_max_lines();
    init_Tooltip2();
    init_AlertToggleExpandButton();
    (function(AlertVariant2) {
      AlertVariant2["success"] = "success";
      AlertVariant2["danger"] = "danger";
      AlertVariant2["warning"] = "warning";
      AlertVariant2["info"] = "info";
      AlertVariant2["custom"] = "custom";
    })(AlertVariant || (AlertVariant = {}));
    Alert = (_a) => {
      var { variant = AlertVariant.custom, isInline = false, isPlain = false, isLiveRegion = false, variantLabel = `${capitalize(variant)} alert:`, actionClose, actionLinks, title, component = "h4", children = "", className = "", ouiaId, ouiaSafe = true, timeout = false, timeoutAnimation = 3e3, onTimeout = () => {
      }, truncateTitle = 0, tooltipPosition, customIcon, isExpandable = false, toggleAriaLabel = `${capitalize(variant)} alert details`, onMouseEnter = () => {
      }, onMouseLeave = () => {
      }, id } = _a, props = __rest(_a, ["variant", "isInline", "isPlain", "isLiveRegion", "variantLabel", "actionClose", "actionLinks", "title", "component", "children", "className", "ouiaId", "ouiaSafe", "timeout", "timeoutAnimation", "onTimeout", "truncateTitle", "tooltipPosition", "customIcon", "isExpandable", "toggleAriaLabel", "onMouseEnter", "onMouseLeave", "id"]);
      const ouiaProps = useOUIAProps(Alert.displayName, ouiaId, ouiaSafe, variant);
      const getHeadingContent = React44.createElement(
        React44.Fragment,
        null,
        React44.createElement("span", { className: "pf-v5-screen-reader" }, variantLabel),
        title
      );
      const titleRef = React44.useRef(null);
      const TitleComponent = component;
      const divRef = React44.useRef();
      const [isTooltipVisible, setIsTooltipVisible] = (0, import_react4.useState)(false);
      React44.useEffect(() => {
        if (!titleRef.current || !truncateTitle) {
          return;
        }
        titleRef.current.style.setProperty(c_alert_title_max_lines_default.name, truncateTitle.toString());
        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
        if (isTooltipVisible !== showTooltip) {
          setIsTooltipVisible(showTooltip);
        }
      }, [titleRef, truncateTitle, isTooltipVisible]);
      const [timedOut, setTimedOut] = (0, import_react4.useState)(false);
      const [timedOutAnimation, setTimedOutAnimation] = (0, import_react4.useState)(true);
      const [isMouseOver, setIsMouseOver] = (0, import_react4.useState)();
      const [containsFocus, setContainsFocus] = (0, import_react4.useState)();
      const dismissed = timedOut && timedOutAnimation && !isMouseOver && !containsFocus;
      React44.useEffect(() => {
        const calculatedTimeout = timeout === true ? 8e3 : Number(timeout);
        if (calculatedTimeout > 0) {
          const timer = setTimeout(() => setTimedOut(true), calculatedTimeout);
          return () => clearTimeout(timer);
        }
      }, [timeout]);
      React44.useEffect(() => {
        const onDocumentFocus = () => {
          if (divRef.current) {
            if (divRef.current.contains(document.activeElement)) {
              setContainsFocus(true);
              setTimedOutAnimation(false);
            } else if (containsFocus) {
              setContainsFocus(false);
            }
          }
        };
        document.addEventListener("focus", onDocumentFocus, true);
        return () => document.removeEventListener("focus", onDocumentFocus, true);
      }, [containsFocus]);
      React44.useEffect(() => {
        if (containsFocus === false || isMouseOver === false) {
          const timer = setTimeout(() => setTimedOutAnimation(true), timeoutAnimation);
          return () => clearTimeout(timer);
        }
      }, [containsFocus, isMouseOver, timeoutAnimation]);
      React44.useEffect(() => {
        dismissed && onTimeout();
      }, [dismissed, onTimeout]);
      const [isExpanded, setIsExpanded] = (0, import_react4.useState)(false);
      const onToggleExpand = () => {
        setIsExpanded(!isExpanded);
      };
      const myOnMouseEnter = (ev) => {
        setIsMouseOver(true);
        setTimedOutAnimation(false);
        onMouseEnter(ev);
      };
      const myOnMouseLeave = (ev) => {
        setIsMouseOver(false);
        onMouseLeave(ev);
      };
      if (dismissed) {
        return null;
      }
      const Title2 = React44.createElement(TitleComponent, Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(alert_default.alertTitle, truncateTitle && alert_default.modifiers.truncate) }), getHeadingContent);
      return React44.createElement(
        "div",
        Object.assign({ ref: divRef, className: css(alert_default.alert, isInline && alert_default.modifiers.inline, isPlain && alert_default.modifiers.plain, isExpandable && alert_default.modifiers.expandable, isExpanded && alert_default.modifiers.expanded, alert_default.modifiers[variant], className) }, ouiaProps, isLiveRegion && {
          "aria-live": "polite",
          "aria-atomic": "false"
        }, { onMouseEnter: myOnMouseEnter, onMouseLeave: myOnMouseLeave, id }, props),
        isExpandable && React44.createElement(
          AlertContext.Provider,
          { value: { title, variantLabel } },
          React44.createElement(
            "div",
            { className: css(alert_default.alertToggle) },
            React44.createElement(AlertToggleExpandButton, { isExpanded, onToggleExpand, "aria-label": toggleAriaLabel })
          )
        ),
        React44.createElement(AlertIcon, { variant, customIcon }),
        isTooltipVisible ? React44.createElement(Tooltip, { content: getHeadingContent, position: tooltipPosition }, Title2) : Title2,
        actionClose && React44.createElement(
          AlertContext.Provider,
          { value: { title, variantLabel } },
          React44.createElement("div", { className: css(alert_default.alertAction) }, actionClose)
        ),
        children && (!isExpandable || isExpandable && isExpanded) && React44.createElement("div", { className: css(alert_default.alertDescription) }, children),
        actionLinks && React44.createElement("div", { className: css(alert_default.alertActionGroup) }, actionLinks)
      );
    };
    Alert.displayName = "Alert";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionCloseButton.js
var React45, AlertActionCloseButton;
var init_AlertActionCloseButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionCloseButton.js"() {
    init_tslib_es6();
    React45 = __toESM(require_react());
    init_Button2();
    init_times_icon();
    init_AlertContext();
    AlertActionCloseButton = (_a) => {
      var { className, onClose = () => void 0, "aria-label": ariaLabel = "", variantLabel } = _a, props = __rest(_a, ["className", "onClose", "aria-label", "variantLabel"]);
      return React45.createElement(AlertContext.Consumer, null, ({ title, variantLabel: alertVariantLabel }) => React45.createElement(
        Button,
        Object.assign({ variant: ButtonVariant.plain, onClick: onClose, "aria-label": ariaLabel === "" ? `Close ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel, className }, props),
        React45.createElement(times_icon_default, null)
      ));
    };
    AlertActionCloseButton.displayName = "AlertActionCloseButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionLink.js
var React46, AlertActionLink;
var init_AlertActionLink = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionLink.js"() {
    init_tslib_es6();
    React46 = __toESM(require_react());
    init_Button2();
    AlertActionLink = (_a) => {
      var { className = "", children } = _a, props = __rest(_a, ["className", "children"]);
      return React46.createElement(Button, Object.assign({ variant: ButtonVariant.link, isInline: true, className }, props), children);
    };
    AlertActionLink.displayName = "AlertActionLink";
  }
});

// node_modules/@patternfly/react-styles/css/components/Alert/alert-group.css
var init_alert_group = __esm({
  "node_modules/@patternfly/react-styles/css/components/Alert/alert-group.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Alert/alert-group.mjs
var alert_group_default;
var init_alert_group2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Alert/alert-group.mjs"() {
    init_alert_group();
    alert_group_default = {
      "alertGroup": "pf-v5-c-alert-group",
      "alertGroupOverflowButton": "pf-v5-c-alert-group__overflow-button",
      "modifiers": {
        "toast": "pf-m-toast"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroupInline.js
var React47, AlertGroupInline;
var init_AlertGroupInline = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroupInline.js"() {
    init_tslib_es6();
    React47 = __toESM(require_react());
    init_esm();
    init_alert_group2();
    AlertGroupInline = (_a) => {
      var { className, children, isToast, isLiveRegion, onOverflowClick, overflowMessage } = _a, rest = __rest(_a, ["className", "children", "isToast", "isLiveRegion", "onOverflowClick", "overflowMessage"]);
      return React47.createElement(
        "ul",
        Object.assign({ role: "list", "aria-live": isLiveRegion ? "polite" : null, "aria-atomic": isLiveRegion ? false : null, className: css(alert_group_default.alertGroup, className, isToast ? alert_group_default.modifiers.toast : "") }, rest),
        React47.Children.toArray(children).map((alert, index) => {
          var _a2;
          return React47.createElement("li", { key: ((_a2 = alert.props) === null || _a2 === void 0 ? void 0 : _a2.id) || index }, alert);
        }),
        overflowMessage && React47.createElement(
          "li",
          null,
          React47.createElement("button", { onClick: onOverflowClick, className: css(alert_group_default.alertGroupOverflowButton) }, overflowMessage)
        )
      );
    };
    AlertGroupInline.displayName = "AlertGroupInline";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroup.js
var React48, ReactDOM4, AlertGroup;
var init_AlertGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroup.js"() {
    init_tslib_es6();
    React48 = __toESM(require_react());
    ReactDOM4 = __toESM(require_react_dom());
    init_helpers();
    init_AlertGroupInline();
    AlertGroup = class extends React48.Component {
      constructor() {
        super(...arguments);
        this.state = {
          container: void 0
        };
      }
      componentDidMount() {
        const container = document.createElement("div");
        const target = this.getTargetElement();
        this.setState({ container });
        target.appendChild(container);
      }
      componentWillUnmount() {
        const target = this.getTargetElement();
        if (this.state.container) {
          target.removeChild(this.state.container);
        }
      }
      getTargetElement() {
        const appendTo = this.props.appendTo;
        if (typeof appendTo === "function") {
          return appendTo();
        }
        return appendTo || document.body;
      }
      render() {
        const _a = this.props, {
          className,
          children,
          isToast,
          isLiveRegion,
          onOverflowClick,
          overflowMessage,
          "aria-label": ariaLabel,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          appendTo
        } = _a, props = __rest(_a, ["className", "children", "isToast", "isLiveRegion", "onOverflowClick", "overflowMessage", "aria-label", "appendTo"]);
        const alertGroup = React48.createElement(AlertGroupInline, Object.assign({ onOverflowClick, className, isToast, isLiveRegion, overflowMessage, "aria-label": ariaLabel }, props), children);
        if (!this.props.isToast) {
          return alertGroup;
        }
        const container = this.state.container;
        if (!canUseDOM || !container) {
          return null;
        }
        return ReactDOM4.createPortal(alertGroup, container);
      }
    };
    AlertGroup.displayName = "AlertGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Alert/index.js
var init_Alert2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Alert/index.js"() {
    init_Alert();
    init_AlertContext();
    init_AlertActionCloseButton();
    init_AlertActionLink();
    init_AlertGroup();
  }
});

// node_modules/@patternfly/react-styles/css/components/Avatar/avatar.css
var init_avatar = __esm({
  "node_modules/@patternfly/react-styles/css/components/Avatar/avatar.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Avatar/avatar.mjs
var avatar_default;
var init_avatar2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Avatar/avatar.mjs"() {
    init_avatar();
    avatar_default = {
      "avatar": "pf-v5-c-avatar",
      "modifiers": {
        "light": "pf-m-light",
        "dark": "pf-m-dark",
        "sm": "pf-m-sm",
        "md": "pf-m-md",
        "lg": "pf-m-lg",
        "xl": "pf-m-xl"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Avatar/Avatar.js
var React49, Avatar;
var init_Avatar = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Avatar/Avatar.js"() {
    init_tslib_es6();
    React49 = __toESM(require_react());
    init_avatar2();
    init_esm();
    Avatar = (_a) => {
      var { className = "", src = "", alt, border, size } = _a, props = __rest(_a, ["className", "src", "alt", "border", "size"]);
      return React49.createElement("img", Object.assign({ src, alt, className: css(avatar_default.avatar, avatar_default.modifiers[size], border === "light" && avatar_default.modifiers.light, border === "dark" && avatar_default.modifiers.dark, className) }, props));
    };
    Avatar.displayName = "Avatar";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Avatar/index.js
var init_Avatar2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Avatar/index.js"() {
    init_Avatar();
  }
});

// node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.css
var init_back_to_top = __esm({
  "node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.mjs
var back_to_top_default;
var init_back_to_top2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.mjs"() {
    init_back_to_top();
    back_to_top_default = {
      "backToTop": "pf-v5-c-back-to-top",
      "button": "pf-v5-c-button",
      "modifiers": {
        "hidden": "pf-m-hidden"
      }
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-up-icon.js
var AngleUpIconConfig, AngleUpIcon, angle_up_icon_default;
var init_angle_up_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/angle-up-icon.js"() {
    init_createIcon();
    AngleUpIconConfig = {
      name: "AngleUpIcon",
      height: 512,
      width: 320,
      svgPath: "M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z",
      yOffset: 0,
      xOffset: 0
    };
    AngleUpIcon = createIcon(AngleUpIconConfig);
    angle_up_icon_default = AngleUpIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/BackToTop/BackToTop.js
var React50, BackToTopBase, BackToTop;
var init_BackToTop = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/BackToTop/BackToTop.js"() {
    init_tslib_es6();
    React50 = __toESM(require_react());
    init_back_to_top2();
    init_esm();
    init_angle_up_icon();
    init_util();
    init_Button2();
    BackToTopBase = (_a) => {
      var { className, title = "Back to top", innerRef, scrollableSelector, isAlwaysVisible = false } = _a, props = __rest(_a, ["className", "title", "innerRef", "scrollableSelector", "isAlwaysVisible"]);
      const [visible, setVisible] = React50.useState(isAlwaysVisible);
      React50.useEffect(() => {
        setVisible(isAlwaysVisible);
      }, [isAlwaysVisible]);
      const [scrollElement, setScrollElement] = React50.useState(null);
      const toggleVisible = () => {
        if (scrollElement) {
          const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;
          if (!isAlwaysVisible) {
            if (scrolled > 400) {
              setVisible(true);
            } else {
              setVisible(false);
            }
          }
        }
      };
      React50.useEffect(() => {
        const hasScrollSpy = Boolean(scrollableSelector);
        if (hasScrollSpy) {
          const scrollEl = document.querySelector(scrollableSelector);
          if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {
            return;
          }
          setScrollElement(scrollEl);
          scrollEl.addEventListener("scroll", toggleVisible);
          return () => {
            scrollEl.removeEventListener("scroll", toggleVisible);
          };
        } else {
          if (!canUseDOM) {
            return;
          }
          const scrollEl = window;
          setScrollElement(scrollEl);
          scrollEl.addEventListener("scroll", toggleVisible);
          return () => {
            scrollEl.removeEventListener("scroll", toggleVisible);
          };
        }
      }, [scrollableSelector, toggleVisible]);
      const handleClick = () => {
        scrollElement.scrollTo({ top: 0, behavior: "smooth" });
      };
      return React50.createElement(
        "div",
        Object.assign({ className: css(back_to_top_default.backToTop, !visible && back_to_top_default.modifiers.hidden, className), ref: innerRef, onClick: handleClick }, props),
        React50.createElement(Button, { variant: "primary", icon: React50.createElement(angle_up_icon_default, { "aria-hidden": "true" }), iconPosition: "end" }, title)
      );
    };
    BackToTop = React50.forwardRef((props, ref) => React50.createElement(BackToTopBase, Object.assign({ innerRef: ref }, props)));
    BackToTop.displayName = "BackToTop";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/BackToTop/index.js
var init_BackToTop2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/BackToTop/index.js"() {
    init_BackToTop();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Backdrop/index.js
var init_Backdrop2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Backdrop/index.js"() {
    init_Backdrop();
  }
});

// node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.css
var init_background_image = __esm({
  "node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.mjs
var background_image_default;
var init_background_image2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.mjs"() {
    init_background_image();
    background_image_default = {
      "backgroundImage": "pf-v5-c-background-image",
      "dirRtl": "pf-v5-m-dir-rtl"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_background_image_BackgroundImage.js
var c_background_image_BackgroundImage, c_background_image_BackgroundImage_default;
var init_c_background_image_BackgroundImage = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_background_image_BackgroundImage.js"() {
    c_background_image_BackgroundImage = {
      "name": "--pf-v5-c-background-image--BackgroundImage",
      "value": "none",
      "var": "var(--pf-v5-c-background-image--BackgroundImage)"
    };
    c_background_image_BackgroundImage_default = c_background_image_BackgroundImage;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/BackgroundImage.js
var import_react5, BackgroundImage;
var init_BackgroundImage = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/BackgroundImage.js"() {
    init_tslib_es6();
    import_react5 = __toESM(require_react());
    init_esm();
    init_background_image2();
    init_c_background_image_BackgroundImage();
    BackgroundImage = (_a) => {
      var { className, src } = _a, props = __rest(_a, ["className", "src"]);
      return import_react5.default.createElement("div", Object.assign({ className: css(background_image_default.backgroundImage, className), style: {
        [c_background_image_BackgroundImage_default.name]: `url(${src})`
      } }, props));
    };
    BackgroundImage.displayName = "BackgroundImage";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/index.js
var init_BackgroundImage2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/index.js"() {
    init_BackgroundImage();
  }
});

// node_modules/@patternfly/react-styles/css/components/Banner/banner.css
var init_banner = __esm({
  "node_modules/@patternfly/react-styles/css/components/Banner/banner.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Banner/banner.mjs
var banner_default;
var init_banner2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Banner/banner.mjs"() {
    init_banner();
    banner_default = {
      "banner": "pf-v5-c-banner",
      "button": "pf-v5-c-button",
      "modifiers": {
        "gold": "pf-m-gold",
        "blue": "pf-m-blue",
        "red": "pf-m-red",
        "green": "pf-m-green",
        "sticky": "pf-m-sticky",
        "disabled": "pf-m-disabled",
        "inline": "pf-m-inline"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Banner/Banner.js
var React52, Banner;
var init_Banner = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Banner/Banner.js"() {
    init_tslib_es6();
    React52 = __toESM(require_react());
    init_banner2();
    init_esm();
    Banner = (_a) => {
      var { children, className, variant = "default", screenReaderText, isSticky = false } = _a, props = __rest(_a, ["children", "className", "variant", "screenReaderText", "isSticky"]);
      return React52.createElement(
        "div",
        Object.assign({ className: css(banner_default.banner, banner_default.modifiers[variant], isSticky && banner_default.modifiers.sticky, className) }, props),
        screenReaderText && React52.createElement("span", { className: "pf-v5-screen-reader" }, screenReaderText),
        children
      );
    };
    Banner.displayName = "Banner";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Banner/index.js
var init_Banner2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Banner/index.js"() {
    init_Banner();
  }
});

// node_modules/@patternfly/react-styles/css/components/Brand/brand.css
var init_brand = __esm({
  "node_modules/@patternfly/react-styles/css/components/Brand/brand.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Brand/brand.mjs
var brand_default;
var init_brand2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Brand/brand.mjs"() {
    init_brand();
    brand_default = {
      "brand": "pf-v5-c-brand",
      "modifiers": {
        "picture": "pf-m-picture"
      }
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_brand_Height.js
var c_brand_Height, c_brand_Height_default;
var init_c_brand_Height = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_brand_Height.js"() {
    c_brand_Height = {
      "name": "--pf-v5-c-brand--Height",
      "value": "auto",
      "var": "var(--pf-v5-c-brand--Height)"
    };
    c_brand_Height_default = c_brand_Height;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_brand_Width.js
var c_brand_Width, c_brand_Width_default;
var init_c_brand_Width = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_brand_Width.js"() {
    c_brand_Width = {
      "name": "--pf-v5-c-brand--Width",
      "value": "auto",
      "var": "var(--pf-v5-c-brand--Width)"
    };
    c_brand_Width_default = c_brand_Width;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Brand/Brand.js
var React53, Brand;
var init_Brand = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Brand/Brand.js"() {
    init_tslib_es6();
    React53 = __toESM(require_react());
    init_esm();
    init_brand2();
    init_helpers();
    init_c_brand_Height();
    init_c_brand_Width();
    Brand = (_a) => {
      var { className = "", src = "", alt, children, widths, heights, style } = _a, props = __rest(_a, ["className", "src", "alt", "children", "widths", "heights", "style"]);
      let responsiveStyles;
      if (widths !== void 0) {
        responsiveStyles = Object.assign({}, setBreakpointCssVars(widths, c_brand_Width_default.name));
      }
      if (heights !== void 0) {
        responsiveStyles = Object.assign(Object.assign({}, responsiveStyles), setBreakpointCssVars(heights, c_brand_Height_default.name));
      }
      return (
        /** the brand component currently contains no styling the 'pf-v5-c-brand' string will be used for the className */
        children !== void 0 ? React53.createElement(
          "picture",
          Object.assign({ className: css(brand_default.brand, brand_default.modifiers.picture, className), style: Object.assign(Object.assign({}, style), responsiveStyles) }, props),
          children,
          React53.createElement("img", { src, alt })
        ) : React53.createElement("img", Object.assign({}, props, { className: css(brand_default.brand, className), style: Object.assign(Object.assign({}, style), responsiveStyles), src, alt }))
      );
    };
    Brand.displayName = "Brand";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Brand/index.js
var init_Brand2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Brand/index.js"() {
    init_Brand();
  }
});

// node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.css
var init_breadcrumb = __esm({
  "node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs
var breadcrumb_default;
var init_breadcrumb2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs"() {
    init_breadcrumb();
    breadcrumb_default = {
      "breadcrumb": "pf-v5-c-breadcrumb",
      "breadcrumbDropdown": "pf-v5-c-breadcrumb__dropdown",
      "breadcrumbHeading": "pf-v5-c-breadcrumb__heading",
      "breadcrumbItem": "pf-v5-c-breadcrumb__item",
      "breadcrumbItemDivider": "pf-v5-c-breadcrumb__item-divider",
      "breadcrumbLink": "pf-v5-c-breadcrumb__link",
      "breadcrumbList": "pf-v5-c-breadcrumb__list",
      "dirRtl": "pf-v5-m-dir-rtl",
      "dropdownToggle": "pf-v5-c-dropdown__toggle",
      "modifiers": {
        "current": "pf-m-current"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js
var React54, Breadcrumb;
var init_Breadcrumb = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js"() {
    init_tslib_es6();
    React54 = __toESM(require_react());
    init_breadcrumb2();
    init_esm();
    init_helpers();
    Breadcrumb = (_a) => {
      var { children = null, className = "", "aria-label": ariaLabel = "Breadcrumb", ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["children", "className", "aria-label", "ouiaId", "ouiaSafe"]);
      const ouiaProps = useOUIAProps(Breadcrumb.displayName, ouiaId, ouiaSafe);
      return React54.createElement(
        "nav",
        Object.assign({}, props, { "aria-label": ariaLabel, className: css(breadcrumb_default.breadcrumb, className) }, ouiaProps),
        React54.createElement("ol", { className: breadcrumb_default.breadcrumbList, role: "list" }, React54.Children.map(children, (child, index) => {
          const showDivider = index > 0;
          if (React54.isValidElement(child)) {
            return React54.cloneElement(child, { showDivider });
          }
          return child;
        }))
      );
    };
    Breadcrumb.displayName = "Breadcrumb";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js
var React55, BreadcrumbItem;
var init_BreadcrumbItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js"() {
    init_tslib_es6();
    React55 = __toESM(require_react());
    init_angle_right_icon();
    init_breadcrumb2();
    init_esm();
    BreadcrumbItem = (_a) => {
      var { children = null, className: classNameProp = "", to = void 0, isActive = false, isDropdown = false, showDivider, target = void 0, component = "a", render = void 0 } = _a, props = __rest(_a, ["children", "className", "to", "isActive", "isDropdown", "showDivider", "target", "component", "render"]);
      const Component44 = component;
      const ariaCurrent = isActive ? "page" : void 0;
      const className = css(breadcrumb_default.breadcrumbLink, isActive && breadcrumb_default.modifiers.current);
      return React55.createElement(
        "li",
        Object.assign({}, props, { className: css(breadcrumb_default.breadcrumbItem, classNameProp) }),
        showDivider && React55.createElement(
          "span",
          { className: breadcrumb_default.breadcrumbItemDivider },
          React55.createElement(angle_right_icon_default, null)
        ),
        component === "button" && React55.createElement("button", { className, "aria-current": ariaCurrent, type: "button" }, children),
        isDropdown && React55.createElement("span", { className: css(breadcrumb_default.breadcrumbDropdown) }, children),
        render && render({ className, ariaCurrent }),
        to && !render && React55.createElement(Component44, { href: to, target, className, "aria-current": ariaCurrent }, children),
        !to && component !== "button" && !isDropdown && children
      );
    };
    BreadcrumbItem.displayName = "BreadcrumbItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbHeading.js
var React56, BreadcrumbHeading;
var init_BreadcrumbHeading = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbHeading.js"() {
    init_tslib_es6();
    React56 = __toESM(require_react());
    init_angle_right_icon();
    init_breadcrumb2();
    init_esm();
    BreadcrumbHeading = (_a) => {
      var { children = null, className = "", to = void 0, target = void 0, component = "a", showDivider } = _a, props = __rest(_a, ["children", "className", "to", "target", "component", "showDivider"]);
      const Component44 = component;
      return React56.createElement(
        "li",
        Object.assign({}, props, { className: css(breadcrumb_default.breadcrumbItem, className) }),
        showDivider && React56.createElement(
          "span",
          { className: breadcrumb_default.breadcrumbItemDivider },
          React56.createElement(angle_right_icon_default, null)
        ),
        React56.createElement(
          "h1",
          { className: breadcrumb_default.breadcrumbHeading },
          !to && component === "button" && React56.createElement("button", { className: css(breadcrumb_default.breadcrumbLink, breadcrumb_default.modifiers.current), "aria-current": true, type: "button" }, children),
          to && React56.createElement(Component44, { href: to, target, className: css(breadcrumb_default.breadcrumbLink, breadcrumb_default.modifiers.current), "aria-current": "page" }, children),
          !to && component !== "button" && React56.createElement(React56.Fragment, null, children)
        )
      );
    };
    BreadcrumbHeading.displayName = "BreadcrumbHeading";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/index.js
var init_Breadcrumb2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/index.js"() {
    init_Breadcrumb();
    init_BreadcrumbItem();
    init_BreadcrumbHeading();
  }
});

// node_modules/@patternfly/react-styles/css/components/FormControl/form-control.css
var init_form_control = __esm({
  "node_modules/@patternfly/react-styles/css/components/FormControl/form-control.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/FormControl/form-control.mjs
var form_control_default;
var init_form_control2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/FormControl/form-control.mjs"() {
    init_form_control();
    form_control_default = {
      "formControl": "pf-v5-c-form-control",
      "formControlIcon": "pf-v5-c-form-control__icon",
      "formControlToggleIcon": "pf-v5-c-form-control__toggle-icon",
      "formControlUtilities": "pf-v5-c-form-control__utilities",
      "modifiers": {
        "readonly": "pf-m-readonly",
        "success": "pf-m-success",
        "warning": "pf-m-warning",
        "error": "pf-m-error",
        "plain": "pf-m-plain",
        "expanded": "pf-m-expanded",
        "disabled": "pf-m-disabled",
        "icon": "pf-m-icon",
        "placeholder": "pf-m-placeholder",
        "resizeVertical": "pf-m-resize-vertical",
        "resizeHorizontal": "pf-m-resize-horizontal",
        "resizeBoth": "pf-m-resize-both",
        "status": "pf-m-status"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FormControl/FormControlIcon.js
var React57, statusIcons, FormControlIcon;
var init_FormControlIcon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FormControl/FormControlIcon.js"() {
    init_tslib_es6();
    React57 = __toESM(require_react());
    init_form_control2();
    init_esm();
    init_check_circle_icon();
    init_exclamation_circle_icon();
    init_exclamation_triangle_icon();
    statusIcons = {
      success: check_circle_icon_default,
      error: exclamation_circle_icon_default,
      warning: exclamation_triangle_icon_default
    };
    FormControlIcon = (_a) => {
      var { status, customIcon, className } = _a, props = __rest(_a, ["status", "customIcon", "className"]);
      const StatusIcon = status && statusIcons[status];
      return React57.createElement("span", Object.assign({ className: css(form_control_default.formControlIcon, status && form_control_default.modifiers.status, className) }, props), customIcon || React57.createElement(StatusIcon, null));
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js
var React58, TextInputTypes, TextInputReadOnlyVariant, TextInputBase, TextInput;
var init_TextInput = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js"() {
    init_tslib_es6();
    React58 = __toESM(require_react());
    init_form_control2();
    init_esm();
    init_constants();
    init_util();
    init_helpers();
    init_resizeObserver();
    init_FormControlIcon();
    (function(TextInputTypes2) {
      TextInputTypes2["text"] = "text";
      TextInputTypes2["date"] = "date";
      TextInputTypes2["datetimeLocal"] = "datetime-local";
      TextInputTypes2["email"] = "email";
      TextInputTypes2["month"] = "month";
      TextInputTypes2["number"] = "number";
      TextInputTypes2["password"] = "password";
      TextInputTypes2["search"] = "search";
      TextInputTypes2["tel"] = "tel";
      TextInputTypes2["time"] = "time";
      TextInputTypes2["url"] = "url";
    })(TextInputTypes || (TextInputTypes = {}));
    (function(TextInputReadOnlyVariant2) {
      TextInputReadOnlyVariant2["default"] = "default";
      TextInputReadOnlyVariant2["plain"] = "plain";
    })(TextInputReadOnlyVariant || (TextInputReadOnlyVariant = {}));
    TextInputBase = class _TextInputBase extends React58.Component {
      constructor(props) {
        super(props);
        this.inputRef = React58.createRef();
        this.observer = () => {
        };
        this.handleChange = (event) => {
          if (this.props.onChange) {
            this.props.onChange(event, event.currentTarget.value);
          }
        };
        this.handleResize = () => {
          const inputRef = this.props.innerRef || this.inputRef;
          if (inputRef && inputRef.current) {
            trimLeft(inputRef.current, String(this.props.value));
          }
        };
        this.restoreText = () => {
          const inputRef = this.props.innerRef || this.inputRef;
          inputRef.current.value = String(this.props.value);
          inputRef.current.scrollLeft = inputRef.current.scrollWidth;
        };
        this.onFocus = (event) => {
          const { isLeftTruncated, isStartTruncated, onFocus } = this.props;
          if (isLeftTruncated || isStartTruncated) {
            this.restoreText();
          }
          onFocus && onFocus(event);
        };
        this.onBlur = (event) => {
          const { isLeftTruncated, isStartTruncated, onBlur } = this.props;
          if (isLeftTruncated || isStartTruncated) {
            this.handleResize();
          }
          onBlur && onBlur(event);
        };
        this.sanitizeInputValue = (value) => typeof value === "string" ? value.replace(/\n/g, " ") : value;
        if (!props.id && !props["aria-label"] && !props["aria-labelledby"]) {
          console.error("Text input:", "Text input requires either an id or aria-label to be specified");
        }
        this.state = {
          ouiaStateId: getDefaultOUIAId(_TextInputBase.displayName)
        };
      }
      componentDidMount() {
        if (this.props.isLeftTruncated || this.props.isStartTruncated) {
          const inputRef = this.props.innerRef || this.inputRef;
          this.observer = getResizeObserver(inputRef.current, this.handleResize, true);
          this.handleResize();
        }
      }
      componentWillUnmount() {
        if (this.props.isLeftTruncated || this.props.isStartTruncated) {
          this.observer();
        }
      }
      render() {
        const _a = this.props, {
          innerRef,
          className,
          type,
          value,
          placeholder,
          validated,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          onChange,
          onFocus,
          onBlur,
          isLeftTruncated,
          isStartTruncated,
          isExpanded,
          expandedProps,
          readOnly,
          readOnlyVariant,
          isRequired,
          isDisabled,
          customIcon,
          ouiaId,
          ouiaSafe
        } = _a, props = __rest(_a, ["innerRef", "className", "type", "value", "placeholder", "validated", "onChange", "onFocus", "onBlur", "isLeftTruncated", "isStartTruncated", "isExpanded", "expandedProps", "readOnly", "readOnlyVariant", "isRequired", "isDisabled", "customIcon", "ouiaId", "ouiaSafe"]);
        const hasStatusIcon = ["success", "error", "warning"].includes(validated);
        const ariaExpandedProps = expandedProps ? { "aria-expanded": expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.isExpanded, "aria-controls": expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.ariaControls, role: "combobox" } : {};
        return React58.createElement(
          "span",
          { className: css(form_control_default.formControl, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, isDisabled && form_control_default.modifiers.disabled, (isExpanded || (expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.isExpanded)) && form_control_default.modifiers.expanded, customIcon && form_control_default.modifiers.icon, hasStatusIcon && form_control_default.modifiers[validated], className) },
          React58.createElement("input", Object.assign({}, props, { onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.handleChange, type, value: this.sanitizeInputValue(value), "aria-invalid": props["aria-invalid"] ? props["aria-invalid"] : validated === ValidatedOptions.error }, ariaExpandedProps, { required: isRequired, disabled: isDisabled, readOnly: !!readOnlyVariant || readOnly, ref: innerRef || this.inputRef, placeholder }, getOUIAProps(TextInput.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe))),
          (customIcon || hasStatusIcon) && React58.createElement(
            "span",
            { className: css(form_control_default.formControlUtilities) },
            customIcon && React58.createElement(FormControlIcon, { customIcon }),
            hasStatusIcon && React58.createElement(FormControlIcon, { status: validated })
          )
        );
      }
    };
    TextInputBase.displayName = "TextInputBase";
    TextInputBase.defaultProps = {
      "aria-label": null,
      isRequired: false,
      validated: "default",
      isDisabled: false,
      isExpanded: false,
      type: TextInputTypes.text,
      isLeftTruncated: false,
      isStartTruncated: false,
      onChange: () => void 0,
      ouiaSafe: true
    };
    TextInput = React58.forwardRef((props, ref) => React58.createElement(TextInputBase, Object.assign({}, props, { innerRef: ref })));
    TextInput.displayName = "TextInput";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextInput/index.js
var init_TextInput2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextInput/index.js"() {
    init_TextInput();
  }
});

// node_modules/@patternfly/react-styles/css/components/Menu/menu.css
var init_menu = __esm({
  "node_modules/@patternfly/react-styles/css/components/Menu/menu.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Menu/menu.mjs
var menu_default;
var init_menu2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Menu/menu.mjs"() {
    init_menu();
    menu_default = {
      "breadcrumb": "pf-v5-c-breadcrumb",
      "check": "pf-v5-c-check",
      "dirRtl": "pf-v5-m-dir-rtl",
      "divider": "pf-v5-c-divider",
      "menu": "pf-v5-c-menu",
      "menuBreadcrumb": "pf-v5-c-menu__breadcrumb",
      "menuContent": "pf-v5-c-menu__content",
      "menuFooter": "pf-v5-c-menu__footer",
      "menuGroup": "pf-v5-c-menu__group",
      "menuGroupTitle": "pf-v5-c-menu__group-title",
      "menuHeader": "pf-v5-c-menu__header",
      "menuItem": "pf-v5-c-menu__item",
      "menuItemAction": "pf-v5-c-menu__item-action",
      "menuItemActionIcon": "pf-v5-c-menu__item-action-icon",
      "menuItemCheck": "pf-v5-c-menu__item-check",
      "menuItemDescription": "pf-v5-c-menu__item-description",
      "menuItemExternalIcon": "pf-v5-c-menu__item-external-icon",
      "menuItemIcon": "pf-v5-c-menu__item-icon",
      "menuItemMain": "pf-v5-c-menu__item-main",
      "menuItemSelectIcon": "pf-v5-c-menu__item-select-icon",
      "menuItemText": "pf-v5-c-menu__item-text",
      "menuItemToggleIcon": "pf-v5-c-menu__item-toggle-icon",
      "menuList": "pf-v5-c-menu__list",
      "menuListItem": "pf-v5-c-menu__list-item",
      "menuSearch": "pf-v5-c-menu__search",
      "modifiers": {
        "hidden": "pf-m-hidden",
        "hiddenOnSm": "pf-m-hidden-on-sm",
        "visibleOnSm": "pf-m-visible-on-sm",
        "hiddenOnMd": "pf-m-hidden-on-md",
        "visibleOnMd": "pf-m-visible-on-md",
        "hiddenOnLg": "pf-m-hidden-on-lg",
        "visibleOnLg": "pf-m-visible-on-lg",
        "hiddenOnXl": "pf-m-hidden-on-xl",
        "visibleOnXl": "pf-m-visible-on-xl",
        "hiddenOn_2xl": "pf-m-hidden-on-2xl",
        "visibleOn_2xl": "pf-m-visible-on-2xl",
        "flyout": "pf-m-flyout",
        "top": "pf-m-top",
        "left": "pf-m-left",
        "drilldown": "pf-m-drilldown",
        "drilledIn": "pf-m-drilled-in",
        "currentPath": "pf-m-current-path",
        "static": "pf-m-static",
        "plain": "pf-m-plain",
        "scrollable": "pf-m-scrollable",
        "nav": "pf-m-nav",
        "focus": "pf-m-focus",
        "disabled": "pf-m-disabled",
        "ariaDisabled": "pf-m-aria-disabled",
        "load": "pf-m-load",
        "loading": "pf-m-loading",
        "danger": "pf-m-danger",
        "selected": "pf-m-selected",
        "favorite": "pf-m-favorite",
        "favorited": "pf-m-favorited"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.css
var init_dropdown = __esm({
  "node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.mjs
var dropdown_default;
var init_dropdown2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.mjs"() {
    init_dropdown();
    dropdown_default = {
      "badge": "pf-v5-c-badge",
      "check": "pf-v5-c-check",
      "divider": "pf-v5-c-divider",
      "dropdown": "pf-v5-c-dropdown",
      "dropdownGroup": "pf-v5-c-dropdown__group",
      "dropdownGroupTitle": "pf-v5-c-dropdown__group-title",
      "dropdownMenu": "pf-v5-c-dropdown__menu",
      "dropdownMenuItem": "pf-v5-c-dropdown__menu-item",
      "dropdownMenuItemDescription": "pf-v5-c-dropdown__menu-item-description",
      "dropdownMenuItemIcon": "pf-v5-c-dropdown__menu-item-icon",
      "dropdownMenuItemMain": "pf-v5-c-dropdown__menu-item-main",
      "dropdownToggle": "pf-v5-c-dropdown__toggle",
      "dropdownToggleButton": "pf-v5-c-dropdown__toggle-button",
      "dropdownToggleCheck": "pf-v5-c-dropdown__toggle-check",
      "dropdownToggleIcon": "pf-v5-c-dropdown__toggle-icon",
      "dropdownToggleImage": "pf-v5-c-dropdown__toggle-image",
      "dropdownToggleProgress": "pf-v5-c-dropdown__toggle-progress",
      "dropdownToggleText": "pf-v5-c-dropdown__toggle-text",
      "menu": "pf-v5-c-menu",
      "modifiers": {
        "fullHeight": "pf-m-full-height",
        "expanded": "pf-m-expanded",
        "action": "pf-m-action",
        "disabled": "pf-m-disabled",
        "plain": "pf-m-plain",
        "text": "pf-m-text",
        "splitButton": "pf-m-split-button",
        "primary": "pf-m-primary",
        "inProgress": "pf-m-in-progress",
        "active": "pf-m-active",
        "secondary": "pf-m-secondary",
        "top": "pf-m-top",
        "static": "pf-m-static",
        "alignRight": "pf-m-align-right",
        "alignLeft": "pf-m-align-left",
        "alignRightOnSm": "pf-m-align-right-on-sm",
        "alignLeftOnSm": "pf-m-align-left-on-sm",
        "alignRightOnMd": "pf-m-align-right-on-md",
        "alignLeftOnMd": "pf-m-align-left-on-md",
        "alignRightOnLg": "pf-m-align-right-on-lg",
        "alignLeftOnLg": "pf-m-align-left-on-lg",
        "alignRightOnXl": "pf-m-align-right-on-xl",
        "alignLeftOnXl": "pf-m-align-left-on-xl",
        "alignRightOn_2xl": "pf-m-align-right-on-2xl",
        "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
        "ariaDisabled": "pf-m-aria-disabled",
        "icon": "pf-m-icon",
        "description": "pf-m-description"
      },
      "spinner": "pf-v5-c-spinner",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContext.js
var React59, MenuContext, MenuItemContext;
var init_MenuContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContext.js"() {
    React59 = __toESM(require_react());
    MenuContext = React59.createContext({
      menuId: null,
      parentMenu: null,
      onActionClick: () => null,
      onSelect: () => null,
      activeItemId: null,
      selected: null,
      drilledInMenus: [],
      drilldownItemPath: [],
      onDrillIn: null,
      onDrillOut: null,
      onGetMenuHeight: () => null,
      flyoutRef: null,
      setFlyoutRef: () => null,
      disableHover: false,
      role: "menu"
    });
    MenuItemContext = React59.createContext({
      itemId: null,
      isDisabled: false
    });
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
var React60, MenuBase, Menu;
var init_Menu = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js"() {
    init_tslib_es6();
    React60 = __toESM(require_react());
    init_menu2();
    init_breadcrumb2();
    init_dropdown2();
    init_esm();
    init_helpers();
    init_MenuContext();
    init_util();
    init_helpers();
    MenuBase = class extends React60.Component {
      constructor(props) {
        super(props);
        this.menuRef = React60.createRef();
        this.activeMenu = null;
        this.state = {
          ouiaStateId: getDefaultOUIAId(Menu.displayName),
          transitionMoveTarget: null,
          flyoutRef: null,
          disableHover: false,
          currentDrilldownMenuId: this.props.id
        };
        this.handleDrilldownTransition = (event) => {
          const current = this.menuRef.current;
          if (!current || current !== event.target.closest(`.${menu_default.menu}`) && !Array.from(current.getElementsByClassName(menu_default.menu)).includes(event.target.closest(`.${menu_default.menu}`))) {
            return;
          }
          if (this.state.transitionMoveTarget) {
            this.state.transitionMoveTarget.focus();
            this.setState({ transitionMoveTarget: null });
          } else {
            const nextMenu = current.querySelector("#" + this.props.activeMenu) || current || null;
            const nextMenuLists = nextMenu.getElementsByTagName("UL");
            if (nextMenuLists.length === 0) {
              return;
            }
            const nextMenuChildren = Array.from(nextMenuLists[0].children);
            if (!this.state.currentDrilldownMenuId || nextMenu.id !== this.state.currentDrilldownMenuId) {
              this.setState({ currentDrilldownMenuId: nextMenu.id });
            } else {
              return;
            }
            const nextTarget = nextMenuChildren.filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)))[0].firstChild;
            nextTarget.focus();
            nextTarget.tabIndex = 0;
          }
        };
        this.handleExtraKeys = (event) => {
          const isDrilldown = this.props.containsDrilldown;
          const activeElement = document.activeElement;
          if (event.target.closest(`.${menu_default.menu}`) !== this.activeMenu && !event.target.classList.contains(breadcrumb_default.breadcrumbLink)) {
            this.activeMenu = event.target.closest(`.${menu_default.menu}`);
            this.setState({ disableHover: true });
          }
          if (event.target.tagName === "INPUT") {
            return;
          }
          const parentMenu = this.activeMenu;
          const key = event.key;
          const isFromBreadcrumb = activeElement.classList.contains(breadcrumb_default.breadcrumbLink) || activeElement.classList.contains(dropdown_default.dropdownToggle);
          if (key === " " || key === "Enter") {
            event.preventDefault();
            if (isDrilldown && !isFromBreadcrumb) {
              const isDrillingOut = activeElement.closest("li").classList.contains("pf-m-current-path");
              if (isDrillingOut && parentMenu.parentElement.tagName === "LI") {
                activeElement.tabIndex = -1;
                parentMenu.parentElement.firstChild.tabIndex = 0;
                this.setState({ transitionMoveTarget: parentMenu.parentElement.firstChild });
              } else {
                if (activeElement.nextElementSibling && activeElement.nextElementSibling.classList.contains(menu_default.menu)) {
                  const childItems = Array.from(activeElement.nextElementSibling.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)));
                  activeElement.tabIndex = -1;
                  childItems[0].firstChild.tabIndex = 0;
                  this.setState({ transitionMoveTarget: childItems[0].firstChild });
                }
              }
            }
            document.activeElement.click();
          }
        };
        this.createNavigableElements = () => {
          const isDrilldown = this.props.containsDrilldown;
          if (isDrilldown) {
            return this.activeMenu ? Array.from(this.activeMenu.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider))) : [];
          } else {
            return this.menuRef.current ? Array.from(this.menuRef.current.getElementsByTagName("LI")).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider))) : [];
          }
        };
        if (props.innerRef) {
          this.menuRef = props.innerRef;
        }
      }
      allowTabFirstItem() {
        const current = this.menuRef.current;
        if (current) {
          const first = current.querySelector("ul button:not(:disabled), ul a:not(:disabled)");
          if (first) {
            first.tabIndex = 0;
          }
        }
      }
      componentDidMount() {
        if (this.context) {
          this.setState({ disableHover: this.context.disableHover });
        }
        if (canUseDOM) {
          window.addEventListener("transitionend", this.props.isRootMenu ? this.handleDrilldownTransition : null);
        }
        this.allowTabFirstItem();
      }
      componentWillUnmount() {
        if (canUseDOM) {
          window.removeEventListener("transitionend", this.handleDrilldownTransition);
        }
      }
      componentDidUpdate(prevProps) {
        if (prevProps.children !== this.props.children) {
          this.allowTabFirstItem();
        }
      }
      render() {
        const _a = this.props, {
          id,
          children,
          className,
          onSelect,
          selected = null,
          onActionClick,
          ouiaId,
          ouiaSafe,
          containsFlyout,
          isNavFlyout,
          containsDrilldown,
          isMenuDrilledIn,
          isPlain,
          isScrollable,
          drilldownItemPath,
          drilledInMenus,
          onDrillIn,
          onDrillOut,
          onGetMenuHeight,
          parentMenu = null,
          activeItemId = null,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          innerRef,
          isRootMenu,
          activeMenu,
          role
        } = _a, props = __rest(_a, ["id", "children", "className", "onSelect", "selected", "onActionClick", "ouiaId", "ouiaSafe", "containsFlyout", "isNavFlyout", "containsDrilldown", "isMenuDrilledIn", "isPlain", "isScrollable", "drilldownItemPath", "drilledInMenus", "onDrillIn", "onDrillOut", "onGetMenuHeight", "parentMenu", "activeItemId", "innerRef", "isRootMenu", "activeMenu", "role"]);
        const _isMenuDrilledIn = isMenuDrilledIn || drilledInMenus && drilledInMenus.includes(id) || false;
        return React60.createElement(
          MenuContext.Provider,
          { value: {
            menuId: id,
            parentMenu: parentMenu || id,
            onSelect,
            onActionClick,
            activeItemId,
            selected,
            drilledInMenus,
            drilldownItemPath,
            onDrillIn,
            onDrillOut,
            onGetMenuHeight,
            flyoutRef: this.state.flyoutRef,
            setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
            disableHover: this.state.disableHover,
            role
          } },
          isRootMenu && React60.createElement(KeyboardHandler, { containerRef: this.menuRef || null, additionalKeyHandler: this.handleExtraKeys, createNavigableElements: this.createNavigableElements, isActiveElement: (element) => document.activeElement.closest("li") === element || // if element is a basic MenuItem
          document.activeElement.parentElement === element || document.activeElement.closest(`.${menu_default.menuSearch}`) === element || // if element is a MenuSearch
          document.activeElement.closest("ol") && document.activeElement.closest("ol").firstChild === element, getFocusableElement: (navigableElement) => {
            var _a2, _b;
            return (navigableElement === null || navigableElement === void 0 ? void 0 : navigableElement.tagName) === "DIV" && navigableElement.querySelector("input") || // for MenuSearchInput
            ((_a2 = navigableElement.firstChild) === null || _a2 === void 0 ? void 0 : _a2.tagName) === "LABEL" && navigableElement.querySelector("input") || // for MenuItem checkboxes
            ((_b = navigableElement.firstChild) === null || _b === void 0 ? void 0 : _b.tagName) === "DIV" && navigableElement.querySelector("a, button, input") || // For aria-disabled element that is rendered inside a div with "display: contents" styling
            navigableElement.firstChild;
          }, noHorizontalArrowHandling: document.activeElement && (document.activeElement.classList.contains(breadcrumb_default.breadcrumbLink) || document.activeElement.classList.contains(dropdown_default.dropdownToggle) || document.activeElement.tagName === "INPUT"), noEnterHandling: true, noSpaceHandling: true }),
          React60.createElement("div", Object.assign({ id, className: css(menu_default.menu, isPlain && menu_default.modifiers.plain, isScrollable && menu_default.modifiers.scrollable, containsFlyout && menu_default.modifiers.flyout, isNavFlyout && menu_default.modifiers.nav, containsDrilldown && menu_default.modifiers.drilldown, _isMenuDrilledIn && menu_default.modifiers.drilledIn, className), ref: this.menuRef }, getOUIAProps(Menu.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
        );
      }
    };
    MenuBase.displayName = "Menu";
    MenuBase.contextType = MenuContext;
    MenuBase.defaultProps = {
      ouiaSafe: true,
      isRootMenu: true,
      isPlain: false,
      isScrollable: false,
      role: "menu"
    };
    Menu = React60.forwardRef((props, ref) => React60.createElement(MenuBase, Object.assign({}, props, { innerRef: ref })));
    Menu.displayName = "Menu";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_Height.js
var c_menu__content_Height, c_menu_content_Height_default;
var init_c_menu_content_Height = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_Height.js"() {
    c_menu__content_Height = {
      "name": "--pf-v5-c-menu__content--Height",
      "value": "auto",
      "var": "var(--pf-v5-c-menu__content--Height)"
    };
    c_menu_content_Height_default = c_menu__content_Height;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_MaxHeight.js
var c_menu__content_MaxHeight, c_menu_content_MaxHeight_default;
var init_c_menu_content_MaxHeight = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_MaxHeight.js"() {
    c_menu__content_MaxHeight = {
      "name": "--pf-v5-c-menu__content--MaxHeight",
      "value": "18.75rem",
      "var": "var(--pf-v5-c-menu__content--MaxHeight)"
    };
    c_menu_content_MaxHeight_default = c_menu__content_MaxHeight;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
var React61, MenuContent;
var init_MenuContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js"() {
    init_tslib_es6();
    React61 = __toESM(require_react());
    init_menu2();
    init_esm();
    init_MenuContext();
    init_c_menu_content_Height();
    init_c_menu_content_MaxHeight();
    MenuContent = React61.forwardRef((props, ref) => {
      const { getHeight, children, menuHeight, maxMenuHeight } = props, rest = __rest(props, ["getHeight", "children", "menuHeight", "maxMenuHeight"]);
      const menuContentRef = React61.createRef();
      const refCallback = (el, menuId, onGetMenuHeight) => {
        if (el) {
          let clientHeight = el.clientHeight;
          let rootMenuList = null;
          let parentEl = el.closest(`.${menu_default.menuList}`);
          while (parentEl !== null && parentEl.nodeType === 1) {
            if (parentEl.classList.contains(menu_default.menuList)) {
              rootMenuList = parentEl;
            }
            parentEl = parentEl.parentElement;
          }
          if (rootMenuList) {
            const rootMenuListStyles = getComputedStyle(rootMenuList);
            const rootMenuListPaddingOffset = parseFloat(rootMenuListStyles.getPropertyValue("padding-top").replace(/px/g, "")) + parseFloat(rootMenuListStyles.getPropertyValue("padding-bottom").replace(/px/g, "")) + parseFloat(getComputedStyle(rootMenuList.parentElement).getPropertyValue("border-bottom-width").replace(/px/g, ""));
            clientHeight = clientHeight + rootMenuListPaddingOffset;
          }
          onGetMenuHeight && onGetMenuHeight(menuId, clientHeight);
          getHeight && getHeight(clientHeight.toString());
        }
        return ref || menuContentRef;
      };
      return React61.createElement(MenuContext.Consumer, null, ({ menuId, onGetMenuHeight }) => React61.createElement("div", Object.assign({}, rest, { className: css(menu_default.menuContent, props.className), ref: (el) => refCallback(el, menuId, onGetMenuHeight), style: Object.assign(Object.assign({}, menuHeight && { [c_menu_content_Height_default.name]: menuHeight }), maxMenuHeight && { [c_menu_content_MaxHeight_default.name]: maxMenuHeight }) }), children));
    });
    MenuContent.displayName = "MenuContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuFooter.js
var React62, MenuFooter;
var init_MenuFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuFooter.js"() {
    init_tslib_es6();
    React62 = __toESM(require_react());
    init_menu2();
    init_esm();
    MenuFooter = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React62.createElement("div", Object.assign({}, props, { className: css(menu_default.menuFooter, className) }), children);
    };
    MenuFooter.displayName = "MenuFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuSearch.js
var React63, MenuSearch;
var init_MenuSearch = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuSearch.js"() {
    React63 = __toESM(require_react());
    init_menu2();
    init_esm();
    MenuSearch = React63.forwardRef((props, ref) => React63.createElement("div", Object.assign({}, props, { className: css(menu_default.menuSearch, props.className), ref })));
    MenuSearch.displayName = "MenuSearch";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuSearchInput.js
var React64, MenuSearchInput;
var init_MenuSearchInput = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuSearchInput.js"() {
    React64 = __toESM(require_react());
    init_esm();
    init_menu2();
    MenuSearchInput = React64.forwardRef((props, ref) => (
      // Update to use the styles object when core adds the class
      React64.createElement("div", Object.assign({}, props, { className: css(`${menu_default.menuSearch}-input`, props.className), ref }))
    ));
    MenuSearchInput.displayName = "MenuSearchInput";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuGroup.js
var React65, MenuGroupBase, MenuGroup;
var init_MenuGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuGroup.js"() {
    init_tslib_es6();
    React65 = __toESM(require_react());
    init_menu2();
    init_esm();
    MenuGroupBase = (_a) => {
      var { children, className = "", label = "", titleId, innerRef, labelHeadingLevel: HeadingLevel = "h1" } = _a, props = __rest(_a, ["children", "className", "label", "titleId", "innerRef", "labelHeadingLevel"]);
      const Wrapper = typeof label === "function" ? label : HeadingLevel;
      return React65.createElement(
        "section",
        Object.assign({}, props, { className: css(menu_default.menuGroup, className), ref: innerRef }),
        React65.createElement(
          React65.Fragment,
          null,
          ["function", "string"].includes(typeof label) ? React65.createElement(Wrapper, { className: css(menu_default.menuGroupTitle), id: titleId }, label) : label,
          children
        )
      );
    };
    MenuGroup = React65.forwardRef((props, ref) => React65.createElement(MenuGroupBase, Object.assign({}, props, { innerRef: ref })));
    MenuGroup.displayName = "MenuGroup";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_top_offset.js
var c_menu_m_flyout__menu_top_offset, c_menu_m_flyout_menu_top_offset_default;
var init_c_menu_m_flyout_menu_top_offset = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_top_offset.js"() {
    c_menu_m_flyout__menu_top_offset = {
      "name": "--pf-v5-c-menu--m-flyout__menu--top-offset",
      "value": "0px",
      "var": "var(--pf-v5-c-menu--m-flyout__menu--top-offset)"
    };
    c_menu_m_flyout_menu_top_offset_default = c_menu_m_flyout__menu_top_offset;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_m_left_right_offset.js
var c_menu_m_flyout__menu_m_left_right_offset, c_menu_m_flyout_menu_m_left_right_offset_default;
var init_c_menu_m_flyout_menu_m_left_right_offset = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_m_left_right_offset.js"() {
    c_menu_m_flyout__menu_m_left_right_offset = {
      "name": "--pf-v5-c-menu--m-flyout__menu--m-left--right-offset",
      "value": "0px",
      "var": "var(--pf-v5-c-menu--m-flyout__menu--m-left--right-offset)"
    };
    c_menu_m_flyout_menu_m_left_right_offset_default = c_menu_m_flyout__menu_m_left_right_offset;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_left_offset.js
var c_menu_m_flyout__menu_left_offset, c_menu_m_flyout_menu_left_offset_default;
var init_c_menu_m_flyout_menu_left_offset = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_left_offset.js"() {
    c_menu_m_flyout__menu_left_offset = {
      "name": "--pf-v5-c-menu--m-flyout__menu--left-offset",
      "value": "0px",
      "var": "var(--pf-v5-c-menu--m-flyout__menu--left-offset)"
    };
    c_menu_m_flyout_menu_left_offset_default = c_menu_m_flyout__menu_left_offset;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js
var ExternalLinkAltIconConfig, ExternalLinkAltIcon, external_link_alt_icon_default;
var init_external_link_alt_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js"() {
    init_createIcon();
    ExternalLinkAltIconConfig = {
      name: "ExternalLinkAltIcon",
      height: 512,
      width: 512,
      svgPath: "M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z",
      yOffset: 0,
      xOffset: 0
    };
    ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);
    external_link_alt_icon_default = ExternalLinkAltIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-left-icon.js
var AngleLeftIconConfig, AngleLeftIcon, angle_left_icon_default;
var init_angle_left_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/angle-left-icon.js"() {
    init_createIcon();
    AngleLeftIconConfig = {
      name: "AngleLeftIcon",
      height: 512,
      width: 256,
      svgPath: "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z",
      yOffset: 0,
      xOffset: 0
    };
    AngleLeftIcon = createIcon(AngleLeftIconConfig);
    angle_left_icon_default = AngleLeftIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/check-icon.js
var CheckIconConfig, CheckIcon, check_icon_default;
var init_check_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/check-icon.js"() {
    init_createIcon();
    CheckIconConfig = {
      name: "CheckIcon",
      height: 512,
      width: 512,
      svgPath: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
      yOffset: 0,
      xOffset: 0
    };
    CheckIcon = createIcon(CheckIconConfig);
    check_icon_default = CheckIcon;
  }
});

// node_modules/@patternfly/react-styles/css/components/Check/check.css
var init_check = __esm({
  "node_modules/@patternfly/react-styles/css/components/Check/check.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Check/check.mjs
var check_default;
var init_check2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Check/check.mjs"() {
    init_check();
    check_default = {
      "check": "pf-v5-c-check",
      "checkBody": "pf-v5-c-check__body",
      "checkDescription": "pf-v5-c-check__description",
      "checkInput": "pf-v5-c-check__input",
      "checkLabel": "pf-v5-c-check__label",
      "checkLabelRequired": "pf-v5-c-check__label-required",
      "modifiers": {
        "standalone": "pf-m-standalone",
        "disabled": "pf-m-disabled"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
var React66, defaultOnChange, Checkbox;
var init_Checkbox = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js"() {
    init_tslib_es6();
    React66 = __toESM(require_react());
    init_check2();
    init_esm();
    init_helpers();
    init_htmlConstants();
    defaultOnChange = () => {
    };
    Checkbox = class _Checkbox extends React66.Component {
      constructor(props) {
        super(props);
        this.handleChange = (event) => {
          this.props.onChange(event, event.currentTarget.checked);
        };
        this.state = {
          ouiaStateId: getDefaultOUIAId(_Checkbox.displayName)
        };
      }
      render() {
        const _a = this.props, { "aria-label": ariaLabel, className, inputClassName, onChange, isLabelWrapped, isLabelBeforeButton, isValid, isDisabled, isRequired, isChecked, label, checked, defaultChecked, description, body, ouiaId, ouiaSafe, component } = _a, props = __rest(_a, ["aria-label", "className", "inputClassName", "onChange", "isLabelWrapped", "isLabelBeforeButton", "isValid", "isDisabled", "isRequired", "isChecked", "label", "checked", "defaultChecked", "description", "body", "ouiaId", "ouiaSafe", "component"]);
        if (!props.id) {
          console.error("Checkbox:", "id is required to make input accessible");
        }
        const checkedProps = {};
        if ([true, false].includes(checked) || isChecked === true) {
          checkedProps.checked = checked || isChecked;
        }
        if (onChange !== defaultOnChange) {
          checkedProps.checked = isChecked;
        }
        if ([false, true].includes(defaultChecked)) {
          checkedProps.defaultChecked = defaultChecked;
        }
        const inputRendered = React66.createElement("input", Object.assign({}, props, { className: css(check_default.checkInput, inputClassName), type: "checkbox", onChange: this.handleChange, "aria-invalid": !isValid, "aria-label": ariaLabel, disabled: isDisabled, required: isRequired, ref: (elem) => elem && (elem.indeterminate = isChecked === null) }, checkedProps, getOUIAProps(_Checkbox.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
        const wrapWithLabel = isLabelWrapped && !component || component === "label";
        const Label2 = wrapWithLabel ? "span" : "label";
        const labelRendered = label ? React66.createElement(
          Label2,
          { className: css(check_default.checkLabel, isDisabled && check_default.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0 },
          label,
          isRequired && React66.createElement("span", { className: css(check_default.checkLabelRequired), "aria-hidden": "true" }, ASTERISK)
        ) : null;
        const Component44 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
        checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;
        return React66.createElement(
          Component44,
          { className: css(check_default.check, !label && check_default.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0 },
          isLabelBeforeButton ? React66.createElement(
            React66.Fragment,
            null,
            labelRendered,
            inputRendered
          ) : React66.createElement(
            React66.Fragment,
            null,
            inputRendered,
            labelRendered
          ),
          description && React66.createElement("span", { className: css(check_default.checkDescription) }, description),
          body && React66.createElement("span", { className: css(check_default.checkBody) }, body)
        );
      }
    };
    Checkbox.displayName = "Checkbox";
    Checkbox.defaultProps = {
      className: "",
      isLabelWrapped: false,
      isValid: true,
      isDisabled: false,
      isRequired: false,
      isChecked: false,
      onChange: defaultOnChange,
      ouiaSafe: true
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Checkbox/index.js
var init_Checkbox2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Checkbox/index.js"() {
    init_Checkbox();
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/star-icon.js
var StarIconConfig, StarIcon, star_icon_default;
var init_star_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/star-icon.js"() {
    init_createIcon();
    StarIconConfig = {
      name: "StarIcon",
      height: 512,
      width: 576,
      svgPath: "M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z",
      yOffset: 0,
      xOffset: 0
    };
    StarIcon = createIcon(StarIconConfig);
    star_icon_default = StarIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
var React67, MenuItemActionBase, MenuItemAction;
var init_MenuItemAction = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js"() {
    init_tslib_es6();
    React67 = __toESM(require_react());
    init_menu2();
    init_esm();
    init_star_icon();
    init_MenuContext();
    MenuItemActionBase = (_a) => {
      var { className = "", icon, onClick, "aria-label": ariaLabel, isFavorited = null, isDisabled, actionId, innerRef } = _a, props = __rest(_a, ["className", "icon", "onClick", "aria-label", "isFavorited", "isDisabled", "actionId", "innerRef"]);
      return React67.createElement(MenuContext.Consumer, null, ({ onActionClick }) => React67.createElement(MenuItemContext.Consumer, null, ({ itemId, isDisabled: isDisabledContext }) => {
        const onClickButton = (event) => {
          onClick && onClick(event);
          onActionClick && onActionClick(event, itemId, actionId);
        };
        return React67.createElement(
          "button",
          Object.assign({ className: css(menu_default.menuItemAction, isFavorited !== null && menu_default.modifiers.favorite, isFavorited && menu_default.modifiers.favorited, className), "aria-label": ariaLabel, onClick: onClickButton }, (isDisabled === true || isDisabledContext === true) && { disabled: true }, { ref: innerRef, tabIndex: -1 }, props),
          React67.createElement("span", { className: css(menu_default.menuItemActionIcon) }, icon === "favorites" || isFavorited !== null ? React67.createElement(star_icon_default, { "aria-hidden": true }) : icon)
        );
      }));
    };
    MenuItemAction = React67.forwardRef((props, ref) => React67.createElement(MenuItemActionBase, Object.assign({}, props, { innerRef: ref })));
    MenuItemAction.displayName = "MenuItemAction";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
var React68, FlyoutContext, MenuItemBase, MenuItem;
var init_MenuItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js"() {
    init_tslib_es6();
    React68 = __toESM(require_react());
    init_menu2();
    init_esm();
    init_c_menu_m_flyout_menu_top_offset();
    init_c_menu_m_flyout_menu_m_left_right_offset();
    init_c_menu_m_flyout_menu_left_offset();
    init_external_link_alt_icon();
    init_angle_right_icon();
    init_angle_left_icon();
    init_check_icon();
    init_Checkbox2();
    init_MenuContext();
    init_MenuItemAction();
    init_Tooltip2();
    init_util();
    init_useIsomorphicLayout();
    init_GenerateId();
    FlyoutContext = React68.createContext({
      direction: "right"
    });
    MenuItemBase = (_a) => {
      var { children, className, itemId = null, to, hasCheckbox = false, isActive = null, isFavorited = null, isLoadButton = false, isLoading = false, flyoutMenu, direction, description = null, onClick = () => {
      }, component = "button", isDisabled = false, isAriaDisabled = false, isExternalLink = false, isSelected = null, isFocused, isDanger = false, icon, actions, onShowFlyout, drilldownMenu, isOnPath, innerRef, id, "aria-label": ariaLabel, tooltipProps, rel, target, download } = _a, props = __rest(_a, ["children", "className", "itemId", "to", "hasCheckbox", "isActive", "isFavorited", "isLoadButton", "isLoading", "flyoutMenu", "direction", "description", "onClick", "component", "isDisabled", "isAriaDisabled", "isExternalLink", "isSelected", "isFocused", "isDanger", "icon", "actions", "onShowFlyout", "drilldownMenu", "isOnPath", "innerRef", "id", "aria-label", "tooltipProps", "rel", "target", "download"]);
      const { menuId, parentMenu, onSelect, onActionClick, activeItemId, selected, drilldownItemPath, onDrillIn, onDrillOut, flyoutRef, setFlyoutRef, disableHover, role: menuRole } = React68.useContext(MenuContext);
      let Component44 = to ? "a" : component;
      if (hasCheckbox && !to) {
        Component44 = "label";
      }
      const [flyoutTarget, setFlyoutTarget] = React68.useState(null);
      const flyoutContext = React68.useContext(FlyoutContext);
      const [flyoutXDirection, setFlyoutXDirection] = React68.useState(flyoutContext.direction);
      const ref = React68.useRef();
      const flyoutVisible = ref === flyoutRef;
      const hasFlyout = flyoutMenu !== void 0;
      const showFlyout = (show) => {
        if (!flyoutVisible && show) {
          setFlyoutRef(ref);
        } else if (flyoutVisible && !show) {
          setFlyoutRef(null);
        }
        onShowFlyout && show && onShowFlyout();
      };
      useIsomorphicLayoutEffect(() => {
        if (hasFlyout && ref.current && canUseDOM) {
          const flyoutMenu2 = ref.current.lastElementChild;
          if (flyoutMenu2 && flyoutMenu2.classList.contains(menu_default.menu)) {
            const origin = ref.current.getClientRects()[0];
            const rect = flyoutMenu2.getClientRects()[0];
            if (origin && rect) {
              const spaceLeftLeft = origin.x - rect.width;
              const spaceLeftRight = window.innerWidth - origin.x - origin.width - rect.width;
              let xDir = flyoutXDirection;
              if (spaceLeftRight < 0 && xDir !== "left") {
                setFlyoutXDirection("left");
                xDir = "left";
              } else if (spaceLeftLeft < 0 && xDir !== "right") {
                setFlyoutXDirection("right");
                xDir = "right";
              }
              let xOffset = 0;
              if (spaceLeftLeft < 0 && spaceLeftRight < 0) {
                xOffset = xDir === "right" ? -spaceLeftRight : -spaceLeftLeft;
              }
              if (xDir === "left") {
                flyoutMenu2.classList.add(menu_default.modifiers.left);
                flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_m_left_right_offset_default.name, `-${xOffset}px`);
              } else {
                flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_left_offset_default.name, `-${xOffset}px`);
              }
              const spaceLeftBot = window.innerHeight - origin.y - rect.height;
              const spaceLeftTop = window.innerHeight - rect.height;
              if (spaceLeftTop < 0 && spaceLeftBot < 0) {
              } else if (spaceLeftBot < 0) {
                flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_top_offset_default.name, `${spaceLeftBot}px`);
              }
            }
          }
        }
      }, [flyoutVisible, flyoutMenu]);
      React68.useEffect(() => {
        setFlyoutXDirection(flyoutContext.direction);
      }, [flyoutContext]);
      React68.useEffect(() => {
        if (flyoutTarget) {
          if (flyoutVisible) {
            const flyoutMenu2 = flyoutTarget.nextElementSibling;
            const flyoutItems = Array.from(flyoutMenu2.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)));
            flyoutItems[0].firstChild.focus();
          } else {
            flyoutTarget.focus();
          }
        }
      }, [flyoutVisible, flyoutTarget]);
      const handleFlyout = (event) => {
        const key = event.key;
        const target2 = event.target;
        const type = event.type;
        if (key === " " || key === "Enter" || key === "ArrowRight" || type === "click") {
          event.stopPropagation();
          event.preventDefault();
          if (!flyoutVisible) {
            showFlyout(true);
            setFlyoutTarget(target2);
          }
        }
        if (key === "Escape" || key === "ArrowLeft") {
          if (flyoutVisible) {
            event.stopPropagation();
            showFlyout(false);
          }
        }
      };
      const onItemSelect = (event, onSelect2) => {
        if (!isAriaDisabled) {
          onSelect2 && onSelect2(event, itemId);
          onClick && onClick(event);
        }
      };
      const _isOnPath = isOnPath && isOnPath || drilldownItemPath && drilldownItemPath.includes(itemId) || false;
      let drill;
      if (direction) {
        if (direction === "down") {
          drill = (event) => onDrillIn && onDrillIn(event, menuId, typeof drilldownMenu === "function" ? drilldownMenu().props.id : drilldownMenu.props.id, itemId);
        } else {
          drill = (event) => onDrillOut && onDrillOut(event, parentMenu, itemId);
        }
      }
      let additionalProps = {};
      if (Component44 === "a") {
        additionalProps = {
          href: to,
          "aria-disabled": isDisabled || isAriaDisabled ? true : null,
          // prevent invalid 'disabled' attribute on <a> tags
          disabled: null,
          target: isExternalLink ? "_blank" : target,
          rel,
          download
        };
      } else if (Component44 === "button") {
        additionalProps = {
          type: "button",
          "aria-disabled": isAriaDisabled ? true : null
        };
      }
      if (isOnPath) {
        additionalProps["aria-expanded"] = true;
      } else if (hasFlyout) {
        additionalProps["aria-haspopup"] = "menu";
        additionalProps["aria-expanded"] = flyoutVisible;
      }
      const getAriaCurrent = () => {
        if (isActive !== null) {
          if (isActive) {
            return "page";
          } else {
            return null;
          }
        } else if (itemId !== null && activeItemId !== null) {
          return itemId === activeItemId;
        }
        return null;
      };
      const getIsSelected = () => {
        if (isSelected !== null) {
          return isSelected;
        } else if (selected !== null && itemId !== null) {
          return Array.isArray(selected) && selected.includes(itemId) || itemId === selected;
        }
        return false;
      };
      const onMouseOver = () => {
        if (disableHover) {
          return;
        }
        if (hasFlyout) {
          showFlyout(true);
        } else {
          setFlyoutRef(null);
        }
      };
      React68.useEffect(() => {
        if (isFocused && ref.current) {
          const itemEl = ref.current;
          const parentListEl = itemEl.parentElement;
          if (parentListEl) {
            const isAboveTop = itemEl.offsetTop - parentListEl.offsetTop < parentListEl.scrollTop;
            const isBelowBottom = itemEl.offsetTop - parentListEl.offsetTop + itemEl.clientHeight;
            if (isAboveTop || isBelowBottom) {
              itemEl.scrollIntoView({ behavior: "auto", block: "nearest" });
            }
          }
        }
      }, [isFocused]);
      const isSelectMenu = menuRole === "listbox";
      const renderItem = React68.createElement(
        React68.Fragment,
        null,
        React68.createElement(GenerateId, null, (randomId) => React68.createElement(
          Component44,
          Object.assign({ id, tabIndex: -1, className: css(menu_default.menuItem, getIsSelected() && !hasCheckbox && menu_default.modifiers.selected, className), "aria-current": getAriaCurrent() }, !hasCheckbox && { disabled: isDisabled, "aria-label": ariaLabel }, !hasCheckbox && !flyoutMenu && { role: isSelectMenu ? "option" : "menuitem" }, !hasCheckbox && !flyoutMenu && isSelectMenu && { "aria-selected": getIsSelected() }, { ref: innerRef }, !hasCheckbox && {
            onClick: (event) => {
              if (!isAriaDisabled) {
                onItemSelect(event, onSelect);
                drill && drill(event);
                flyoutMenu && handleFlyout(event);
              } else {
                event.preventDefault();
              }
            }
          }, hasCheckbox && { htmlFor: randomId }, additionalProps),
          React68.createElement(
            "span",
            { className: css(menu_default.menuItemMain) },
            direction === "up" && React68.createElement(
              "span",
              { className: css(menu_default.menuItemToggleIcon) },
              React68.createElement(angle_left_icon_default, { "aria-hidden": true })
            ),
            icon && React68.createElement("span", { className: css(menu_default.menuItemIcon) }, icon),
            hasCheckbox && React68.createElement(
              "span",
              { className: css(menu_default.menuItemCheck) },
              React68.createElement(Checkbox, { id: randomId, component: "span", isChecked: isSelected || false, onChange: (event) => onItemSelect(event, onSelect), isDisabled, "aria-disabled": isAriaDisabled })
            ),
            React68.createElement("span", { className: css(menu_default.menuItemText) }, children),
            isExternalLink && React68.createElement(
              "span",
              { className: css(menu_default.menuItemExternalIcon) },
              React68.createElement(external_link_alt_icon_default, { "aria-hidden": true })
            ),
            (flyoutMenu || direction === "down") && React68.createElement(
              "span",
              { className: css(menu_default.menuItemToggleIcon) },
              React68.createElement(angle_right_icon_default, { "aria-hidden": true })
            ),
            getIsSelected() && React68.createElement(
              "span",
              { className: css(menu_default.menuItemSelectIcon) },
              React68.createElement(check_icon_default, { "aria-hidden": true })
            )
          ),
          description && direction !== "up" && React68.createElement(
            "span",
            { className: css(menu_default.menuItemDescription) },
            React68.createElement("span", null, description)
          )
        )),
        flyoutVisible && React68.createElement(
          MenuContext.Provider,
          { value: { disableHover } },
          React68.createElement(FlyoutContext.Provider, { value: { direction: flyoutXDirection } }, flyoutMenu)
        ),
        typeof drilldownMenu === "function" ? drilldownMenu() : drilldownMenu,
        React68.createElement(
          MenuItemContext.Provider,
          { value: { itemId, isDisabled } },
          actions,
          isFavorited !== null && React68.createElement(MenuItemAction, { icon: "favorites", isFavorited, "aria-label": isFavorited ? "starred" : "not starred", onClick: (event) => onActionClick(event, itemId), tabIndex: -1, actionId: "fav" })
        )
      );
      return React68.createElement("li", Object.assign({ className: css(menu_default.menuListItem, isDisabled && menu_default.modifiers.disabled, isAriaDisabled && menu_default.modifiers.ariaDisabled, _isOnPath && menu_default.modifiers.currentPath, isLoadButton && menu_default.modifiers.load, isLoading && menu_default.modifiers.loading, isFocused && menu_default.modifiers.focus, isDanger && menu_default.modifiers.danger, className), onMouseOver: () => {
        if (!isAriaDisabled) {
          onMouseOver();
        }
      } }, flyoutMenu && !isAriaDisabled && { onKeyDown: handleFlyout }, { ref, role: !hasCheckbox ? "none" : "menuitem" }, hasCheckbox && { "aria-label": ariaLabel }, props), tooltipProps ? React68.createElement(Tooltip, Object.assign({}, tooltipProps), renderItem) : renderItem);
    };
    MenuItem = React68.forwardRef((props, ref) => React68.createElement(MenuItemBase, Object.assign({}, props, { innerRef: ref })));
    MenuItem.displayName = "MenuItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuList.js
var React69, MenuList;
var init_MenuList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuList.js"() {
    init_tslib_es6();
    React69 = __toESM(require_react());
    init_menu2();
    init_esm();
    init_MenuContext();
    MenuList = (_a) => {
      var { children = null, className, isAriaMultiselectable = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isAriaMultiselectable", "aria-label"]);
      const { role } = React69.useContext(MenuContext);
      return React69.createElement("ul", Object.assign({ role }, role === "listbox" && { "aria-multiselectable": isAriaMultiselectable }, { className: css(menu_default.menuList, className), "aria-label": ariaLabel }, props), children);
    };
    MenuList.displayName = "MenuList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/DrilldownMenu.js
var import_react6, DrilldownMenu;
var init_DrilldownMenu = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/DrilldownMenu.js"() {
    init_tslib_es6();
    import_react6 = __toESM(require_react());
    init_Menu();
    init_MenuContent();
    init_MenuList();
    init_MenuContext();
    DrilldownMenu = (_a) => {
      var { children, id, isMenuDrilledIn = false, getHeight } = _a, props = __rest(_a, ["children", "id", "isMenuDrilledIn", "getHeight"]);
      return (
        /* eslint-disable @typescript-eslint/no-unused-vars */
        import_react6.default.createElement(MenuContext.Consumer, null, (_a2) => {
          var { menuId, parentMenu, flyoutRef, setFlyoutRef, disableHover } = _a2, context = __rest(_a2, ["menuId", "parentMenu", "flyoutRef", "setFlyoutRef", "disableHover"]);
          return import_react6.default.createElement(
            Menu,
            Object.assign({ id, parentMenu: menuId, isMenuDrilledIn, isRootMenu: false, ref: import_react6.default.createRef() }, context, props),
            import_react6.default.createElement(
              MenuContent,
              { getHeight },
              import_react6.default.createElement(MenuList, null, children)
            )
          );
        })
      );
    };
    DrilldownMenu.displayName = "DrilldownMenu";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuBreadcrumb.js
var import_react7, MenuBreadcrumb;
var init_MenuBreadcrumb = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuBreadcrumb.js"() {
    init_tslib_es6();
    import_react7 = __toESM(require_react());
    init_menu2();
    init_esm();
    MenuBreadcrumb = (_a) => {
      var { children } = _a, props = __rest(_a, ["children"]);
      return import_react7.default.createElement("div", Object.assign({ className: css(menu_default.menuBreadcrumb) }, props), children);
    };
    MenuBreadcrumb.displayName = "MenuBreadcrumb";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContainer.js
var import_react8, MenuContainer;
var init_MenuContainer = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContainer.js"() {
    import_react8 = __toESM(require_react());
    init_Popper2();
    MenuContainer = ({ menu, menuRef, isOpen, toggle, toggleRef, onOpenChange, zIndex = 9999, popperProps, onOpenChangeKeys = ["Escape", "Tab"] }) => {
      import_react8.default.useEffect(() => {
        const handleMenuKeys = (event) => {
          var _a, _b, _c;
          if (isOpen && onOpenChange && ((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            if (onOpenChangeKeys.includes(event.key)) {
              onOpenChange(false);
              (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
            }
          }
        };
        const handleClick = (event) => {
          var _a, _b, _c;
          if (isOpen && ((_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
            setTimeout(() => {
              var _a2;
              const firstElement = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector('li button:not(:disabled),li input:not(:disabled),li a:not([aria-disabled="true"])');
              firstElement && firstElement.focus();
            }, 0);
          }
          if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
              onOpenChange(false);
            }
          }
        };
        window.addEventListener("keydown", handleMenuKeys);
        window.addEventListener("click", handleClick);
        return () => {
          window.removeEventListener("keydown", handleMenuKeys);
          window.removeEventListener("click", handleClick);
        };
      }, [isOpen, menuRef, onOpenChange, onOpenChangeKeys, toggleRef]);
      return import_react8.default.createElement(Popper, Object.assign({ trigger: toggle, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
    };
    MenuContainer.displayName = "MenuContainer";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/index.js
var init_Menu2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Menu/index.js"() {
    init_Menu();
    init_MenuContent();
    init_MenuFooter();
    init_MenuSearch();
    init_MenuSearchInput();
    init_MenuGroup();
    init_MenuItem();
    init_MenuList();
    init_MenuItemAction();
    init_DrilldownMenu();
    init_MenuBreadcrumb();
    init_MenuContainer();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js
var import_react9, SelectBase, Select;
var init_Select = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js"() {
    init_tslib_es6();
    import_react9 = __toESM(require_react());
    init_esm();
    init_Menu2();
    init_Popper2();
    init_helpers();
    SelectBase = (_a) => {
      var { children, className, onSelect, isOpen, selected, toggle, shouldFocusToggleOnSelect = false, onOpenChange, onOpenChangeKeys = ["Escape", "Tab"], isPlain, innerRef, zIndex = 9999, role = "listbox", popperProps, menuHeight, maxMenuHeight, isScrollable } = _a, props = __rest(_a, ["children", "className", "onSelect", "isOpen", "selected", "toggle", "shouldFocusToggleOnSelect", "onOpenChange", "onOpenChangeKeys", "isPlain", "innerRef", "zIndex", "role", "popperProps", "menuHeight", "maxMenuHeight", "isScrollable"]);
      const localMenuRef = import_react9.default.useRef();
      const localToggleRef = import_react9.default.useRef();
      const menuRef = innerRef || localMenuRef;
      const toggleRef = typeof toggle === "function" || typeof toggle !== "function" && !toggle.toggleRef ? localToggleRef : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;
      import_react9.default.useEffect(() => {
        const handleMenuKeys = (event) => {
          var _a2, _b, _c;
          if (isOpen && onOpenChange && (((_a2 = menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
            if (onOpenChangeKeys.includes(event.key)) {
              event.preventDefault();
              onOpenChange(false);
              (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
            }
          }
        };
        const handleClick = (event) => {
          var _a2, _b, _c;
          if (isOpen && ((_a2 = toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
            setTimeout(() => {
              var _a3;
              const firstElement = (_a3 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector("li button:not(:disabled),li input:not(:disabled)");
              firstElement && firstElement.focus();
            }, 0);
          }
          if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
              onOpenChange(false);
            }
          }
        };
        window.addEventListener("keydown", handleMenuKeys);
        window.addEventListener("click", handleClick);
        return () => {
          window.removeEventListener("keydown", handleMenuKeys);
          window.removeEventListener("click", handleClick);
        };
      }, [isOpen, menuRef, toggleRef, onOpenChange, onOpenChangeKeys]);
      const menu = import_react9.default.createElement(
        Menu,
        Object.assign({ role, className: css(className), ref: menuRef, onSelect: (event, value) => {
          onSelect && onSelect(event, value);
          shouldFocusToggleOnSelect && toggleRef.current.focus();
        }, isPlain, selected, isScrollable }, getOUIAProps(Select.displayName, props.ouiaId !== void 0 ? props.ouiaId : getDefaultOUIAId(Select.displayName), props.ouiaSafe !== void 0 ? props.ouiaSafe : true), props),
        import_react9.default.createElement(MenuContent, { menuHeight, maxMenuHeight }, children)
      );
      return import_react9.default.createElement(Popper, Object.assign({ trigger: typeof toggle === "function" ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
    };
    Select = import_react9.default.forwardRef((props, ref) => import_react9.default.createElement(SelectBase, Object.assign({ innerRef: ref }, props)));
    Select.displayName = "Select";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Select/SelectGroup.js
var import_react10, SelectGroup;
var init_SelectGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Select/SelectGroup.js"() {
    init_tslib_es6();
    import_react10 = __toESM(require_react());
    init_esm();
    init_Menu2();
    SelectGroup = (_a) => {
      var { children, className, label } = _a, props = __rest(_a, ["children", "className", "label"]);
      return import_react10.default.createElement(MenuGroup, Object.assign({ className: css(className), label }, props), children);
    };
    SelectGroup.displayName = "SelectGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Select/SelectList.js
var import_react11, SelectList;
var init_SelectList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Select/SelectList.js"() {
    init_tslib_es6();
    import_react11 = __toESM(require_react());
    init_esm();
    init_Menu2();
    SelectList = (_a) => {
      var { children, className, isAriaMultiselectable = false } = _a, props = __rest(_a, ["children", "className", "isAriaMultiselectable"]);
      return import_react11.default.createElement(MenuList, Object.assign({ isAriaMultiselectable, className: css(className) }, props), children);
    };
    SelectList.displayName = "SelectList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Select/SelectOption.js
var import_react12, SelectOptionBase, SelectOption;
var init_SelectOption = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Select/SelectOption.js"() {
    init_tslib_es6();
    import_react12 = __toESM(require_react());
    init_esm();
    init_Menu2();
    SelectOptionBase = (_a) => {
      var { children, className, innerRef, value } = _a, props = __rest(_a, ["children", "className", "innerRef", "value"]);
      return import_react12.default.createElement(MenuItem, Object.assign({ itemId: value, ref: innerRef, className: css(className) }, props), children);
    };
    SelectOption = import_react12.default.forwardRef((props, ref) => import_react12.default.createElement(SelectOptionBase, Object.assign({}, props, { innerRef: ref })));
    SelectOption.displayName = "SelectOption";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Select/index.js
var init_Select2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Select/index.js"() {
    init_Select();
    init_SelectGroup();
    init_SelectList();
    init_SelectOption();
  }
});

// node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.css
var init_menu_toggle = __esm({
  "node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.mjs
var menu_toggle_default;
var init_menu_toggle2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.mjs"() {
    init_menu_toggle();
    menu_toggle_default = {
      "check": "pf-v5-c-check",
      "checkInput": "pf-v5-c-check__input",
      "menuToggle": "pf-v5-c-menu-toggle",
      "menuToggleButton": "pf-v5-c-menu-toggle__button",
      "menuToggleControls": "pf-v5-c-menu-toggle__controls",
      "menuToggleCount": "pf-v5-c-menu-toggle__count",
      "menuToggleIcon": "pf-v5-c-menu-toggle__icon",
      "menuToggleStatusIcon": "pf-v5-c-menu-toggle__status-icon",
      "menuToggleText": "pf-v5-c-menu-toggle__text",
      "menuToggleToggleIcon": "pf-v5-c-menu-toggle__toggle-icon",
      "modifiers": {
        "primary": "pf-m-primary",
        "secondary": "pf-m-secondary",
        "expanded": "pf-m-expanded",
        "plain": "pf-m-plain",
        "text": "pf-m-text",
        "fullHeight": "pf-m-full-height",
        "disabled": "pf-m-disabled",
        "typeahead": "pf-m-typeahead",
        "splitButton": "pf-m-split-button",
        "action": "pf-m-action",
        "active": "pf-m-active",
        "fullWidth": "pf-m-full-width",
        "success": "pf-m-success",
        "warning": "pf-m-warning",
        "danger": "pf-m-danger"
      },
      "textInputGroup": "pf-v5-c-text-input-group",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js
var CaretDownIconConfig, CaretDownIcon, caret_down_icon_default;
var init_caret_down_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js"() {
    init_createIcon();
    CaretDownIconConfig = {
      name: "CaretDownIcon",
      height: 512,
      width: 320,
      svgPath: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
      yOffset: 0,
      xOffset: 0
    };
    CaretDownIcon = createIcon(CaretDownIconConfig);
    caret_down_icon_default = CaretDownIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
var React77, MenuToggleStatus, MenuToggleBase, MenuToggle;
var init_MenuToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js"() {
    init_tslib_es6();
    React77 = __toESM(require_react());
    init_menu_toggle2();
    init_esm();
    init_caret_down_icon();
    init_check_circle_icon();
    init_exclamation_circle_icon();
    init_exclamation_triangle_icon();
    (function(MenuToggleStatus2) {
      MenuToggleStatus2["success"] = "success";
      MenuToggleStatus2["danger"] = "danger";
      MenuToggleStatus2["warning"] = "warning";
    })(MenuToggleStatus || (MenuToggleStatus = {}));
    MenuToggleBase = class extends React77.Component {
      constructor() {
        super(...arguments);
        this.displayName = "MenuToggleBase";
      }
      render() {
        const _a = this.props, { children, className, icon, badge, isExpanded, isDisabled, isFullHeight, isFullWidth, splitButtonOptions, variant, status, statusIcon, innerRef, onClick, "aria-label": ariaLabel } = _a, otherProps = __rest(_a, ["children", "className", "icon", "badge", "isExpanded", "isDisabled", "isFullHeight", "isFullWidth", "splitButtonOptions", "variant", "status", "statusIcon", "innerRef", "onClick", "aria-label"]);
        const isPlain = variant === "plain";
        const isPlainText = variant === "plainText";
        const isTypeahead = variant === "typeahead";
        let _statusIcon = statusIcon;
        if (!statusIcon) {
          switch (status) {
            case MenuToggleStatus.success:
              _statusIcon = React77.createElement(check_circle_icon_default, { "aria-hidden": "true" });
              break;
            case MenuToggleStatus.warning:
              _statusIcon = React77.createElement(exclamation_triangle_icon_default, { "aria-hidden": "true" });
              break;
            case MenuToggleStatus.danger:
              _statusIcon = React77.createElement(exclamation_circle_icon_default, { "aria-hidden": "true" });
              break;
          }
        }
        const toggleControls = React77.createElement(
          "span",
          { className: css(menu_toggle_default.menuToggleControls) },
          status !== void 0 && React77.createElement("span", { className: css(menu_toggle_default.menuToggleStatusIcon) }, _statusIcon),
          React77.createElement(
            "span",
            { className: css(menu_toggle_default.menuToggleToggleIcon) },
            React77.createElement(caret_down_icon_default, { "aria-hidden": true })
          )
        );
        const content = React77.createElement(
          React77.Fragment,
          null,
          icon && React77.createElement("span", { className: css(menu_toggle_default.menuToggleIcon) }, icon),
          isTypeahead ? children : React77.createElement("span", { className: css(menu_toggle_default.menuToggleText) }, children),
          React77.isValidElement(badge) && React77.createElement("span", { className: css(menu_toggle_default.menuToggleCount) }, badge),
          isTypeahead ? React77.createElement("button", { type: "button", className: css(menu_toggle_default.menuToggleButton), "aria-expanded": isExpanded, onClick, "aria-label": ariaLabel || "Menu toggle" }, toggleControls) : toggleControls
        );
        const commonStyles = css(menu_toggle_default.menuToggle, isExpanded && menu_toggle_default.modifiers.expanded, variant === "primary" && menu_toggle_default.modifiers.primary, variant === "secondary" && menu_toggle_default.modifiers.secondary, status && menu_toggle_default.modifiers[status], (isPlain || isPlainText) && menu_toggle_default.modifiers.plain, isPlainText && menu_toggle_default.modifiers.text, isFullHeight && menu_toggle_default.modifiers.fullHeight, isFullWidth && menu_toggle_default.modifiers.fullWidth, isDisabled && menu_toggle_default.modifiers.disabled, className);
        const componentProps = Object.assign(Object.assign({ children: isPlain ? children : content }, isDisabled && { disabled: true }), otherProps);
        if (isTypeahead) {
          return React77.createElement("div", Object.assign({ ref: innerRef, className: css(commonStyles, menu_toggle_default.modifiers.typeahead) }, componentProps));
        }
        if (splitButtonOptions) {
          return React77.createElement(
            "div",
            { ref: innerRef, className: css(commonStyles, menu_toggle_default.modifiers.splitButton, (splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.variant) === "action" && menu_toggle_default.modifiers.action) },
            splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.items,
            React77.createElement(
              "button",
              Object.assign({ className: css(menu_toggle_default.menuToggleButton), type: "button", "aria-expanded": isExpanded, "aria-label": ariaLabel, disabled: isDisabled, onClick }, children && { style: { display: "flex", paddingLeft: "var(--pf-v5-global--spacer--sm)" } }, otherProps),
              children && React77.createElement("span", { className: css(menu_toggle_default.menuToggleText) }, children),
              toggleControls
            )
          );
        }
        return React77.createElement("button", Object.assign({ className: css(commonStyles), type: "button", "aria-label": ariaLabel, "aria-expanded": isExpanded, ref: innerRef, disabled: isDisabled, onClick }, componentProps));
      }
    };
    MenuToggleBase.defaultProps = {
      className: "",
      isExpanded: false,
      isDisabled: false,
      isFullWidth: false,
      isFullHeight: false
    };
    MenuToggle = React77.forwardRef((props, ref) => React77.createElement(MenuToggleBase, Object.assign({ innerRef: ref }, props)));
    MenuToggle.displayName = "MenuToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleAction.js
var React78, MenuToggleAction;
var init_MenuToggleAction = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleAction.js"() {
    init_tslib_es6();
    React78 = __toESM(require_react());
    init_menu_toggle2();
    init_esm();
    MenuToggleAction = class extends React78.Component {
      render() {
        const _a = this.props, { id, className, onClick, isDisabled, children } = _a, props = __rest(_a, ["id", "className", "onClick", "isDisabled", "children"]);
        return React78.createElement("button", Object.assign({ id, className: css(menu_toggle_default.menuToggleButton, className), onClick, type: "button", disabled: isDisabled }, props), children);
      }
    };
    MenuToggleAction.displayName = "MenuToggleAction";
    MenuToggleAction.defaultProps = {
      className: "",
      isDisabled: false,
      onClick: () => {
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleCheckbox.js
var React79, MenuToggleCheckbox;
var init_MenuToggleCheckbox = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleCheckbox.js"() {
    init_tslib_es6();
    React79 = __toESM(require_react());
    init_check2();
    init_esm();
    init_helpers();
    MenuToggleCheckbox = class _MenuToggleCheckbox extends React79.Component {
      constructor(props) {
        super(props);
        this.handleChange = (event) => {
          this.props.onChange(event.target.checked, event);
        };
        this.calculateChecked = () => {
          const { isChecked, defaultChecked } = this.props;
          if (isChecked === null) {
            return false;
          } else if (isChecked !== void 0) {
            return isChecked;
          }
          return defaultChecked;
        };
        this.state = {
          ouiaStateId: getDefaultOUIAId(_MenuToggleCheckbox.displayName)
        };
      }
      render() {
        const _a = this.props, {
          className,
          isValid,
          isDisabled,
          isChecked,
          children,
          ouiaId,
          ouiaSafe,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          onChange,
          defaultChecked,
          id
        } = _a, props = __rest(_a, ["className", "isValid", "isDisabled", "isChecked", "children", "ouiaId", "ouiaSafe", "onChange", "defaultChecked", "id"]);
        const text = children && React79.createElement("span", { className: css(check_default.checkLabel, className), "aria-hidden": "true", id }, children);
        return React79.createElement(
          "label",
          { className: css(check_default.check, !children && check_default.modifiers.standalone, className) },
          React79.createElement("input", Object.assign({ className: css(check_default.checkInput) }, this.calculateChecked() !== void 0 && { onChange: this.handleChange }, { name: id, type: "checkbox", ref: (elem) => elem && (elem.indeterminate = isChecked === null), "aria-invalid": !isValid, disabled: isDisabled }, defaultChecked !== void 0 ? { defaultChecked } : { checked: this.calculateChecked() }, getOUIAProps(_MenuToggleCheckbox.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props)),
          text
        );
      }
    };
    MenuToggleCheckbox.displayName = "MenuToggleCheckbox";
    MenuToggleCheckbox.defaultProps = {
      isValid: true,
      isDisabled: false,
      onChange: () => void 0
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/index.js
var init_MenuToggle2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/index.js"() {
    init_MenuToggle();
    init_MenuToggleAction();
    init_MenuToggleCheckbox();
  }
});

// node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.css
var init_input_group = __esm({
  "node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.mjs
var input_group_default;
var init_input_group2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.mjs"() {
    init_input_group();
    input_group_default = {
      "inputGroup": "pf-v5-c-input-group",
      "inputGroupItem": "pf-v5-c-input-group__item",
      "inputGroupText": "pf-v5-c-input-group__text",
      "modifiers": {
        "box": "pf-m-box",
        "plain": "pf-m-plain",
        "disabled": "pf-m-disabled",
        "fill": "pf-m-fill"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
var React80, InputGroupBase, InputGroup;
var init_InputGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js"() {
    init_tslib_es6();
    React80 = __toESM(require_react());
    init_input_group2();
    init_esm();
    InputGroupBase = (_a) => {
      var { className, children, innerRef } = _a, props = __rest(_a, ["className", "children", "innerRef"]);
      const ref = React80.useRef(null);
      const inputGroupRef = innerRef || ref;
      return React80.createElement("div", Object.assign({ ref: inputGroupRef, className: css(input_group_default.inputGroup, className) }, props), children);
    };
    InputGroupBase.displayName = "InputGroupBase";
    InputGroup = React80.forwardRef((props, ref) => React80.createElement(InputGroupBase, Object.assign({ innerRef: ref }, props)));
    InputGroup.displayName = "InputGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupItem.js
var React81, InputGroupItem;
var init_InputGroupItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupItem.js"() {
    init_tslib_es6();
    React81 = __toESM(require_react());
    init_input_group2();
    init_esm();
    InputGroupItem = (_a) => {
      var { className, children, isFill = false, isBox = false, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "children", "isFill", "isBox", "isPlain", "isDisabled"]);
      return React81.createElement("div", Object.assign({ className: css(input_group_default.inputGroupItem, isFill && input_group_default.modifiers.fill, isBox && input_group_default.modifiers.box, isPlain && input_group_default.modifiers.plain, isDisabled && input_group_default.modifiers.disabled, className) }, props), children);
    };
    InputGroupItem.displayName = "InputGroupItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupText.js
var React82, InputGroupText;
var init_InputGroupText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupText.js"() {
    init_tslib_es6();
    React82 = __toESM(require_react());
    init_input_group2();
    init_esm();
    init_InputGroupItem();
    InputGroupText = (_a) => {
      var { className, component = "span", children, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "component", "children", "isPlain", "isDisabled"]);
      const Component44 = component;
      return React82.createElement(
        InputGroupItem,
        { isPlain, isBox: true, isDisabled },
        React82.createElement(Component44, Object.assign({ className: css(input_group_default.inputGroupText, className) }, props), children)
      );
    };
    InputGroupText.displayName = "InputGroupText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/index.js
var init_InputGroup2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/InputGroup/index.js"() {
    init_InputGroup();
    init_InputGroupItem();
    init_InputGroupText();
  }
});

// node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.css
var init_calendar_month = __esm({
  "node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.mjs
var calendar_month_default;
var init_calendar_month2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.mjs"() {
    init_calendar_month();
    calendar_month_default = {
      "calendarMonth": "pf-v5-c-calendar-month",
      "calendarMonthCalendar": "pf-v5-c-calendar-month__calendar",
      "calendarMonthDate": "pf-v5-c-calendar-month__date",
      "calendarMonthDatesCell": "pf-v5-c-calendar-month__dates-cell",
      "calendarMonthDatesRow": "pf-v5-c-calendar-month__dates-row",
      "calendarMonthDay": "pf-v5-c-calendar-month__day",
      "calendarMonthDays": "pf-v5-c-calendar-month__days",
      "calendarMonthHeader": "pf-v5-c-calendar-month__header",
      "calendarMonthHeaderMonth": "pf-v5-c-calendar-month__header-month",
      "calendarMonthHeaderNavControl": "pf-v5-c-calendar-month__header-nav-control",
      "calendarMonthHeaderYear": "pf-v5-c-calendar-month__header-year",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "prevMonth": "pf-m-prev-month",
        "nextMonth": "pf-m-next-month",
        "current": "pf-m-current",
        "inRange": "pf-m-in-range",
        "startRange": "pf-m-start-range",
        "endRange": "pf-m-end-range",
        "adjacentMonth": "pf-m-adjacent-month",
        "selected": "pf-m-selected",
        "disabled": "pf-m-disabled",
        "hover": "pf-m-hover",
        "focus": "pf-m-focus"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/CalendarMonth.js
var import_react13, Weekday, buildCalendar, isSameDate, today, CalendarMonth;
var init_CalendarMonth = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/CalendarMonth.js"() {
    init_tslib_es6();
    import_react13 = __toESM(require_react());
    init_TextInput2();
    init_Button2();
    init_Select2();
    init_MenuToggle2();
    init_InputGroup2();
    init_angle_left_icon();
    init_angle_right_icon();
    init_esm();
    init_calendar_month2();
    init_util();
    init_datetimeUtils();
    (function(Weekday2) {
      Weekday2[Weekday2["Sunday"] = 0] = "Sunday";
      Weekday2[Weekday2["Monday"] = 1] = "Monday";
      Weekday2[Weekday2["Tuesday"] = 2] = "Tuesday";
      Weekday2[Weekday2["Wednesday"] = 3] = "Wednesday";
      Weekday2[Weekday2["Thursday"] = 4] = "Thursday";
      Weekday2[Weekday2["Friday"] = 5] = "Friday";
      Weekday2[Weekday2["Saturday"] = 6] = "Saturday";
    })(Weekday || (Weekday = {}));
    buildCalendar = (year, month, weekStart, validators) => {
      const defaultDate = new Date(year, month);
      const firstDayOfWeek = new Date(defaultDate);
      firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);
      const calendarWeeks = [];
      if (firstDayOfWeek.getMonth() === defaultDate.getMonth() && firstDayOfWeek.getDate() !== 1) {
        firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 7);
      }
      for (let i = 0; i < 6; i++) {
        const week = [];
        for (let j = 0; j < 7; j++) {
          const date = new Date(firstDayOfWeek);
          week.push({
            date,
            isValid: validators.every((validator) => validator(date))
          });
          firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);
        }
        calendarWeeks.push(week);
        if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {
          break;
        }
      }
      return calendarWeeks;
    };
    isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
    today = /* @__PURE__ */ new Date();
    CalendarMonth = (_a) => {
      var {
        date: dateProp,
        locale = void 0,
        monthFormat = (date) => date.toLocaleDateString(locale, { month: "long" }),
        weekdayFormat = (date) => date.toLocaleDateString(locale, { weekday: "narrow" }),
        longWeekdayFormat = (date) => date.toLocaleDateString(locale, { weekday: "long" }),
        dayFormat = (date) => date.getDate(),
        weekStart = 0,
        // Use the American Sunday as a default
        onChange = () => {
        },
        validators = [() => true],
        className,
        onSelectToggle = () => {
        },
        onMonthChange = () => {
        },
        rangeStart,
        prevMonthAriaLabel = "Previous month",
        nextMonthAriaLabel = "Next month",
        yearInputAriaLabel = "Select year",
        cellAriaLabel,
        isDateFocused = false,
        inlineProps
      } = _a, props = __rest(_a, ["date", "locale", "monthFormat", "weekdayFormat", "longWeekdayFormat", "dayFormat", "weekStart", "onChange", "validators", "className", "onSelectToggle", "onMonthChange", "rangeStart", "prevMonthAriaLabel", "nextMonthAriaLabel", "yearInputAriaLabel", "cellAriaLabel", "isDateFocused", "inlineProps"]);
      const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((monthNum) => new Date(1990, monthNum)).map(monthFormat);
      const [isSelectOpen, setIsSelectOpen] = import_react13.default.useState(false);
      const getInitialDate = () => {
        if (isValidDate(dateProp)) {
          return dateProp;
        }
        if (isValidDate(rangeStart)) {
          return rangeStart;
        }
        return today;
      };
      const initialDate = getInitialDate();
      const [focusedDate, setFocusedDate] = import_react13.default.useState(initialDate);
      const yearFormat = (date) => date.getFullYear();
      const yearFormatted = yearFormat(focusedDate);
      const [yearInput, setYearInput] = import_react13.default.useState(yearFormatted.toString());
      const [hoveredDate, setHoveredDate] = import_react13.default.useState(new Date(focusedDate));
      const focusRef = import_react13.default.useRef();
      const [hiddenMonthId] = import_react13.default.useState(getUniqueId("hidden-month-span"));
      const [shouldFocus, setShouldFocus] = import_react13.default.useState(false);
      const isValidated = (date) => validators.every((validator) => validator(date));
      const focusedDateValidated = isValidated(focusedDate);
      (0, import_react13.useEffect)(() => {
        if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {
          setFocusedDate(dateProp);
        } else if (!dateProp) {
          setFocusedDate(today);
        }
      }, [dateProp]);
      (0, import_react13.useEffect)(() => {
        if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {
          focusRef.current.focus();
        }
      }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);
      const onMonthClick = (ev, newDate) => {
        setFocusedDate(newDate);
        setHoveredDate(newDate);
        setShouldFocus(false);
        onMonthChange(ev, newDate);
        setYearInput(yearFormat(newDate).toString());
      };
      const onKeyDown = (ev) => {
        const newDate = new Date(focusedDate);
        if (ev.key === "ArrowUp") {
          newDate.setDate(newDate.getDate() - 7);
        } else if (ev.key === "ArrowRight") {
          newDate.setDate(newDate.getDate() + 1);
        } else if (ev.key === "ArrowDown") {
          newDate.setDate(newDate.getDate() + 7);
        } else if (ev.key === "ArrowLeft") {
          newDate.setDate(newDate.getDate() - 1);
        }
        if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {
          ev.preventDefault();
          setFocusedDate(newDate);
          setHoveredDate(newDate);
          setShouldFocus(true);
        }
      };
      const changeYear = (newYear) => changeMonth(focusedDate.getMonth(), newYear);
      const changeMonth = (newMonth, newYear) => new Date(newYear !== null && newYear !== void 0 ? newYear : focusedDate.getFullYear(), newMonth, 1);
      const MIN_YEAR = 1900;
      const MAX_YEAR = 2100;
      const handleYearInputChange = (event, yearStr) => {
        if (!/^\d{0,4}$/.test(yearStr)) {
          return;
        }
        setYearInput(yearStr);
        if (yearStr.length === 4) {
          const yearNum = Number(yearStr);
          if (yearNum >= MIN_YEAR && yearNum <= MAX_YEAR) {
            const newDate = changeYear(yearNum);
            setFocusedDate(newDate);
            setHoveredDate(newDate);
            setShouldFocus(false);
            event.target.focus();
            onMonthChange(event, newDate);
          } else {
            setYearInput(yearFormatted.toString());
          }
        }
      };
      const addMonth = (toAdd) => {
        let newMonth = focusedDate.getMonth() + toAdd;
        let newYear = focusedDate.getFullYear();
        if (newMonth === -1) {
          newMonth = 11;
          newYear--;
        } else if (newMonth === 12) {
          newMonth = 0;
          newYear++;
        }
        return changeMonth(newMonth, newYear);
      };
      const prevMonth = addMonth(-1);
      const nextMonth = addMonth(1);
      const focusedYear = focusedDate.getFullYear();
      const focusedMonth = focusedDate.getMonth();
      const calendar = import_react13.default.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [focusedYear, focusedMonth, weekStart, validators]);
      if (!focusedDateValidated) {
        const toFocus = calendar.reduce((acc, cur) => [...acc, ...cur], []).filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth).map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) })).sort((o1, o2) => o1.days - o2.days).map(({ date }) => date)[0];
        if (toFocus) {
          setFocusedDate(toFocus);
          setHoveredDate(toFocus);
        }
      }
      const isHoveredDateValid = isValidated(hoveredDate);
      const monthFormatted = monthFormat(focusedDate);
      const calendarToRender = import_react13.default.createElement(
        "div",
        Object.assign({ className: css(calendar_month_default.calendarMonth, className) }, props),
        import_react13.default.createElement(
          "div",
          { className: calendar_month_default.calendarMonthHeader },
          import_react13.default.createElement(
            "div",
            { className: css(calendar_month_default.calendarMonthHeaderNavControl, calendar_month_default.modifiers.prevMonth) },
            import_react13.default.createElement(
              Button,
              { variant: "plain", "aria-label": prevMonthAriaLabel, onClick: (ev) => onMonthClick(ev, prevMonth) },
              import_react13.default.createElement(angle_left_icon_default, { "aria-hidden": true })
            )
          ),
          import_react13.default.createElement(
            InputGroup,
            null,
            import_react13.default.createElement(
              InputGroupItem,
              { isFill: true },
              import_react13.default.createElement(
                "div",
                { className: calendar_month_default.calendarMonthHeaderMonth },
                import_react13.default.createElement("span", { id: hiddenMonthId, hidden: true }, "Month"),
                import_react13.default.createElement(
                  Select,
                  { toggle: (toggleRef) => import_react13.default.createElement(MenuToggle, { ref: toggleRef, onClick: () => setIsSelectOpen(!isSelectOpen), isExpanded: isSelectOpen, style: { width: "140px" } }, monthFormatted), "aria-labelledby": hiddenMonthId, isOpen: isSelectOpen, onOpenChange: (isOpen) => {
                    setIsSelectOpen(isOpen);
                    onSelectToggle(isOpen);
                  }, onSelect: (ev, monthNum) => {
                    setTimeout(() => {
                      setIsSelectOpen(false);
                      onSelectToggle(false);
                      const newDate = changeMonth(Number(monthNum));
                      setFocusedDate(newDate);
                      setHoveredDate(newDate);
                      setShouldFocus(false);
                      onMonthChange(ev, newDate);
                    }, 0);
                  }, selected: monthFormatted },
                  import_react13.default.createElement(SelectList, null, longMonths.map((longMonth, index) => import_react13.default.createElement(SelectOption, { key: index, value: index, isSelected: longMonth === monthFormatted }, longMonth)))
                )
              )
            ),
            import_react13.default.createElement(
              InputGroupItem,
              null,
              import_react13.default.createElement(
                "div",
                { className: calendar_month_default.calendarMonthHeaderYear },
                import_react13.default.createElement(TextInput, { "aria-label": yearInputAriaLabel, type: "number", value: yearInput, onChange: handleYearInputChange })
              )
            )
          ),
          import_react13.default.createElement(
            "div",
            { className: css(calendar_month_default.calendarMonthHeaderNavControl, calendar_month_default.modifiers.nextMonth) },
            import_react13.default.createElement(
              Button,
              { variant: "plain", "aria-label": nextMonthAriaLabel, onClick: (ev) => onMonthClick(ev, nextMonth) },
              import_react13.default.createElement(angle_right_icon_default, { "aria-hidden": true })
            )
          )
        ),
        import_react13.default.createElement(
          "table",
          { className: calendar_month_default.calendarMonthCalendar },
          import_react13.default.createElement(
            "thead",
            { className: calendar_month_default.calendarMonthDays },
            import_react13.default.createElement("tr", null, calendar[0].map(({ date }, index) => import_react13.default.createElement(
              "th",
              { key: index, className: calendar_month_default.calendarMonthDay, scope: "col" },
              import_react13.default.createElement("span", { className: "pf-v5-screen-reader" }, longWeekdayFormat(date)),
              import_react13.default.createElement("span", { "aria-hidden": true }, weekdayFormat(date))
            )))
          ),
          import_react13.default.createElement("tbody", { onKeyDown }, calendar.map((week, index) => import_react13.default.createElement("tr", { key: index, className: calendar_month_default.calendarMonthDatesRow }, week.map(({ date, isValid }, index2) => {
            const dayFormatted = dayFormat(date);
            const isToday = isSameDate(date, today);
            const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);
            const isFocused = isSameDate(date, focusedDate);
            const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();
            const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);
            let isInRange = false;
            let isRangeEnd = false;
            if (isValidDate(rangeStart) && isValidDate(dateProp)) {
              isInRange = date > rangeStart && date < dateProp;
              isRangeEnd = isSameDate(date, dateProp);
            } else if (isValidDate(rangeStart) && isHoveredDateValid) {
              if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {
                isInRange = date > rangeStart && date < hoveredDate;
                isRangeEnd = isSameDate(date, hoveredDate);
              }
            }
            return import_react13.default.createElement(
              "td",
              { key: index2, className: css(calendar_month_default.calendarMonthDatesCell, isAdjacentMonth && calendar_month_default.modifiers.adjacentMonth, isToday && calendar_month_default.modifiers.current, (isSelected || isRangeStart) && calendar_month_default.modifiers.selected, !isValid && calendar_month_default.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && calendar_month_default.modifiers.inRange, isRangeStart && calendar_month_default.modifiers.startRange, isRangeEnd && calendar_month_default.modifiers.endRange) },
              import_react13.default.createElement("button", Object.assign({ className: css(calendar_month_default.calendarMonthDate, isRangeEnd && calendar_month_default.modifiers.hover, !isValid && calendar_month_default.modifiers.disabled), type: "button", onClick: (event) => onChange(event, date), onMouseOver: () => setHoveredDate(date), tabIndex: isFocused ? 0 : -1, disabled: !isValid, "aria-label": cellAriaLabel ? cellAriaLabel(date) : `${dayFormat(date)} ${monthFormat(date)} ${yearFormat(date)}` }, isFocused && { ref: focusRef }), dayFormatted)
            );
          }))))
        )
      );
      if (inlineProps !== void 0) {
        const Component44 = inlineProps.component ? inlineProps.component : "article";
        return import_react13.default.createElement(
          Component44,
          Object.assign({}, inlineProps.ariaLabelledby && { "aria-labelledby": inlineProps.ariaLabelledby }),
          inlineProps.title,
          calendarToRender
        );
      }
      return calendarToRender;
    };
    CalendarMonth.displayName = "CalendarMonth";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/index.js
var init_CalendarMonth2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/index.js"() {
    init_CalendarMonth();
  }
});

// node_modules/@patternfly/react-styles/css/components/Card/card.css
var init_card = __esm({
  "node_modules/@patternfly/react-styles/css/components/Card/card.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Card/card.mjs
var card_default;
var init_card2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Card/card.mjs"() {
    init_card();
    card_default = {
      "card": "pf-v5-c-card",
      "cardActions": "pf-v5-c-card__actions",
      "cardBody": "pf-v5-c-card__body",
      "cardExpandableContent": "pf-v5-c-card__expandable-content",
      "cardFooter": "pf-v5-c-card__footer",
      "cardHeader": "pf-v5-c-card__header",
      "cardHeaderMain": "pf-v5-c-card__header-main",
      "cardHeaderToggle": "pf-v5-c-card__header-toggle",
      "cardHeaderToggleIcon": "pf-v5-c-card__header-toggle-icon",
      "cardSelectableActions": "pf-v5-c-card__selectable-actions",
      "cardSrInput": "pf-v5-c-card__sr-input",
      "cardTitle": "pf-v5-c-card__title",
      "cardTitleText": "pf-v5-c-card__title-text",
      "check": "pf-v5-c-check",
      "checkInput": "pf-v5-c-check__input",
      "checkLabel": "pf-v5-c-check__label",
      "dirRtl": "pf-v5-m-dir-rtl",
      "divider": "pf-v5-c-divider",
      "modifiers": {
        "selectable": "pf-m-selectable",
        "clickable": "pf-m-clickable",
        "selected": "pf-m-selected",
        "current": "pf-m-current",
        "disabled": "pf-m-disabled",
        "hoverableRaised": "pf-m-hoverable-raised",
        "selectableRaised": "pf-m-selectable-raised",
        "nonSelectableRaised": "pf-m-non-selectable-raised",
        "selectedRaised": "pf-m-selected-raised",
        "compact": "pf-m-compact",
        "displayLg": "pf-m-display-lg",
        "flat": "pf-m-flat",
        "plain": "pf-m-plain",
        "rounded": "pf-m-rounded",
        "expanded": "pf-m-expanded",
        "fullHeight": "pf-m-full-height",
        "toggleRight": "pf-m-toggle-right",
        "noOffset": "pf-m-no-offset",
        "noFill": "pf-m-no-fill"
      },
      "radio": "pf-v5-c-radio",
      "radioInput": "pf-v5-c-radio__input",
      "radioLabel": "pf-v5-c-radio__label",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
var React84, CardContext, Card;
var init_Card = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js"() {
    init_tslib_es6();
    React84 = __toESM(require_react());
    init_card2();
    init_esm();
    init_helpers();
    CardContext = React84.createContext({
      cardId: "",
      registerTitleId: () => {
      },
      isExpanded: false,
      isClickable: false,
      isSelectable: false,
      isSelected: false,
      isClicked: false,
      isDisabled: false
    });
    Card = (_a) => {
      var { children, id = "", className, component = "div", isCompact = false, isSelectable = false, isClickable = false, isDisabled = false, isSelectableRaised = false, isSelected = false, isClicked = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => {
      } } = _a, props = __rest(_a, ["children", "id", "className", "component", "isCompact", "isSelectable", "isClickable", "isDisabled", "isSelectableRaised", "isSelected", "isClicked", "isDisabledRaised", "isFlat", "isExpanded", "isRounded", "isLarge", "isFullHeight", "isPlain", "ouiaId", "ouiaSafe", "hasSelectableInput", "selectableInputAriaLabel", "onSelectableInputChange"]);
      const Component44 = component;
      const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);
      const [titleId, setTitleId] = React84.useState("");
      const [ariaProps, setAriaProps] = React84.useState();
      if (isCompact && isLarge) {
        console.warn("Card: Cannot use isCompact with isLarge. Defaulting to isCompact");
        isLarge = false;
      }
      const getSelectableModifiers = () => {
        if (isDisabledRaised) {
          return css(card_default.modifiers.nonSelectableRaised);
        }
        if (isSelectableRaised) {
          return css(card_default.modifiers.selectableRaised, isSelected && card_default.modifiers.selectedRaised);
        }
        if (isSelectable && isClickable) {
          return css(card_default.modifiers.selectable, card_default.modifiers.clickable, (isSelected || isClicked) && card_default.modifiers.current);
        }
        if (isSelectable) {
          return css(card_default.modifiers.selectable, isSelected && card_default.modifiers.selected);
        }
        if (isClickable) {
          return css(card_default.modifiers.clickable, isClicked && card_default.modifiers.current);
        }
        return "";
      };
      const containsCardTitleChildRef = React84.useRef(false);
      const registerTitleId = (id2) => {
        setTitleId(id2);
        containsCardTitleChildRef.current = !!id2;
      };
      React84.useEffect(() => {
        if (selectableInputAriaLabel) {
          setAriaProps({ "aria-label": selectableInputAriaLabel });
        } else if (titleId) {
          setAriaProps({ "aria-labelledby": titleId });
        } else if (hasSelectableInput && !containsCardTitleChildRef.current) {
          setAriaProps({});
          console.warn("If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed");
        }
      }, [hasSelectableInput, selectableInputAriaLabel, titleId]);
      return React84.createElement(
        CardContext.Provider,
        { value: {
          cardId: id,
          registerTitleId,
          isExpanded,
          isClickable,
          isSelectable,
          isSelected,
          isClicked,
          isDisabled,
          // TODO: Remove hasSelectableInput when deprecated prop is removed
          hasSelectableInput
        } },
        hasSelectableInput && React84.createElement("input", Object.assign({ className: "pf-v5-screen-reader", id: `${id}-input` }, ariaProps, { type: "checkbox", checked: isSelected, onChange: (event) => onSelectableInputChange(event, id), disabled: isDisabledRaised, tabIndex: -1 })),
        React84.createElement(Component44, Object.assign({ id, className: css(card_default.card, isCompact && card_default.modifiers.compact, isExpanded && card_default.modifiers.expanded, isFlat && card_default.modifiers.flat, isRounded && card_default.modifiers.rounded, isLarge && card_default.modifiers.displayLg, isFullHeight && card_default.modifiers.fullHeight, isPlain && card_default.modifiers.plain, getSelectableModifiers(), isDisabled && card_default.modifiers.disabled, className), tabIndex: isSelectableRaised ? "0" : void 0 }, props, ouiaProps), children)
      );
    };
    Card.displayName = "Card";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js
var React85, CardBody;
var init_CardBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js"() {
    init_tslib_es6();
    React85 = __toESM(require_react());
    init_card2();
    init_esm();
    CardBody = (_a) => {
      var { children, className, component = "div", isFilled = true } = _a, props = __rest(_a, ["children", "className", "component", "isFilled"]);
      const Component44 = component;
      return React85.createElement(Component44, Object.assign({ className: css(card_default.cardBody, !isFilled && card_default.modifiers.noFill, className) }, props), children);
    };
    CardBody.displayName = "CardBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardExpandableContent.js
var React86, CardExpandableContent;
var init_CardExpandableContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardExpandableContent.js"() {
    init_tslib_es6();
    React86 = __toESM(require_react());
    init_card2();
    init_esm();
    init_Card();
    CardExpandableContent = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React86.createElement(CardContext.Consumer, null, ({ isExpanded }) => isExpanded ? React86.createElement("div", Object.assign({ className: css(card_default.cardExpandableContent, className) }, props), children) : null);
    };
    CardExpandableContent.displayName = "CardExpandableContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js
var React87, CardFooter;
var init_CardFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js"() {
    init_tslib_es6();
    React87 = __toESM(require_react());
    init_card2();
    init_esm();
    CardFooter = (_a) => {
      var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
      const Component44 = component;
      return React87.createElement(Component44, Object.assign({ className: css(card_default.cardFooter, className) }, props), children);
    };
    CardFooter.displayName = "CardFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js
var React88, CardTitle;
var init_CardTitle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js"() {
    init_tslib_es6();
    React88 = __toESM(require_react());
    init_esm();
    init_card2();
    init_Card();
    CardTitle = (_a) => {
      var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
      const { cardId, registerTitleId } = React88.useContext(CardContext);
      const Component44 = component;
      const titleId = cardId ? `${cardId}-title` : "";
      React88.useEffect(() => {
        registerTitleId(titleId);
        return () => registerTitleId("");
      }, [registerTitleId, titleId]);
      return React88.createElement(
        "div",
        { className: css(card_default.cardTitle) },
        React88.createElement(Component44, Object.assign({ className: css(card_default.cardTitleText, className), id: titleId || void 0 }, props), children)
      );
    };
    CardTitle.displayName = "CardTitle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeaderMain.js
var React89, CardHeaderMain;
var init_CardHeaderMain = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeaderMain.js"() {
    init_tslib_es6();
    React89 = __toESM(require_react());
    init_esm();
    init_card2();
    CardHeaderMain = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React89.createElement("div", Object.assign({ className: css(card_default.cardHeaderMain, className) }, props), children);
    };
    CardHeaderMain.displayName = "CardHeaderMain";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardActions.js
var React90, CardActions;
var init_CardActions = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardActions.js"() {
    init_tslib_es6();
    React90 = __toESM(require_react());
    init_esm();
    init_card2();
    CardActions = (_a) => {
      var { children, className, hasNoOffset = false } = _a, props = __rest(_a, ["children", "className", "hasNoOffset"]);
      return React90.createElement("div", Object.assign({ className: css(card_default.cardActions, hasNoOffset && card_default.modifiers.noOffset, className) }, props), children);
    };
    CardActions.displayName = "CardActions";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardSelectableActions.js
var React91, CardSelectableActions;
var init_CardSelectableActions = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardSelectableActions.js"() {
    init_tslib_es6();
    React91 = __toESM(require_react());
    init_esm();
    init_card2();
    CardSelectableActions = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React91.createElement("div", Object.assign({ className: css(card_default.cardSelectableActions, className) }, props), children);
    };
    CardSelectableActions.displayName = "CardSelectableActions";
  }
});

// node_modules/@patternfly/react-styles/css/components/Radio/radio.css
var init_radio = __esm({
  "node_modules/@patternfly/react-styles/css/components/Radio/radio.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Radio/radio.mjs
var radio_default;
var init_radio2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Radio/radio.mjs"() {
    init_radio();
    radio_default = {
      "modifiers": {
        "standalone": "pf-m-standalone",
        "disabled": "pf-m-disabled"
      },
      "radio": "pf-v5-c-radio",
      "radioBody": "pf-v5-c-radio__body",
      "radioDescription": "pf-v5-c-radio__description",
      "radioInput": "pf-v5-c-radio__input",
      "radioLabel": "pf-v5-c-radio__label"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js
var React92, Radio;
var init_Radio = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js"() {
    init_tslib_es6();
    React92 = __toESM(require_react());
    init_radio2();
    init_esm();
    init_helpers();
    Radio = class _Radio extends React92.Component {
      constructor(props) {
        super(props);
        this.handleChange = (event) => {
          this.props.onChange(event, event.currentTarget.checked);
        };
        if (!props.label && !props["aria-label"]) {
          console.error("Radio:", "Radio requires an aria-label to be specified");
        }
        this.state = {
          ouiaStateId: getDefaultOUIAId(_Radio.displayName)
        };
      }
      render() {
        const _a = this.props, {
          "aria-label": ariaLabel,
          checked,
          className,
          inputClassName,
          defaultChecked,
          isLabelWrapped,
          isLabelBeforeButton,
          isChecked,
          isDisabled,
          isValid,
          label,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onChange,
          description,
          body,
          ouiaId,
          ouiaSafe = true,
          component
        } = _a, props = __rest(_a, ["aria-label", "checked", "className", "inputClassName", "defaultChecked", "isLabelWrapped", "isLabelBeforeButton", "isChecked", "isDisabled", "isValid", "label", "onChange", "description", "body", "ouiaId", "ouiaSafe", "component"]);
        if (!props.id) {
          console.error("Radio:", "id is required to make input accessible");
        }
        const inputRendered = React92.createElement("input", Object.assign({}, props, { className: css(radio_default.radioInput, inputClassName), type: "radio", onChange: this.handleChange, "aria-invalid": !isValid, disabled: isDisabled, checked: checked || isChecked }, checked === void 0 && { defaultChecked }, !label && { "aria-label": ariaLabel }, getOUIAProps(_Radio.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
        const wrapWithLabel = isLabelWrapped && !component || component === "label";
        const Label2 = wrapWithLabel ? "span" : "label";
        const labelRendered = label ? React92.createElement(Label2, { className: css(radio_default.radioLabel, isDisabled && radio_default.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0 }, label) : null;
        const Component44 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
        return React92.createElement(
          Component44,
          { className: css(radio_default.radio, !label && radio_default.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0 },
          isLabelBeforeButton ? React92.createElement(
            React92.Fragment,
            null,
            labelRendered,
            inputRendered
          ) : React92.createElement(
            React92.Fragment,
            null,
            inputRendered,
            labelRendered
          ),
          description && React92.createElement("span", { className: css(radio_default.radioDescription) }, description),
          body && React92.createElement("span", { className: css(radio_default.radioBody) }, body)
        );
      }
    };
    Radio.displayName = "Radio";
    Radio.defaultProps = {
      className: "",
      isDisabled: false,
      isValid: true,
      onChange: () => {
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Radio/index.js
var init_Radio2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Radio/index.js"() {
    init_Radio();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js
var React93, CardHeader;
var init_CardHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js"() {
    init_tslib_es6();
    React93 = __toESM(require_react());
    init_esm();
    init_card2();
    init_Card();
    init_CardHeaderMain();
    init_CardActions();
    init_CardSelectableActions();
    init_Button2();
    init_angle_right_icon();
    init_Radio2();
    init_Checkbox2();
    CardHeader = (_a) => {
      var { children, className, actions, selectableActions, id, onExpand, toggleButtonProps, isToggleRightAligned } = _a, props = __rest(_a, ["children", "className", "actions", "selectableActions", "id", "onExpand", "toggleButtonProps", "isToggleRightAligned"]);
      return React93.createElement(CardContext.Consumer, null, ({ cardId, isClickable, isSelectable, isSelected, isClicked, isDisabled: isCardDisabled, hasSelectableInput }) => {
        const cardHeaderToggle = React93.createElement(
          "div",
          { className: css(card_default.cardHeaderToggle) },
          React93.createElement(
            Button,
            Object.assign({ variant: "plain", type: "button", onClick: (evt) => {
              onExpand(evt, cardId);
            } }, toggleButtonProps),
            React93.createElement(
              "span",
              { className: css(card_default.cardHeaderToggleIcon) },
              React93.createElement(angle_right_icon_default, { "aria-hidden": "true" })
            )
          )
        );
        const isClickableOrSelectableOnly = isClickable && !isSelectable || isSelectable && !isClickable;
        const isDeprecatedSelectableCard = hasSelectableInput;
        if ((actions === null || actions === void 0 ? void 0 : actions.actions) && isClickableOrSelectableOnly && !isDeprecatedSelectableCard) {
          console.warn(`${isClickable ? "Clickable" : "Selectable"} only cards should not contain any other actions. If you wish to include additional actions, use a clickable and selectable card.`);
        }
        const handleActionClick = (event) => {
          if (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.onClickAction) {
            selectableActions.onClickAction(event);
          } else if (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.to) {
            window.open(selectableActions.to, selectableActions.isExternalLink ? "_blank" : "_self");
          }
        };
        const getClickableSelectableProps = () => {
          var _a2;
          const baseProps = {
            className: "pf-m-standalone",
            inputClassName: isClickable && !isSelectable && "pf-v5-screen-reader",
            label: React93.createElement(React93.Fragment, null),
            "aria-label": selectableActions.selectableActionAriaLabel,
            "aria-labelledby": selectableActions.selectableActionAriaLabelledby,
            id: selectableActions.selectableActionId,
            name: selectableActions.name,
            isDisabled: isCardDisabled
          };
          const isSelectableInputChecked = (_a2 = selectableActions.isChecked) !== null && _a2 !== void 0 ? _a2 : isSelected;
          if (isClickable && !isSelectable) {
            return Object.assign(Object.assign({}, baseProps), { onClick: handleActionClick, isChecked: isClicked });
          }
          if (isSelectable) {
            return Object.assign(Object.assign({}, baseProps), { onChange: selectableActions.onChange, isChecked: isSelectableInputChecked });
          }
          return baseProps;
        };
        return React93.createElement(
          "div",
          Object.assign({ className: css(card_default.cardHeader, isToggleRightAligned && card_default.modifiers.toggleRight, className), id }, props),
          onExpand && !isToggleRightAligned && cardHeaderToggle,
          (actions || selectableActions && (isClickable || isSelectable)) && React93.createElement(
            CardActions,
            { className: actions === null || actions === void 0 ? void 0 : actions.className, hasNoOffset: (actions === null || actions === void 0 ? void 0 : actions.hasNoOffset) || (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.hasNoOffset) },
            actions === null || actions === void 0 ? void 0 : actions.actions,
            selectableActions && (isClickable || isSelectable) && React93.createElement(CardSelectableActions, { className: selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.className }, (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.variant) === "single" || isClickable && !isSelectable ? React93.createElement(Radio, Object.assign({}, getClickableSelectableProps())) : React93.createElement(Checkbox, Object.assign({}, getClickableSelectableProps())))
          ),
          children && React93.createElement(CardHeaderMain, null, children),
          onExpand && isToggleRightAligned && cardHeaderToggle
        );
      });
    };
    CardHeader.displayName = "CardHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Card/index.js
var init_Card2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Card/index.js"() {
    init_Card();
    init_CardBody();
    init_CardExpandableContent();
    init_CardFooter();
    init_CardTitle();
    init_CardHeader();
  }
});

// node_modules/@patternfly/react-styles/css/components/Chip/chip.css
var init_chip = __esm({
  "node_modules/@patternfly/react-styles/css/components/Chip/chip.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Chip/chip.mjs
var chip_default;
var init_chip2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Chip/chip.mjs"() {
    init_chip();
    chip_default = {
      "badge": "pf-v5-c-badge",
      "button": "pf-v5-c-button",
      "chip": "pf-v5-c-chip",
      "chipActions": "pf-v5-c-chip__actions",
      "chipContent": "pf-v5-c-chip__content",
      "chipIcon": "pf-v5-c-chip__icon",
      "chipText": "pf-v5-c-chip__text",
      "modifiers": {
        "overflow": "pf-m-overflow",
        "draggable": "pf-m-draggable"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_chip__text_MaxWidth.js
var c_chip__text_MaxWidth, c_chip_text_MaxWidth_default;
var init_c_chip_text_MaxWidth = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_chip__text_MaxWidth.js"() {
    c_chip__text_MaxWidth = {
      "name": "--pf-v5-c-chip__text--MaxWidth",
      "value": "16ch",
      "var": "var(--pf-v5-c-chip__text--MaxWidth)"
    };
    c_chip_text_MaxWidth_default = c_chip__text_MaxWidth;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Chip/Chip.js
var React94, Chip;
var init_Chip = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Chip/Chip.js"() {
    init_tslib_es6();
    React94 = __toESM(require_react());
    init_esm();
    init_Button2();
    init_Tooltip2();
    init_times_icon();
    init_chip2();
    init_GenerateId();
    init_helpers();
    init_c_chip_text_MaxWidth();
    Chip = class _Chip extends React94.Component {
      constructor(props) {
        super(props);
        this.span = React94.createRef();
        this.setChipStyle = () => ({
          [c_chip_text_MaxWidth_default.name]: this.props.textMaxWidth
        });
        this.renderOverflowChip = () => {
          const _a = this.props, {
            badge,
            children,
            className,
            onClick,
            ouiaId,
            textMaxWidth,
            style,
            component,
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            tooltipPosition,
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            isOverflowChip,
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            closeBtnAriaLabel,
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            isReadOnly
          } = _a, props2 = __rest(_a, ["badge", "children", "className", "onClick", "ouiaId", "textMaxWidth", "style", "component", "tooltipPosition", "isOverflowChip", "closeBtnAriaLabel", "isReadOnly"]);
          const Component44 = component;
          return React94.createElement(
            Component44,
            Object.assign({ onClick }, textMaxWidth && Object.assign({ style: this.setChipStyle() }, style), { className: css(chip_default.chip, chip_default.modifiers.overflow, className) }, component === "button" ? { type: "button" } : {}, getOUIAProps("OverflowChip", ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props2),
            React94.createElement(
              "span",
              { className: css(chip_default.chipContent) },
              React94.createElement("span", { className: css(chip_default.chipText) }, children),
              badge && badge
            )
          );
        };
        this.renderChip = (randomId) => {
          const { children, tooltipPosition } = this.props;
          if (this.state.isTooltipVisible) {
            return React94.createElement(Tooltip, { position: tooltipPosition, content: children }, this.renderInnerChip(randomId));
          }
          return this.renderInnerChip(randomId);
        };
        this.state = {
          isTooltipVisible: false,
          ouiaStateId: getDefaultOUIAId(_Chip.displayName)
        };
      }
      componentDidMount() {
        this.setState({
          isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)
        });
      }
      componentDidUpdate(_prevProps, prevState) {
        const nextIsTooltipVisible = Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth);
        if (prevState.isTooltipVisible !== nextIsTooltipVisible) {
          this.setState({
            isTooltipVisible: nextIsTooltipVisible
          });
        }
      }
      renderInnerChip(id) {
        const _a = this.props, {
          badge,
          children,
          className,
          onClick,
          closeBtnAriaLabel,
          isReadOnly,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          isOverflowChip,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          tooltipPosition,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          id: idProp,
          component,
          ouiaId,
          textMaxWidth
        } = _a, props = __rest(_a, ["badge", "children", "className", "onClick", "closeBtnAriaLabel", "isReadOnly", "isOverflowChip", "tooltipPosition", "id", "component", "ouiaId", "textMaxWidth"]);
        const Component44 = component;
        return React94.createElement(
          Component44,
          Object.assign({}, textMaxWidth && {
            style: this.setChipStyle()
          }, { className: css(chip_default.chip, className) }, this.state.isTooltipVisible && { tabIndex: 0 }, getOUIAProps(_Chip.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props),
          React94.createElement(
            "span",
            { className: css(chip_default.chipContent) },
            React94.createElement("span", { ref: this.span, className: css(chip_default.chipText), id }, children),
            badge && badge
          ),
          !isReadOnly && React94.createElement(
            "span",
            { className: css(chip_default.chipActions) },
            React94.createElement(
              Button,
              { onClick, variant: "plain", "aria-label": closeBtnAriaLabel, id: `remove_${id}`, "aria-labelledby": `remove_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },
              React94.createElement(times_icon_default, { "aria-hidden": "true" })
            )
          )
        );
      }
      render() {
        const { isOverflowChip } = this.props;
        return React94.createElement(GenerateId, null, (randomId) => isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId));
      }
    };
    Chip.displayName = "Chip";
    Chip.defaultProps = {
      closeBtnAriaLabel: "close",
      className: "",
      isOverflowChip: false,
      isReadOnly: false,
      tooltipPosition: "top",
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onClick: (_e) => void 0,
      component: "div"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Chip/chip-group.css
var init_chip_group = __esm({
  "node_modules/@patternfly/react-styles/css/components/Chip/chip-group.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Chip/chip-group.mjs
var chip_group_default;
var init_chip_group2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Chip/chip-group.mjs"() {
    init_chip_group();
    chip_group_default = {
      "chipGroup": "pf-v5-c-chip-group",
      "chipGroupClose": "pf-v5-c-chip-group__close",
      "chipGroupLabel": "pf-v5-c-chip-group__label",
      "chipGroupList": "pf-v5-c-chip-group__list",
      "chipGroupListItem": "pf-v5-c-chip-group__list-item",
      "chipGroupMain": "pf-v5-c-chip-group__main",
      "modifiers": {
        "category": "pf-m-category"
      }
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js
var TimesCircleIconConfig, TimesCircleIcon, times_circle_icon_default;
var init_times_circle_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js"() {
    init_createIcon();
    TimesCircleIconConfig = {
      name: "TimesCircleIcon",
      height: 512,
      width: 512,
      svgPath: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
      yOffset: 0,
      xOffset: 0
    };
    TimesCircleIcon = createIcon(TimesCircleIconConfig);
    times_circle_icon_default = TimesCircleIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Chip/ChipGroup.js
var React95, ChipGroup;
var init_ChipGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Chip/ChipGroup.js"() {
    init_tslib_es6();
    React95 = __toESM(require_react());
    init_chip_group2();
    init_esm();
    init_Button2();
    init_Chip();
    init_Tooltip2();
    init_times_circle_icon();
    init_helpers();
    init_GenerateId();
    init_helpers();
    ChipGroup = class _ChipGroup extends React95.Component {
      constructor(props) {
        super(props);
        this.headingRef = React95.createRef();
        this.toggleCollapse = () => {
          this.setState((prevState) => ({
            isOpen: !prevState.isOpen,
            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
          }));
        };
        this.state = {
          isOpen: this.props.defaultIsOpen,
          isTooltipVisible: false
        };
      }
      componentDidMount() {
        this.setState({
          isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
        });
      }
      renderLabel(id) {
        const { categoryName, tooltipPosition } = this.props;
        const { isTooltipVisible } = this.state;
        return isTooltipVisible ? React95.createElement(
          Tooltip,
          { position: tooltipPosition, content: categoryName },
          React95.createElement(
            "span",
            { tabIndex: 0, ref: this.headingRef, className: css(chip_group_default.chipGroupLabel) },
            React95.createElement("span", { id }, categoryName)
          )
        ) : React95.createElement("span", { ref: this.headingRef, className: css(chip_group_default.chipGroupLabel), id }, categoryName);
      }
      render() {
        const _a = this.props, {
          categoryName,
          children,
          className,
          isClosable,
          closeBtnAriaLabel,
          "aria-label": ariaLabel,
          onClick,
          onOverflowChipClick,
          numChips,
          expandedText,
          collapsedText,
          ouiaId,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          defaultIsOpen,
          tooltipPosition
        } = _a, rest = __rest(_a, ["categoryName", "children", "className", "isClosable", "closeBtnAriaLabel", "aria-label", "onClick", "onOverflowChipClick", "numChips", "expandedText", "collapsedText", "ouiaId", "defaultIsOpen", "tooltipPosition"]);
        const { isOpen } = this.state;
        const numChildren = React95.Children.count(children);
        const collapsedTextResult = fillTemplate(collapsedText, {
          remaining: React95.Children.count(children) - numChips
        });
        const renderChipGroup = (id) => {
          const chipArray = !isOpen ? React95.Children.toArray(children).slice(0, numChips) : React95.Children.toArray(children);
          return React95.createElement(
            "div",
            Object.assign({ className: css(chip_group_default.chipGroup, className, categoryName && chip_group_default.modifiers.category), role: "group" }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, getOUIAProps(_ChipGroup.displayName, ouiaId)),
            React95.createElement(
              "div",
              { className: css(chip_group_default.chipGroupMain) },
              categoryName && this.renderLabel(id),
              React95.createElement(
                "ul",
                Object.assign({ className: css(chip_group_default.chipGroupList) }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, { role: "list" }, rest),
                chipArray.map((child, i) => React95.createElement("li", { className: css(chip_group_default.chipGroupListItem), key: i }, child)),
                numChildren > numChips && React95.createElement(
                  "li",
                  { className: css(chip_group_default.chipGroupListItem) },
                  React95.createElement(Chip, { isOverflowChip: true, onClick: (event) => {
                    this.toggleCollapse();
                    onOverflowChipClick(event);
                  }, component: "button" }, isOpen ? expandedText : collapsedTextResult)
                )
              )
            ),
            isClosable && React95.createElement(
              "div",
              { className: css(chip_group_default.chipGroupClose) },
              React95.createElement(
                Button,
                { variant: "plain", "aria-label": closeBtnAriaLabel, onClick, id: `remove_group_${id}`, "aria-labelledby": `remove_group_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },
                React95.createElement(times_circle_icon_default, { "aria-hidden": "true" })
              )
            )
          );
        };
        return numChildren === 0 ? null : React95.createElement(GenerateId, null, (randomId) => renderChipGroup(this.props.id || randomId));
      }
    };
    ChipGroup.displayName = "ChipGroup";
    ChipGroup.defaultProps = {
      expandedText: "Show Less",
      collapsedText: "${remaining} more",
      categoryName: "",
      defaultIsOpen: false,
      numChips: 3,
      isClosable: false,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onClick: (_e) => void 0,
      onOverflowChipClick: (_e) => void 0,
      closeBtnAriaLabel: "Close chip group",
      tooltipPosition: "top",
      "aria-label": "Chip group category"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Chip/index.js
var init_Chip2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Chip/index.js"() {
    init_Chip();
    init_ChipGroup();
  }
});

// node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.css
var init_clipboard_copy = __esm({
  "node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs
var clipboard_copy_default;
var init_clipboard_copy2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs"() {
    init_clipboard_copy();
    clipboard_copy_default = {
      "button": "pf-v5-c-button",
      "clipboardCopy": "pf-v5-c-clipboard-copy",
      "clipboardCopyActions": "pf-v5-c-clipboard-copy__actions",
      "clipboardCopyActionsItem": "pf-v5-c-clipboard-copy__actions-item",
      "clipboardCopyExpandableContent": "pf-v5-c-clipboard-copy__expandable-content",
      "clipboardCopyGroup": "pf-v5-c-clipboard-copy__group",
      "clipboardCopyText": "pf-v5-c-clipboard-copy__text",
      "clipboardCopyToggleIcon": "pf-v5-c-clipboard-copy__toggle-icon",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "expanded": "pf-m-expanded",
        "inline": "pf-m-inline",
        "block": "pf-m-block",
        "code": "pf-m-code"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/copy-icon.js
var CopyIconConfig, CopyIcon, copy_icon_default;
var init_copy_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/copy-icon.js"() {
    init_createIcon();
    CopyIconConfig = {
      name: "CopyIcon",
      height: 512,
      width: 448,
      svgPath: "M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z",
      yOffset: 0,
      xOffset: 0
    };
    CopyIcon = createIcon(CopyIconConfig);
    copy_icon_default = CopyIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyButton.js
var React96, ClipboardCopyButton;
var init_ClipboardCopyButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyButton.js"() {
    init_tslib_es6();
    React96 = __toESM(require_react());
    init_copy_icon();
    init_Button2();
    init_Tooltip2();
    ClipboardCopyButton = (_a) => {
      var { onClick, exitDelay = 0, entryDelay = 300, maxWidth = "100px", position = "top", "aria-label": ariaLabel = "Copyable input", id, textId, children, variant = "control", onTooltipHidden = () => {
      }, className } = _a, props = __rest(_a, ["onClick", "exitDelay", "entryDelay", "maxWidth", "position", "aria-label", "id", "textId", "children", "variant", "onTooltipHidden", "className"]);
      const triggerRef = React96.createRef();
      return React96.createElement(
        Tooltip,
        { trigger: "mouseenter focus click", triggerRef, exitDelay, entryDelay, maxWidth, position, "aria-live": "polite", aria: "none", content: React96.createElement("div", null, children), onTooltipHidden },
        React96.createElement(
          Button,
          Object.assign({ type: "button", variant, onClick, "aria-label": ariaLabel, className, id, "aria-labelledby": `${id} ${textId}` }, props, { ref: triggerRef }),
          React96.createElement(copy_icon_default, null)
        )
      );
    };
    ClipboardCopyButton.displayName = "ClipboardCopyButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyToggle.js
var React97, ClipboardCopyToggle;
var init_ClipboardCopyToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyToggle.js"() {
    init_tslib_es6();
    React97 = __toESM(require_react());
    init_clipboard_copy2();
    init_esm();
    init_angle_right_icon();
    init_Button2();
    ClipboardCopyToggle = (_a) => {
      var { onClick, id, textId, contentId, isExpanded = false } = _a, props = __rest(_a, ["onClick", "id", "textId", "contentId", "isExpanded"]);
      return React97.createElement(
        Button,
        Object.assign({ type: "button", variant: "control", onClick, id, "aria-labelledby": `${id} ${textId}`, "aria-controls": contentId, "aria-expanded": isExpanded }, props),
        React97.createElement(
          "div",
          { className: css(clipboard_copy_default.clipboardCopyToggleIcon) },
          React97.createElement(angle_right_icon_default, { "aria-hidden": "true" })
        )
      );
    };
    ClipboardCopyToggle.displayName = "ClipboardCopyToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyExpanded.js
var React98, ClipboardCopyExpanded;
var init_ClipboardCopyExpanded = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyExpanded.js"() {
    init_tslib_es6();
    React98 = __toESM(require_react());
    init_clipboard_copy2();
    init_esm();
    ClipboardCopyExpanded = class extends React98.Component {
      constructor(props) {
        super(props);
      }
      render() {
        const _a = this.props, { className, children, onChange, isReadOnly, isCode } = _a, props = __rest(_a, ["className", "children", "onChange", "isReadOnly", "isCode"]);
        return React98.createElement("div", Object.assign({ suppressContentEditableWarning: true, className: css(clipboard_copy_default.clipboardCopyExpandableContent, className), onInput: (e) => onChange(e, e.target.innerText), contentEditable: !isReadOnly }, props), isCode ? React98.createElement("pre", { dir: "ltr" }, children) : children);
      }
    };
    ClipboardCopyExpanded.displayName = "ClipboardCopyExpanded";
    ClipboardCopyExpanded.defaultProps = {
      onChange: () => void 0,
      className: "",
      isReadOnly: false,
      isCode: false
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js
var React99, clipboardCopyFunc, ClipboardCopyVariant, ClipboardCopy;
var init_ClipboardCopy = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js"() {
    init_tslib_es6();
    React99 = __toESM(require_react());
    init_clipboard_copy2();
    init_esm();
    init_Tooltip2();
    init_TextInput2();
    init_GenerateId();
    init_ClipboardCopyButton();
    init_ClipboardCopyToggle();
    init_ClipboardCopyExpanded();
    init_helpers();
    clipboardCopyFunc = (_event, text) => {
      try {
        navigator.clipboard.writeText(text.toString());
      } catch (error) {
        console.warn("Clipboard API not found, this copy function will not work. This is likely because you're using an", "unsupported browser or you're not using HTTPS. \n\nIf you're a developer building an application which needs", "to support copying to the clipboard without the clipboard API, you'll have to create your own copy", "function and pass it to the ClipboardCopy component as the onCopy prop. For more information see", "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard");
        console.error(error);
      }
    };
    (function(ClipboardCopyVariant2) {
      ClipboardCopyVariant2["inline"] = "inline";
      ClipboardCopyVariant2["expansion"] = "expansion";
      ClipboardCopyVariant2["inlineCompact"] = "inline-compact";
    })(ClipboardCopyVariant || (ClipboardCopyVariant = {}));
    ClipboardCopy = class _ClipboardCopy extends React99.Component {
      constructor(props) {
        super(props);
        this.timer = null;
        this.componentDidUpdate = (prevProps, prevState) => {
          if (prevProps.children !== this.props.children) {
            const newText = this.props.children;
            this.setState({ text: newText, textWhenExpanded: newText });
          }
        };
        this.componentWillUnmount = () => {
          if (this.timer) {
            window.clearTimeout(this.timer);
          }
        };
        this.expandContent = (_event) => {
          this.setState((prevState) => ({
            expanded: !prevState.expanded
          }));
        };
        this.updateText = (event, text2) => {
          this.setState({ text: text2 });
          this.props.onChange(event, text2);
        };
        this.updateTextWhenExpanded = (event, text2) => {
          this.setState({ textWhenExpanded: text2 });
          this.props.onChange(event, text2);
        };
        this.render = () => {
          const _a = this.props, {
            /* eslint-disable @typescript-eslint/no-unused-vars */
            isExpanded,
            onChange,
            // Don't pass to <div>
            /* eslint-enable @typescript-eslint/no-unused-vars */
            isReadOnly,
            isCode,
            isBlock,
            exitDelay,
            maxWidth,
            entryDelay,
            onCopy,
            hoverTip,
            clickTip,
            textAriaLabel,
            toggleAriaLabel,
            variant,
            position,
            className,
            additionalActions,
            ouiaId,
            ouiaSafe
          } = _a, divProps = __rest(_a, ["isExpanded", "onChange", "isReadOnly", "isCode", "isBlock", "exitDelay", "maxWidth", "entryDelay", "onCopy", "hoverTip", "clickTip", "textAriaLabel", "toggleAriaLabel", "variant", "position", "className", "additionalActions", "ouiaId", "ouiaSafe"]);
          const textIdPrefix = "text-input-";
          const toggleIdPrefix = "toggle-";
          const contentIdPrefix = "content-";
          return React99.createElement(
            "div",
            Object.assign({ className: css(clipboard_copy_default.clipboardCopy, variant === "inline-compact" && clipboard_copy_default.modifiers.inline, isBlock && clipboard_copy_default.modifiers.block, this.state.expanded && clipboard_copy_default.modifiers.expanded, className) }, divProps, getOUIAProps(_ClipboardCopy.displayName, ouiaId, ouiaSafe)),
            variant === "inline-compact" && React99.createElement(GenerateId, { prefix: "" }, (id) => React99.createElement(
              React99.Fragment,
              null,
              !isCode && React99.createElement("span", { className: css(clipboard_copy_default.clipboardCopyText), id: `${textIdPrefix}${id}` }, this.state.text),
              isCode && React99.createElement("code", { className: css(clipboard_copy_default.clipboardCopyText, clipboard_copy_default.modifiers.code), id: `${textIdPrefix}${id}` }, this.state.text),
              React99.createElement(
                "span",
                { className: css(clipboard_copy_default.clipboardCopyActions) },
                React99.createElement(
                  "span",
                  { className: css(clipboard_copy_default.clipboardCopyActionsItem) },
                  React99.createElement(ClipboardCopyButton, { variant: "plain", exitDelay, entryDelay, maxWidth, position, id: `copy-button-${id}`, textId: `text-input-${id}`, "aria-label": hoverTip, onClick: (event) => {
                    onCopy(event, this.state.text);
                    this.setState({ copied: true });
                  }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)
                ),
                additionalActions && additionalActions
              )
            )),
            variant !== "inline-compact" && React99.createElement(GenerateId, { prefix: "" }, (id) => React99.createElement(
              React99.Fragment,
              null,
              React99.createElement(
                "div",
                { className: css(clipboard_copy_default.clipboardCopyGroup) },
                variant === "expansion" && React99.createElement(ClipboardCopyToggle, { isExpanded: this.state.expanded, onClick: (_event) => {
                  this.expandContent(_event);
                  if (this.state.expanded) {
                    this.setState({ text: this.state.textWhenExpanded });
                  } else {
                    this.setState({ textWhenExpanded: this.state.text });
                  }
                }, id: `${toggleIdPrefix}${id}`, textId: `${textIdPrefix}${id}`, contentId: `${contentIdPrefix}${id}`, "aria-label": toggleAriaLabel }),
                React99.createElement(TextInput, Object.assign({ readOnlyVariant: isReadOnly || this.state.expanded ? "default" : void 0, onChange: this.updateText, value: this.state.expanded ? this.state.textWhenExpanded : this.state.text, id: `text-input-${id}`, "aria-label": textAriaLabel }, isCode && { dir: "ltr" })),
                React99.createElement(ClipboardCopyButton, { exitDelay, entryDelay, maxWidth, position, id: `copy-button-${id}`, textId: `text-input-${id}`, "aria-label": hoverTip, onClick: (event) => {
                  onCopy(event, this.state.expanded ? this.state.textWhenExpanded : this.state.text);
                  this.setState({ copied: true });
                }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)
              ),
              this.state.expanded && React99.createElement(ClipboardCopyExpanded, { isReadOnly, isCode, id: `content-${id}`, onChange: this.updateTextWhenExpanded }, this.state.text)
            ))
          );
        };
        const text = Array.isArray(this.props.children) ? this.props.children.join("") : this.props.children;
        this.state = {
          text,
          expanded: this.props.isExpanded,
          copied: false,
          textWhenExpanded: text
        };
      }
    };
    ClipboardCopy.displayName = "ClipboardCopy";
    ClipboardCopy.defaultProps = {
      hoverTip: "Copy to clipboard",
      clickTip: "Successfully copied to clipboard!",
      isReadOnly: false,
      isExpanded: false,
      isCode: false,
      variant: "inline",
      position: TooltipPosition.top,
      maxWidth: "150px",
      exitDelay: 1500,
      entryDelay: 300,
      onCopy: clipboardCopyFunc,
      onChange: () => void 0,
      textAriaLabel: "Copyable input",
      toggleAriaLabel: "Show content",
      additionalActions: null,
      ouiaSafe: true
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyAction.js
var React100, ClipboardCopyAction;
var init_ClipboardCopyAction = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyAction.js"() {
    init_tslib_es6();
    React100 = __toESM(require_react());
    init_clipboard_copy2();
    init_esm();
    ClipboardCopyAction = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React100.createElement("span", Object.assign({ className: css(clipboard_copy_default.clipboardCopyActionsItem, className) }, props), children);
    };
    ClipboardCopyAction.displayName = "ClipboardCopyAction";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/index.js
var init_ClipboardCopy2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/index.js"() {
    init_ClipboardCopy();
    init_ClipboardCopyAction();
    init_ClipboardCopyButton();
  }
});

// node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.css
var init_code_block = __esm({
  "node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs
var code_block_default;
var init_code_block2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs"() {
    init_code_block();
    code_block_default = {
      "codeBlock": "pf-v5-c-code-block",
      "codeBlockActions": "pf-v5-c-code-block__actions",
      "codeBlockCode": "pf-v5-c-code-block__code",
      "codeBlockContent": "pf-v5-c-code-block__content",
      "codeBlockHeader": "pf-v5-c-code-block__header",
      "codeBlockPre": "pf-v5-c-code-block__pre"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js
var React101, CodeBlock;
var init_CodeBlock = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js"() {
    init_tslib_es6();
    React101 = __toESM(require_react());
    init_code_block2();
    init_esm();
    CodeBlock = (_a) => {
      var { children = null, className, actions = null } = _a, props = __rest(_a, ["children", "className", "actions"]);
      return React101.createElement(
        "div",
        Object.assign({ className: css(code_block_default.codeBlock, className) }, props),
        actions && React101.createElement(
          "div",
          { className: css(code_block_default.codeBlockHeader) },
          React101.createElement("div", { className: css(code_block_default.codeBlockActions) }, actions)
        ),
        React101.createElement("div", { className: css(code_block_default.codeBlockContent) }, children)
      );
    };
    CodeBlock.displayName = "CodeBlock";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockCode.js
var React102, CodeBlockCode;
var init_CodeBlockCode = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockCode.js"() {
    init_tslib_es6();
    React102 = __toESM(require_react());
    init_code_block2();
    init_esm();
    CodeBlockCode = (_a) => {
      var { children = null, className, codeClassName } = _a, props = __rest(_a, ["children", "className", "codeClassName"]);
      return React102.createElement(
        "pre",
        Object.assign({ className: css(code_block_default.codeBlockPre, className) }, props),
        React102.createElement("code", { className: css(code_block_default.codeBlockCode, codeClassName) }, children)
      );
    };
    CodeBlockCode.displayName = "CodeBlockCode";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js
var React103, CodeBlockAction;
var init_CodeBlockAction = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js"() {
    init_tslib_es6();
    React103 = __toESM(require_react());
    init_esm();
    init_code_block2();
    CodeBlockAction = (_a) => {
      var { children = null, className } = _a, props = __rest(_a, ["children", "className"]);
      return React103.createElement("div", Object.assign({ className: css(`${code_block_default.codeBlockActions}-item`, className) }, props), children);
    };
    CodeBlockAction.displayName = "CodeBlockAction";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/index.js
var init_CodeBlock2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/index.js"() {
    init_CodeBlock();
    init_CodeBlockCode();
    init_CodeBlockAction();
  }
});

// node_modules/@patternfly/react-styles/css/components/DataList/data-list.css
var init_data_list = __esm({
  "node_modules/@patternfly/react-styles/css/components/DataList/data-list.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/DataList/data-list.mjs
var data_list_default;
var init_data_list2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/DataList/data-list.mjs"() {
    init_data_list();
    data_list_default = {
      "dataList": "pf-v5-c-data-list",
      "dataListAction": "pf-v5-c-data-list__action",
      "dataListCell": "pf-v5-c-data-list__cell",
      "dataListCheck": "pf-v5-c-data-list__check",
      "dataListExpandableContent": "pf-v5-c-data-list__expandable-content",
      "dataListExpandableContentBody": "pf-v5-c-data-list__expandable-content-body",
      "dataListItem": "pf-v5-c-data-list__item",
      "dataListItemAction": "pf-v5-c-data-list__item-action",
      "dataListItemContent": "pf-v5-c-data-list__item-content",
      "dataListItemControl": "pf-v5-c-data-list__item-control",
      "dataListItemDraggableButton": "pf-v5-c-data-list__item-draggable-button",
      "dataListItemDraggableIcon": "pf-v5-c-data-list__item-draggable-icon",
      "dataListItemRow": "pf-v5-c-data-list__item-row",
      "dataListText": "pf-v5-c-data-list__text",
      "dataListToggle": "pf-v5-c-data-list__toggle",
      "dataListToggleIcon": "pf-v5-c-data-list__toggle-icon",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "hidden": "pf-m-hidden",
        "hiddenOnSm": "pf-m-hidden-on-sm",
        "visibleOnSm": "pf-m-visible-on-sm",
        "hiddenOnMd": "pf-m-hidden-on-md",
        "visibleOnMd": "pf-m-visible-on-md",
        "hiddenOnLg": "pf-m-hidden-on-lg",
        "visibleOnLg": "pf-m-visible-on-lg",
        "hiddenOnXl": "pf-m-hidden-on-xl",
        "visibleOnXl": "pf-m-visible-on-xl",
        "hiddenOn_2xl": "pf-m-hidden-on-2xl",
        "visibleOn_2xl": "pf-m-visible-on-2xl",
        "icon": "pf-m-icon",
        "alignRight": "pf-m-align-right",
        "noFill": "pf-m-no-fill",
        "flex_2": "pf-m-flex-2",
        "flex_3": "pf-m-flex-3",
        "flex_4": "pf-m-flex-4",
        "flex_5": "pf-m-flex-5",
        "gridNone": "pf-m-grid-none",
        "gridSm": "pf-m-grid-sm",
        "gridMd": "pf-m-grid-md",
        "gridLg": "pf-m-grid-lg",
        "gridXl": "pf-m-grid-xl",
        "grid_2xl": "pf-m-grid-2xl",
        "compact": "pf-m-compact",
        "dragOver": "pf-m-drag-over",
        "truncate": "pf-m-truncate",
        "breakWord": "pf-m-break-word",
        "nowrap": "pf-m-nowrap",
        "clickable": "pf-m-clickable",
        "selected": "pf-m-selected",
        "ghostRow": "pf-m-ghost-row",
        "expanded": "pf-m-expanded",
        "disabled": "pf-m-disabled",
        "noPadding": "pf-m-no-padding"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataList.js
var React104, gridBreakpointClasses, DataListWrapModifier, DataListContext, DataList;
var init_DataList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataList.js"() {
    init_tslib_es6();
    React104 = __toESM(require_react());
    init_esm();
    init_data_list2();
    gridBreakpointClasses = {
      none: data_list_default.modifiers.gridNone,
      always: "pf-m-grid",
      sm: data_list_default.modifiers.gridSm,
      md: data_list_default.modifiers.gridMd,
      lg: data_list_default.modifiers.gridLg,
      xl: data_list_default.modifiers.gridXl,
      "2xl": data_list_default.modifiers.grid_2xl
    };
    (function(DataListWrapModifier2) {
      DataListWrapModifier2["nowrap"] = "nowrap";
      DataListWrapModifier2["truncate"] = "truncate";
      DataListWrapModifier2["breakWord"] = "breakWord";
    })(DataListWrapModifier || (DataListWrapModifier = {}));
    DataListContext = React104.createContext({
      isSelectable: false
    });
    DataList = class extends React104.Component {
      constructor(props) {
        super(props);
        this.ref = React104.createRef();
        this.getIndex = (id) => Array.from(this.ref.current.children).findIndex((item) => item.id === id);
      }
      render() {
        const _a = this.props, { className, children, "aria-label": ariaLabel, onSelectDataListItem, selectedDataListItemId, isCompact, wrapModifier, gridBreakpoint, onSelectableRowChange } = _a, props = __rest(_a, ["className", "children", "aria-label", "onSelectDataListItem", "selectedDataListItemId", "isCompact", "wrapModifier", "gridBreakpoint", "onSelectableRowChange"]);
        const isSelectable = onSelectDataListItem !== void 0;
        const updateSelectedDataListItem = (event, id) => {
          onSelectDataListItem(event, id);
        };
        return React104.createElement(
          DataListContext.Provider,
          { value: {
            isSelectable,
            selectedDataListItemId,
            updateSelectedDataListItem,
            onSelectableRowChange
          } },
          React104.createElement("ul", Object.assign({ className: css(data_list_default.dataList, isCompact && data_list_default.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && data_list_default.modifiers[wrapModifier], className), style: props.style, role: "list", "aria-label": ariaLabel }, props, { ref: this.ref }), children)
        );
      }
    };
    DataList.displayName = "DataList";
    DataList.defaultProps = {
      children: null,
      className: "",
      selectedDataListItemId: "",
      isCompact: false,
      gridBreakpoint: "md",
      wrapModifier: null
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js
var React105, DataListAction;
var init_DataListAction = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js"() {
    init_tslib_es6();
    React105 = __toESM(require_react());
    init_esm();
    init_data_list2();
    init_util();
    DataListAction = (_a) => {
      var {
        children,
        className,
        visibility,
        /* eslint-disable @typescript-eslint/no-unused-vars */
        id,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        /* eslint-disable @typescript-eslint/no-unused-vars */
        isPlainButtonAction
      } = _a, props = __rest(_a, ["children", "className", "visibility", "id", "aria-label", "aria-labelledby", "isPlainButtonAction"]);
      return React105.createElement("div", Object.assign({ className: css(data_list_default.dataListItemAction, formatBreakpointMods(visibility, data_list_default), className) }, props), isPlainButtonAction ? React105.createElement("div", { className: css(data_list_default.dataListAction) }, children) : children);
    };
    DataListAction.displayName = "DataListAction";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCell.js
var React106, DataListCell;
var init_DataListCell = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCell.js"() {
    init_tslib_es6();
    React106 = __toESM(require_react());
    init_esm();
    init_data_list2();
    DataListCell = (_a) => {
      var { children = null, className = "", width = 1, isFilled = true, alignRight = false, isIcon = false, wrapModifier = null } = _a, props = __rest(_a, ["children", "className", "width", "isFilled", "alignRight", "isIcon", "wrapModifier"]);
      return React106.createElement("div", Object.assign({ className: css(data_list_default.dataListCell, width > 1 && data_list_default.modifiers[`flex_${width}`], !isFilled && data_list_default.modifiers.noFill, alignRight && data_list_default.modifiers.alignRight, isIcon && data_list_default.modifiers.icon, className, wrapModifier && data_list_default.modifiers[wrapModifier]) }, props), children);
    };
    DataListCell.displayName = "DataListCell";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js
var React107, DataListCheck;
var init_DataListCheck = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js"() {
    init_tslib_es6();
    React107 = __toESM(require_react());
    init_esm();
    init_data_list2();
    DataListCheck = (_a) => {
      var {
        className = "",
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onChange = (event, checked2) => {
        },
        isValid = true,
        isDisabled = false,
        isChecked = false,
        checked = false,
        defaultChecked,
        otherControls = false
      } = _a, props = __rest(_a, ["className", "onChange", "isValid", "isDisabled", "isChecked", "checked", "defaultChecked", "otherControls"]);
      const check = React107.createElement(
        "div",
        { className: css(data_list_default.dataListCheck) },
        React107.createElement("input", Object.assign({}, props, { type: "checkbox", onChange: (event) => onChange(event, event.currentTarget.checked), "aria-invalid": !isValid, disabled: isDisabled }, [true, false].includes(defaultChecked) && { defaultChecked }, ![true, false].includes(defaultChecked) && { checked: isChecked || checked }))
      );
      return React107.createElement(
        React107.Fragment,
        null,
        !otherControls && React107.createElement("div", { className: css(data_list_default.dataListItemControl, className) }, check),
        otherControls && check
      );
    };
    DataListCheck.displayName = "DataListCheck";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListControl.js
var React108, DataListControl;
var init_DataListControl = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListControl.js"() {
    init_tslib_es6();
    React108 = __toESM(require_react());
    init_esm();
    init_data_list2();
    DataListControl = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React108.createElement("div", Object.assign({ className: css(data_list_default.dataListItemControl, className) }, props), children);
    };
    DataListControl.displayName = "DataListControl";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/grip-vertical-icon.js
var GripVerticalIconConfig, GripVerticalIcon, grip_vertical_icon_default;
var init_grip_vertical_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/grip-vertical-icon.js"() {
    init_createIcon();
    GripVerticalIconConfig = {
      name: "GripVerticalIcon",
      height: 512,
      width: 320,
      svgPath: "M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z",
      yOffset: 0,
      xOffset: 0
    };
    GripVerticalIcon = createIcon(GripVerticalIconConfig);
    grip_vertical_icon_default = GripVerticalIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListDragButton.js
var React109, DataListDragButton;
var init_DataListDragButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListDragButton.js"() {
    init_tslib_es6();
    React109 = __toESM(require_react());
    init_esm();
    init_data_list2();
    init_grip_vertical_icon();
    DataListDragButton = (_a) => {
      var { className = "", isDisabled = false } = _a, props = __rest(_a, ["className", "isDisabled"]);
      return React109.createElement(
        "button",
        Object.assign({ className: css(data_list_default.dataListItemDraggableButton, isDisabled && data_list_default.modifiers.disabled, className), type: "button", disabled: isDisabled }, props),
        React109.createElement(
          "span",
          { className: css(data_list_default.dataListItemDraggableIcon) },
          React109.createElement(grip_vertical_icon_default, null)
        )
      );
    };
    DataListDragButton.displayName = "DataListDragButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItem.js
var React110, DataListItem;
var init_DataListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItem.js"() {
    init_tslib_es6();
    React110 = __toESM(require_react());
    init_esm();
    init_data_list2();
    init_DataList();
    init_constants();
    DataListItem = class extends React110.Component {
      render() {
        const _a = this.props, { children, isExpanded, className, id, "aria-labelledby": ariaLabelledBy, selectableInputAriaLabel } = _a, props = __rest(_a, ["children", "isExpanded", "className", "id", "aria-labelledby", "selectableInputAriaLabel"]);
        return React110.createElement(DataListContext.Consumer, null, ({ isSelectable, selectedDataListItemId, updateSelectedDataListItem, onSelectableRowChange }) => {
          const selectDataListItem = (event) => {
            let target = event.target;
            while (event.currentTarget !== target) {
              if ("onclick" in target && target.onclick || target.parentNode.classList.contains(data_list_default.dataListItemAction) || target.parentNode.classList.contains(data_list_default.dataListItemControl)) {
                return;
              } else {
                target = target.parentNode;
              }
            }
            updateSelectedDataListItem(event, id);
          };
          const onKeyDown = (event) => {
            if ([KeyTypes.Enter, KeyTypes.Space].includes(event.key)) {
              event.preventDefault();
              updateSelectedDataListItem(event, id);
            }
          };
          const isSelected = selectedDataListItemId === id;
          const selectableInputAriaProps = selectableInputAriaLabel ? { "aria-label": selectableInputAriaLabel } : { "aria-labelledby": ariaLabelledBy };
          return React110.createElement(
            "li",
            Object.assign({ id, className: css(data_list_default.dataListItem, isExpanded && data_list_default.modifiers.expanded, isSelectable && data_list_default.modifiers.clickable, selectedDataListItemId && isSelected && data_list_default.modifiers.selected, className), "aria-labelledby": ariaLabelledBy }, isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown }, isSelectable && isSelected && { "aria-selected": true }, props),
            onSelectableRowChange && React110.createElement("input", Object.assign({ className: "pf-v5-screen-reader", type: "radio", checked: isSelected, onChange: (event) => onSelectableRowChange(event, id), tabIndex: -1 }, selectableInputAriaProps)),
            React110.Children.map(children, (child) => React110.isValidElement(child) && React110.cloneElement(child, {
              rowid: ariaLabelledBy
            }))
          );
        });
      }
    };
    DataListItem.displayName = "DataListItem";
    DataListItem.defaultProps = {
      isExpanded: false,
      className: "",
      id: "",
      children: null,
      "aria-labelledby": ""
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemCells.js
var React111, DataListItemCells;
var init_DataListItemCells = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemCells.js"() {
    init_tslib_es6();
    React111 = __toESM(require_react());
    init_esm();
    init_data_list2();
    DataListItemCells = (_a) => {
      var {
        className = "",
        dataListCells,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        rowid = ""
      } = _a, props = __rest(_a, ["className", "dataListCells", "rowid"]);
      return React111.createElement("div", Object.assign({ className: css(data_list_default.dataListItemContent, className) }, props), dataListCells);
    };
    DataListItemCells.displayName = "DataListItemCells";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemRow.js
var React112, DataListItemRow;
var init_DataListItemRow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemRow.js"() {
    init_tslib_es6();
    React112 = __toESM(require_react());
    init_esm();
    init_data_list2();
    DataListItemRow = (_a) => {
      var { children, className = "", rowid = "", wrapModifier = null } = _a, props = __rest(_a, ["children", "className", "rowid", "wrapModifier"]);
      return React112.createElement("div", Object.assign({ className: css(data_list_default.dataListItemRow, className, wrapModifier && data_list_default.modifiers[wrapModifier]) }, props), React112.Children.map(children, (child) => React112.isValidElement(child) && React112.cloneElement(child, {
        rowid
      })));
    };
    DataListItemRow.displayName = "DataListItemRow";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListToggle.js
var React113, DataListToggle;
var init_DataListToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListToggle.js"() {
    init_tslib_es6();
    React113 = __toESM(require_react());
    init_esm();
    init_angle_right_icon();
    init_data_list2();
    init_Button2();
    DataListToggle = (_a) => {
      var { className = "", isExpanded = false, "aria-controls": ariaControls = "", "aria-label": ariaLabel = "Details", rowid = "", id, buttonProps } = _a, props = __rest(_a, ["className", "isExpanded", "aria-controls", "aria-label", "rowid", "id", "buttonProps"]);
      return React113.createElement(
        "div",
        Object.assign({ className: css(data_list_default.dataListItemControl, className) }, props),
        React113.createElement(
          "div",
          { className: css(data_list_default.dataListToggle) },
          React113.createElement(
            Button,
            Object.assign({ id, variant: ButtonVariant.plain, "aria-controls": ariaControls !== "" && ariaControls, "aria-label": ariaLabel, "aria-labelledby": ariaLabel !== "Details" ? null : `${rowid} ${id}`, "aria-expanded": isExpanded }, buttonProps),
            React113.createElement(
              "div",
              { className: css(data_list_default.dataListToggleIcon) },
              React113.createElement(angle_right_icon_default, null)
            )
          )
        )
      );
    };
    DataListToggle.displayName = "DataListToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListContent.js
var React114, DataListContent;
var init_DataListContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListContent.js"() {
    init_tslib_es6();
    React114 = __toESM(require_react());
    init_esm();
    init_data_list2();
    DataListContent = (_a) => {
      var {
        className = "",
        children = null,
        id = "",
        isHidden: isHidden3 = false,
        "aria-label": ariaLabel,
        hasNoPadding = false,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        rowid = ""
      } = _a, props = __rest(_a, ["className", "children", "id", "isHidden", "aria-label", "hasNoPadding", "rowid"]);
      return React114.createElement(
        "section",
        Object.assign({ id, className: css(data_list_default.dataListExpandableContent, className), hidden: isHidden3, "aria-label": ariaLabel }, props),
        React114.createElement("div", { className: css(data_list_default.dataListExpandableContentBody, hasNoPadding && data_list_default.modifiers.noPadding) }, children)
      );
    };
    DataListContent.displayName = "DataListContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListText.js
var React115, DataListText;
var init_DataListText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListText.js"() {
    init_tslib_es6();
    React115 = __toESM(require_react());
    init_esm();
    init_data_list2();
    init_Tooltip2();
    DataListText = (_a) => {
      var { children = null, className = "", component = "span", wrapModifier = null, tooltip: tooltipProp = "", onMouseEnter: onMouseEnterProp = () => {
      } } = _a, props = __rest(_a, ["children", "className", "component", "wrapModifier", "tooltip", "onMouseEnter"]);
      const Component44 = component;
      const [tooltip, setTooltip] = React115.useState("");
      const onMouseEnter = (event) => {
        if (event.target.offsetWidth < event.target.scrollWidth) {
          setTooltip(tooltipProp || event.target.innerHTML);
        } else {
          setTooltip("");
        }
        onMouseEnterProp(event);
      };
      const text = React115.createElement(Component44, Object.assign({ onMouseEnter, className: css(className, wrapModifier && data_list_default.modifiers[wrapModifier], data_list_default.dataListText) }, props), children);
      return tooltip !== "" ? React115.createElement(Tooltip, { content: tooltip, isVisible: true }, text) : text;
    };
    DataListText.displayName = "DataListText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DataList/index.js
var init_DataList2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DataList/index.js"() {
    init_DataList();
    init_DataListAction();
    init_DataListCell();
    init_DataListCheck();
    init_DataListControl();
    init_DataListDragButton();
    init_DataListItem();
    init_DataListItemCells();
    init_DataListItemRow();
    init_DataListToggle();
    init_DataListContent();
    init_DataListText();
  }
});

// node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.css
var init_date_picker = __esm({
  "node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.mjs
var date_picker_default;
var init_date_picker2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.mjs"() {
    init_date_picker();
    date_picker_default = {
      "datePicker": "pf-v5-c-date-picker",
      "datePickerCalendar": "pf-v5-c-date-picker__calendar",
      "datePickerHelperText": "pf-v5-c-date-picker__helper-text",
      "datePickerInput": "pf-v5-c-date-picker__input",
      "formControl": "pf-v5-c-form-control",
      "modifiers": {
        "alignRight": "pf-m-align-right",
        "top": "pf-m-top",
        "static": "pf-m-static"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Popover/popover.css
var init_popover = __esm({
  "node_modules/@patternfly/react-styles/css/components/Popover/popover.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Popover/popover.mjs
var popover_default;
var init_popover2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Popover/popover.mjs"() {
    init_popover();
    popover_default = {
      "modifiers": {
        "noPadding": "pf-m-no-padding",
        "widthAuto": "pf-m-width-auto",
        "top": "pf-m-top",
        "topLeft": "pf-m-top-left",
        "topRight": "pf-m-top-right",
        "bottom": "pf-m-bottom",
        "bottomLeft": "pf-m-bottom-left",
        "bottomRight": "pf-m-bottom-right",
        "left": "pf-m-left",
        "leftTop": "pf-m-left-top",
        "leftBottom": "pf-m-left-bottom",
        "right": "pf-m-right",
        "rightTop": "pf-m-right-top",
        "rightBottom": "pf-m-right-bottom",
        "danger": "pf-m-danger",
        "warning": "pf-m-warning",
        "success": "pf-m-success",
        "custom": "pf-m-custom",
        "info": "pf-m-info"
      },
      "popover": "pf-v5-c-popover",
      "popoverArrow": "pf-v5-c-popover__arrow",
      "popoverBody": "pf-v5-c-popover__body",
      "popoverClose": "pf-v5-c-popover__close",
      "popoverContent": "pf-v5-c-popover__content",
      "popoverFooter": "pf-v5-c-popover__footer",
      "popoverHeader": "pf-v5-c-popover__header",
      "popoverTitle": "pf-v5-c-popover__title",
      "popoverTitleIcon": "pf-v5-c-popover__title-icon",
      "popoverTitleText": "pf-v5-c-popover__title-text",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContext.js
var React116, PopoverContext;
var init_PopoverContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContext.js"() {
    React116 = __toESM(require_react());
    PopoverContext = React116.createContext({});
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContent.js
var React117, PopoverContent;
var init_PopoverContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContent.js"() {
    init_tslib_es6();
    React117 = __toESM(require_react());
    init_popover2();
    init_esm();
    PopoverContent = (_a) => {
      var { className = null, children } = _a, props = __rest(_a, ["className", "children"]);
      return React117.createElement("div", Object.assign({ className: css(popover_default.popoverContent, className) }, props), children);
    };
    PopoverContent.displayName = "PopoverContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverBody.js
var React118, PopoverBody;
var init_PopoverBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverBody.js"() {
    init_tslib_es6();
    React118 = __toESM(require_react());
    init_popover2();
    init_esm();
    PopoverBody = (_a) => {
      var { children, id, className } = _a, props = __rest(_a, ["children", "id", "className"]);
      return React118.createElement("div", Object.assign({ className: css(popover_default.popoverBody, className), id }, props), children);
    };
    PopoverBody.displayName = "PopoverBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderIcon.js
var React119, PopoverHeaderIcon;
var init_PopoverHeaderIcon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderIcon.js"() {
    init_tslib_es6();
    React119 = __toESM(require_react());
    init_esm();
    init_popover2();
    PopoverHeaderIcon = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React119.createElement("span", Object.assign({ className: css(popover_default.popoverTitleIcon, className) }, props), children);
    };
    PopoverHeaderIcon.displayName = "PopoverHeaderIcon";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderText.js
var React120, PopoverHeaderText;
var init_PopoverHeaderText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderText.js"() {
    init_tslib_es6();
    React120 = __toESM(require_react());
    init_esm();
    init_popover2();
    PopoverHeaderText = (_a) => {
      var { children, className, headingLevel } = _a, props = __rest(_a, ["children", "className", "headingLevel"]);
      const HeadingLevel = headingLevel;
      return React120.createElement(HeadingLevel, Object.assign({ className: css(popover_default.popoverTitleText, className) }, props), children);
    };
    PopoverHeaderText.displayName = "PopoverHeaderText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeader.js
var React121, PopoverHeader;
var init_PopoverHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeader.js"() {
    init_tslib_es6();
    React121 = __toESM(require_react());
    init_esm();
    init_popover2();
    init_PopoverHeaderIcon();
    init_PopoverHeaderText();
    PopoverHeader = (_a) => {
      var { children, icon, className, titleHeadingLevel = "h6", alertSeverityVariant, id, alertSeverityScreenReaderText } = _a, props = __rest(_a, ["children", "icon", "className", "titleHeadingLevel", "alertSeverityVariant", "id", "alertSeverityScreenReaderText"]);
      return React121.createElement(
        "header",
        Object.assign({ className: css(popover_default.popoverHeader, className) }, props),
        React121.createElement(
          "div",
          { className: css(popover_default.popoverTitle), id },
          icon && React121.createElement(PopoverHeaderIcon, null, icon),
          React121.createElement(
            PopoverHeaderText,
            { headingLevel: titleHeadingLevel },
            alertSeverityVariant && alertSeverityScreenReaderText && React121.createElement("span", { className: "pf-v5-screen-reader" }, alertSeverityScreenReaderText),
            children
          )
        )
      );
    };
    PopoverHeader.displayName = "PopoverHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverFooter.js
var React122, PopoverFooter;
var init_PopoverFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverFooter.js"() {
    init_tslib_es6();
    React122 = __toESM(require_react());
    init_popover2();
    init_esm();
    PopoverFooter = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React122.createElement("footer", Object.assign({ className: css(popover_default.popoverFooter, className) }, props), children);
    };
    PopoverFooter.displayName = "PopoverFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverCloseButton.js
var React123, PopoverCloseButton;
var init_PopoverCloseButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverCloseButton.js"() {
    init_tslib_es6();
    React123 = __toESM(require_react());
    init_esm();
    init_popover2();
    init_Button2();
    init_times_icon();
    PopoverCloseButton = (_a) => {
      var { onClose = () => void 0 } = _a, props = __rest(_a, ["onClose"]);
      return React123.createElement(
        "div",
        { className: css(popover_default.popoverClose) },
        React123.createElement(
          Button,
          Object.assign({ onClick: onClose, variant: "plain", "aria-label": true }, props, { style: { pointerEvents: "auto" } }),
          React123.createElement(times_icon_default, null)
        )
      );
    };
    PopoverCloseButton.displayName = "PopoverCloseButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverArrow.js
var React124, PopoverArrow;
var init_PopoverArrow = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverArrow.js"() {
    init_tslib_es6();
    React124 = __toESM(require_react());
    init_popover2();
    init_esm();
    PopoverArrow = (_a) => {
      var { className = "" } = _a, props = __rest(_a, ["className"]);
      return React124.createElement("div", Object.assign({ className: css(popover_default.popoverArrow, className) }, props));
    };
    PopoverArrow.displayName = "PopoverArrow";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_popover_MaxWidth.js
var c_popover_MaxWidth, c_popover_MaxWidth_default;
var init_c_popover_MaxWidth = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_popover_MaxWidth.js"() {
    c_popover_MaxWidth = {
      "name": "--pf-v5-c-popover--MaxWidth",
      "value": "none",
      "var": "var(--pf-v5-c-popover--MaxWidth)"
    };
    c_popover_MaxWidth_default = c_popover_MaxWidth;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_popover_MinWidth.js
var c_popover_MinWidth, c_popover_MinWidth_default;
var init_c_popover_MinWidth = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_popover_MinWidth.js"() {
    c_popover_MinWidth = {
      "name": "--pf-v5-c-popover--MinWidth",
      "value": "auto",
      "var": "var(--pf-v5-c-popover--MinWidth)"
    };
    c_popover_MinWidth_default = c_popover_MinWidth;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/Popover.js
var React125, PopoverPosition, alertStyle, Popover;
var init_Popover = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/Popover.js"() {
    init_tslib_es6();
    React125 = __toESM(require_react());
    init_constants();
    init_popover2();
    init_esm();
    init_PopoverContext();
    init_PopoverContent();
    init_PopoverBody();
    init_PopoverHeader();
    init_PopoverFooter();
    init_PopoverCloseButton();
    init_PopoverArrow();
    init_c_popover_MaxWidth();
    init_c_popover_MinWidth();
    init_helpers();
    init_Popper2();
    init_util();
    (function(PopoverPosition2) {
      PopoverPosition2["auto"] = "auto";
      PopoverPosition2["top"] = "top";
      PopoverPosition2["bottom"] = "bottom";
      PopoverPosition2["left"] = "left";
      PopoverPosition2["right"] = "right";
      PopoverPosition2["topStart"] = "top-start";
      PopoverPosition2["topEnd"] = "top-end";
      PopoverPosition2["bottomStart"] = "bottom-start";
      PopoverPosition2["bottomEnd"] = "bottom-end";
      PopoverPosition2["leftStart"] = "left-start";
      PopoverPosition2["leftEnd"] = "left-end";
      PopoverPosition2["rightStart"] = "right-start";
      PopoverPosition2["rightEnd"] = "right-end";
    })(PopoverPosition || (PopoverPosition = {}));
    alertStyle = {
      custom: popover_default.modifiers.custom,
      info: popover_default.modifiers.info,
      success: popover_default.modifiers.success,
      warning: popover_default.modifiers.warning,
      danger: popover_default.modifiers.danger
    };
    Popover = (_a) => {
      var { children, position = "top", enableFlip = true, className = "", isVisible = null, shouldClose = () => null, shouldOpen = () => null, "aria-label": ariaLabel = "", bodyContent, headerContent = null, headerComponent = "h6", headerIcon = null, alertSeverityVariant, alertSeverityScreenReaderText, footerContent = null, appendTo = () => document.body, hideOnOutsideClick = true, onHide = () => null, onHidden = () => null, onShow = () => null, onShown = () => null, onMount = () => null, zIndex = 9999, triggerAction = "click", minWidth = c_popover_MinWidth_default && c_popover_MinWidth_default.value, maxWidth = c_popover_MaxWidth_default && c_popover_MaxWidth_default.value, closeBtnAriaLabel = "Close", showClose = true, distance = 25, flipBehavior = [
        "top",
        "bottom",
        "left",
        "right",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "left-start",
        "left-end",
        "right-start",
        "right-end"
      ], animationDuration = 300, id, withFocusTrap: propWithFocusTrap, triggerRef, hasNoPadding = false, hasAutoWidth = false, elementToFocus } = _a, rest = __rest(_a, ["children", "position", "enableFlip", "className", "isVisible", "shouldClose", "shouldOpen", "aria-label", "bodyContent", "headerContent", "headerComponent", "headerIcon", "alertSeverityVariant", "alertSeverityScreenReaderText", "footerContent", "appendTo", "hideOnOutsideClick", "onHide", "onHidden", "onShow", "onShown", "onMount", "zIndex", "triggerAction", "minWidth", "maxWidth", "closeBtnAriaLabel", "showClose", "distance", "flipBehavior", "animationDuration", "id", "withFocusTrap", "triggerRef", "hasNoPadding", "hasAutoWidth", "elementToFocus"]);
      const uniqueId = id || getUniqueId();
      const triggerManually = isVisible !== null;
      const [visible, setVisible] = React125.useState(false);
      const [focusTrapActive, setFocusTrapActive] = React125.useState(Boolean(propWithFocusTrap));
      const popoverRef = React125.useRef(null);
      React125.useEffect(() => {
        onMount();
      }, []);
      React125.useEffect(() => {
        if (triggerManually) {
          if (isVisible) {
            show(void 0, true);
          } else {
            hide2();
          }
        }
      }, [isVisible, triggerManually]);
      const show = (event, withFocusTrap) => {
        event && onShow(event);
        setVisible(true);
        propWithFocusTrap !== false && withFocusTrap && setFocusTrapActive(true);
      };
      const hide2 = (event) => {
        event && onHide(event);
        setVisible(false);
      };
      const positionModifiers = {
        top: popover_default.modifiers.top,
        bottom: popover_default.modifiers.bottom,
        left: popover_default.modifiers.left,
        right: popover_default.modifiers.right,
        "top-start": popover_default.modifiers.topLeft,
        "top-end": popover_default.modifiers.topRight,
        "bottom-start": popover_default.modifiers.bottomLeft,
        "bottom-end": popover_default.modifiers.bottomRight,
        "left-start": popover_default.modifiers.leftTop,
        "left-end": popover_default.modifiers.leftBottom,
        "right-start": popover_default.modifiers.rightTop,
        "right-end": popover_default.modifiers.rightBottom
      };
      const hasCustomMinWidth = minWidth !== c_popover_MinWidth_default.value;
      const hasCustomMaxWidth = maxWidth !== c_popover_MaxWidth_default.value;
      const onDocumentKeyDown = (event) => {
        if (event.key === KeyTypes.Escape && visible) {
          if (triggerManually) {
            shouldClose(event, hide2);
          } else {
            hide2(event);
          }
        }
      };
      const onDocumentClick = (event, triggerElement, popperElement) => {
        if (hideOnOutsideClick && visible) {
          const isFromChild = popperElement && popperElement.contains(event.target);
          const isFromTrigger = triggerElement && triggerElement.contains(event.target);
          if (isFromChild || isFromTrigger) {
            return;
          }
          if (triggerManually) {
            shouldClose(event, hide2);
          } else {
            hide2(event);
          }
        }
      };
      const onTriggerClick = (event) => {
        if (triggerManually) {
          if (visible) {
            shouldClose(event, hide2);
          } else {
            shouldOpen(event, show);
          }
        } else {
          if (visible) {
            hide2(event);
          } else {
            show(event, true);
          }
        }
      };
      const onContentMouseDown = () => {
        if (focusTrapActive) {
          setFocusTrapActive(false);
        }
      };
      const onMouseEnter = (event) => {
        if (triggerManually) {
          shouldOpen(event, show);
        } else {
          show(event, false);
        }
      };
      const onMouseLeave = (event) => {
        if (triggerManually) {
          shouldClose(event, hide2);
        } else {
          hide2(event);
        }
      };
      const onFocus = (event) => {
        if (triggerManually) {
          shouldOpen(event, show);
        } else {
          show(event, false);
        }
      };
      const onBlur = (event) => {
        if (triggerManually) {
          shouldClose(event, hide2);
        } else {
          hide2(event);
        }
      };
      const closePopover = (event) => {
        event.stopPropagation();
        if (triggerManually) {
          shouldClose(event, hide2);
        } else {
          hide2(event);
        }
      };
      const content = React125.createElement(
        FocusTrap,
        Object.assign({ ref: popoverRef, active: focusTrapActive, focusTrapOptions: {
          returnFocusOnDeactivate: propWithFocusTrap !== false,
          clickOutsideDeactivates: true,
          // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
          // We want to prevent this in case false is ever passed in.
          initialFocus: elementToFocus || void 0,
          checkCanFocusTrap: (containers) => new Promise((resolve) => {
            const interval = setInterval(() => {
              if (containers.every((container) => getComputedStyle(container).visibility !== "hidden")) {
                resolve();
                clearInterval(interval);
              }
            }, 10);
          }),
          tabbableOptions: { displayCheck: "none" },
          fallbackFocus: () => {
            let node = null;
            if (document && document.activeElement) {
              node = document.activeElement;
            }
            return node;
          }
        }, preventScrollOnDeactivate: true, className: css(popover_default.popover, alertSeverityVariant && alertStyle[alertSeverityVariant], hasNoPadding && popover_default.modifiers.noPadding, hasAutoWidth && popover_default.modifiers.widthAuto, className), role: "dialog", "aria-modal": "true", "aria-label": headerContent ? void 0 : ariaLabel, "aria-labelledby": headerContent ? `popover-${uniqueId}-header` : void 0, "aria-describedby": `popover-${uniqueId}-body`, onMouseDown: onContentMouseDown, style: {
          minWidth: hasCustomMinWidth ? minWidth : null,
          maxWidth: hasCustomMaxWidth ? maxWidth : null
        } }, rest),
        React125.createElement(PopoverArrow, null),
        React125.createElement(
          PopoverContent,
          null,
          showClose && triggerAction === "click" && React125.createElement(PopoverCloseButton, { onClose: closePopover, "aria-label": closeBtnAriaLabel }),
          headerContent && React125.createElement(PopoverHeader, { id: `popover-${uniqueId}-header`, icon: headerIcon, alertSeverityVariant, alertSeverityScreenReaderText: alertSeverityScreenReaderText || `${alertSeverityVariant} alert:`, titleHeadingLevel: headerComponent }, typeof headerContent === "function" ? headerContent(hide2) : headerContent),
          React125.createElement(PopoverBody, { id: `popover-${uniqueId}-body` }, typeof bodyContent === "function" ? bodyContent(hide2) : bodyContent),
          footerContent && React125.createElement(PopoverFooter, { id: `popover-${uniqueId}-footer` }, typeof footerContent === "function" ? footerContent(hide2) : footerContent)
        )
      );
      return React125.createElement(
        PopoverContext.Provider,
        { value: { headerComponent } },
        React125.createElement(Popper, { trigger: children, triggerRef, popper: content, popperRef: popoverRef, minWidth, appendTo, isVisible: visible, onMouseEnter: triggerAction === "hover" && onMouseEnter, onMouseLeave: triggerAction === "hover" && onMouseLeave, onPopperMouseEnter: triggerAction === "hover" && onMouseEnter, onPopperMouseLeave: triggerAction === "hover" && onMouseLeave, onFocus: triggerAction === "hover" && onFocus, onBlur: triggerAction === "hover" && onBlur, positionModifiers, distance, placement: position, onTriggerClick: triggerAction === "click" && onTriggerClick, onDocumentClick, onDocumentKeyDown, enableFlip, zIndex, flipBehavior, animationDuration, onHidden, onShown, onHide: () => setFocusTrapActive(false) })
      );
    };
    Popover.displayName = "Popover";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon.js
var OutlinedCalendarAltIconConfig, OutlinedCalendarAltIcon, outlined_calendar_alt_icon_default;
var init_outlined_calendar_alt_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon.js"() {
    init_createIcon();
    OutlinedCalendarAltIconConfig = {
      name: "OutlinedCalendarAltIcon",
      height: 512,
      width: 448,
      svgPath: "M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z",
      yOffset: 0,
      xOffset: 0
    };
    OutlinedCalendarAltIcon = createIcon(OutlinedCalendarAltIconConfig);
    outlined_calendar_alt_icon_default = OutlinedCalendarAltIcon;
  }
});

// node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.css
var init_helper_text = __esm({
  "node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs
var helper_text_default;
var init_helper_text2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs"() {
    init_helper_text();
    helper_text_default = {
      "helperText": "pf-v5-c-helper-text",
      "helperTextItem": "pf-v5-c-helper-text__item",
      "helperTextItemIcon": "pf-v5-c-helper-text__item-icon",
      "helperTextItemText": "pf-v5-c-helper-text__item-text",
      "modifiers": {
        "hidden": "pf-m-hidden",
        "indeterminate": "pf-m-indeterminate",
        "warning": "pf-m-warning",
        "success": "pf-m-success",
        "error": "pf-m-error",
        "dynamic": "pf-m-dynamic"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js
var React126, HelperText;
var init_HelperText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js"() {
    init_tslib_es6();
    React126 = __toESM(require_react());
    init_helper_text2();
    init_esm();
    HelperText = (_a) => {
      var { children, className, component = "div", id, isLiveRegion = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "component", "id", "isLiveRegion", "aria-label"]);
      const Component44 = component;
      return React126.createElement(Component44, Object.assign({ id, className: css(helper_text_default.helperText, className) }, isLiveRegion && { "aria-live": "polite" }, component === "ul" && { role: "list", "aria-label": ariaLabel }, props), children);
    };
    HelperText.displayName = "HelperText";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js
var MinusIconConfig, MinusIcon, minus_icon_default;
var init_minus_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js"() {
    init_createIcon();
    MinusIconConfig = {
      name: "MinusIcon",
      height: 512,
      width: 448,
      svgPath: "M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z",
      yOffset: 0,
      xOffset: 0
    };
    MinusIcon = createIcon(MinusIconConfig);
    minus_icon_default = MinusIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js
var React127, variantStyle, HelperTextItem;
var init_HelperTextItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js"() {
    init_tslib_es6();
    React127 = __toESM(require_react());
    init_helper_text2();
    init_esm();
    init_minus_icon();
    init_exclamation_triangle_icon();
    init_check_circle_icon();
    init_exclamation_circle_icon();
    variantStyle = {
      default: "",
      indeterminate: helper_text_default.modifiers.indeterminate,
      warning: helper_text_default.modifiers.warning,
      success: helper_text_default.modifiers.success,
      error: helper_text_default.modifiers.error
    };
    HelperTextItem = (_a) => {
      var { children, className, component = "div", variant = "default", icon, isDynamic = false, hasIcon = isDynamic, id, screenReaderText = `${variant} status` } = _a, props = __rest(_a, ["children", "className", "component", "variant", "icon", "isDynamic", "hasIcon", "id", "screenReaderText"]);
      const Component44 = component;
      return React127.createElement(
        Component44,
        Object.assign({ className: css(helper_text_default.helperTextItem, variantStyle[variant], isDynamic && helper_text_default.modifiers.dynamic, className), id }, props),
        icon && React127.createElement("span", { className: css(helper_text_default.helperTextItemIcon), "aria-hidden": true }, icon),
        hasIcon && !icon && React127.createElement(
          "span",
          { className: css(helper_text_default.helperTextItemIcon), "aria-hidden": true },
          (variant === "default" || variant === "indeterminate") && React127.createElement(minus_icon_default, null),
          variant === "warning" && React127.createElement(exclamation_triangle_icon_default, null),
          variant === "success" && React127.createElement(check_circle_icon_default, null),
          variant === "error" && React127.createElement(exclamation_circle_icon_default, null)
        ),
        React127.createElement(
          "span",
          { className: css(helper_text_default.helperTextItemText) },
          children,
          isDynamic && React127.createElement(
            "span",
            { className: "pf-v5-screen-reader" },
            ": ",
            screenReaderText,
            ";"
          )
        )
      );
    };
    HelperTextItem.displayName = "HelperTextItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/index.js
var init_HelperText2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/HelperText/index.js"() {
    init_HelperText();
    init_HelperTextItem();
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_width_chars.js
var c_date_picker__input_c_form_control_width_chars, c_date_picker_input_c_form_control_width_chars_default;
var init_c_date_picker_input_c_form_control_width_chars = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_width_chars.js"() {
    c_date_picker__input_c_form_control_width_chars = {
      "name": "--pf-v5-c-date-picker__input--c-form-control--width-chars",
      "value": "10",
      "var": "var(--pf-v5-c-date-picker__input--c-form-control--width-chars)"
    };
    c_date_picker_input_c_form_control_width_chars_default = c_date_picker__input_c_form_control_width_chars;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js
var React128, import_react14, yyyyMMddFormat, DatePickerBase, DatePicker;
var init_DatePicker = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js"() {
    init_tslib_es6();
    React128 = __toESM(require_react());
    init_esm();
    init_date_picker2();
    init_button2();
    init_calendar_month2();
    init_TextInput();
    init_Popover();
    init_InputGroup2();
    init_outlined_calendar_alt_icon();
    init_CalendarMonth2();
    import_react14 = __toESM(require_react());
    init_helpers();
    init_datetimeUtils();
    init_HelperText2();
    init_c_date_picker_input_c_form_control_width_chars();
    yyyyMMddFormat = (date) => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
    DatePickerBase = (_a, ref) => {
      var { className, locale = void 0, dateFormat = yyyyMMddFormat, dateParse = (val) => val.split("-").length === 3 ? /* @__PURE__ */ new Date(`${val}T00:00:00`) : /* @__PURE__ */ new Date(void 0), isDisabled = false, placeholder = "YYYY-MM-DD", value: valueProp = "", "aria-label": ariaLabel = "Date picker", buttonAriaLabel = "Toggle date picker", onChange = () => void 0, onBlur = () => void 0, invalidFormatText = "Invalid date", requiredDateOptions, helperText, appendTo = "inline", popoverProps, monthFormat, weekdayFormat, longWeekdayFormat, dayFormat, weekStart, validators = [], rangeStart, style: styleProps = {}, inputProps = {} } = _a, props = __rest(_a, ["className", "locale", "dateFormat", "dateParse", "isDisabled", "placeholder", "value", "aria-label", "buttonAriaLabel", "onChange", "onBlur", "invalidFormatText", "requiredDateOptions", "helperText", "appendTo", "popoverProps", "monthFormat", "weekdayFormat", "longWeekdayFormat", "dayFormat", "weekStart", "validators", "rangeStart", "style", "inputProps"]);
      const [value, setValue] = React128.useState(valueProp);
      const [valueDate, setValueDate] = React128.useState(dateParse(value));
      const [errorText, setErrorText] = React128.useState("");
      const [popoverOpen, setPopoverOpen] = React128.useState(false);
      const [selectOpen, setSelectOpen] = React128.useState(false);
      const [pristine, setPristine] = React128.useState(true);
      const [textInputFocused, setTextInputFocused] = React128.useState(false);
      const widthChars = React128.useMemo(() => Math.max(dateFormat(/* @__PURE__ */ new Date()).length, placeholder.length), [dateFormat]);
      const style = Object.assign({ [c_date_picker_input_c_form_control_width_chars_default.name]: widthChars }, styleProps);
      const buttonRef = React128.useRef();
      const datePickerWrapperRef = React128.useRef();
      const triggerRef = React128.useRef();
      const dateIsRequired = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) || false;
      const emptyDateText = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.emptyDateText) || "Date cannot be blank";
      React128.useEffect(() => {
        setValue(valueProp);
        setValueDate(dateParse(valueProp));
      }, [valueProp]);
      React128.useEffect(() => {
        setPristine(!value);
        const newValueDate = dateParse(value);
        if (errorText && isValidDate(newValueDate)) {
          setError(newValueDate);
        }
        if (value === "" && !pristine && !textInputFocused) {
          dateIsRequired ? setErrorText(emptyDateText) : setErrorText("");
        }
      }, [value]);
      const setError = (date) => {
        setErrorText(validators.map((validator) => validator(date)).join("\n") || "");
      };
      const onTextInput = (event, value2) => {
        setValue(value2);
        setErrorText("");
        const newValueDate = dateParse(value2);
        setValueDate(newValueDate);
        if (isValidDate(newValueDate)) {
          onChange(event, value2, new Date(newValueDate));
        } else {
          onChange(event, value2);
        }
      };
      const onInputBlur = (event) => {
        setTextInputFocused(false);
        const newValueDate = dateParse(value);
        const dateIsValid = isValidDate(newValueDate);
        const onBlurDateArg = dateIsValid ? new Date(newValueDate) : void 0;
        onBlur(event, value, onBlurDateArg);
        if (dateIsValid) {
          setError(newValueDate);
        }
        if (!dateIsValid && !pristine) {
          setErrorText(invalidFormatText);
        }
        if (!dateIsValid && pristine && (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired)) {
          setErrorText(emptyDateText);
        }
      };
      const onDateClick = (_event, newValueDate) => {
        const newValue = dateFormat(newValueDate);
        setValue(newValue);
        setValueDate(newValueDate);
        setError(newValueDate);
        setPopoverOpen(false);
        onChange(null, newValue, new Date(newValueDate));
      };
      const onKeyPress = (ev) => {
        if (ev.key === "Enter" && value) {
          if (isValidDate(valueDate)) {
            setError(valueDate);
          } else {
            setErrorText(invalidFormatText);
          }
        }
      };
      (0, import_react14.useImperativeHandle)(ref, () => ({
        setCalendarOpen: (isOpen) => setPopoverOpen(isOpen),
        toggleCalendar: (setOpen) => {
          setPopoverOpen((prev) => setOpen !== void 0 ? setOpen : !prev);
        },
        isCalendarOpen: popoverOpen
      }), [setPopoverOpen, popoverOpen, selectOpen]);
      const createFocusSelectorString = (modifierClass) => `.${calendar_month_default.calendarMonthDatesCell}.${modifierClass} .${calendar_month_default.calendarMonthDate}`;
      const focusSelectorForSelectedDate = createFocusSelectorString(calendar_month_default.modifiers.selected);
      const focusSelectorForUnselectedDate = createFocusSelectorString(calendar_month_default.modifiers.current);
      return React128.createElement(
        "div",
        Object.assign({ className: css(date_picker_default.datePicker, className), ref: datePickerWrapperRef, style }, props),
        React128.createElement(
          Popover,
          Object.assign({ elementToFocus: isValidDate(valueDate) ? focusSelectorForSelectedDate : focusSelectorForUnselectedDate, position: "bottom", bodyContent: React128.createElement(CalendarMonth, {
            date: valueDate,
            onChange: onDateClick,
            locale,
            // Use truthy values of strings
            validators: validators.map((validator) => (date) => !validator(date)),
            onSelectToggle: (open) => setSelectOpen(open),
            monthFormat,
            weekdayFormat,
            longWeekdayFormat,
            dayFormat,
            weekStart,
            rangeStart
          }), showClose: false, isVisible: popoverOpen, shouldClose: (event, hideFunction) => {
            event = event;
            if (event.key === KeyTypes.Escape && selectOpen) {
              event.stopPropagation();
              setSelectOpen(false);
              return false;
            }
            if (buttonRef.current && buttonRef.current.contains(event.target)) {
              return false;
            }
            if (popoverOpen) {
              event.stopPropagation();
              setPopoverOpen(false);
              hideFunction();
              (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) && !value && setErrorText(emptyDateText);
            }
            if (event.key === KeyTypes.Escape && popoverOpen) {
              event.stopPropagation();
            }
            return true;
          }, withFocusTrap: true, hasNoPadding: true, hasAutoWidth: true, appendTo, triggerRef }, popoverProps),
          React128.createElement(
            "div",
            { className: date_picker_default.datePickerInput, ref: triggerRef },
            React128.createElement(
              InputGroup,
              null,
              React128.createElement(
                InputGroupItem,
                null,
                React128.createElement(TextInput, Object.assign({ isDisabled, isRequired: requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired, "aria-label": ariaLabel, placeholder, validated: errorText.trim() ? "error" : "default", value, onChange: onTextInput, onBlur: onInputBlur, onFocus: () => setTextInputFocused(true), onKeyPress }, inputProps))
              ),
              React128.createElement(
                InputGroupItem,
                null,
                React128.createElement(
                  "button",
                  {
                    ref: buttonRef,
                    // TODO: Removed style follow up work with issue #8457
                    className: css(button_default.button, button_default.modifiers.control),
                    "aria-label": buttonAriaLabel,
                    type: "button",
                    onClick: () => setPopoverOpen(!popoverOpen),
                    disabled: isDisabled
                  },
                  React128.createElement(outlined_calendar_alt_icon_default, null)
                )
              )
            )
          )
        ),
        (errorText || helperText) && React128.createElement("div", { className: date_picker_default.datePickerHelperText }, errorText ? React128.createElement(
          HelperText,
          null,
          React128.createElement(HelperTextItem, { variant: "error" }, errorText)
        ) : helperText)
      );
    };
    DatePicker = React128.forwardRef(DatePickerBase);
    DatePicker.displayName = "DatePicker";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/index.js
var init_DatePicker2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DatePicker/index.js"() {
    init_DatePicker();
  }
});

// node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.css
var init_description_list = __esm({
  "node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.mjs
var description_list_default;
var init_description_list2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.mjs"() {
    init_description_list();
    description_list_default = {
      "card": "pf-v5-c-card",
      "descriptionList": "pf-v5-c-description-list",
      "descriptionListDescription": "pf-v5-c-description-list__description",
      "descriptionListGroup": "pf-v5-c-description-list__group",
      "descriptionListTerm": "pf-v5-c-description-list__term",
      "descriptionListTermIcon": "pf-v5-c-description-list__term-icon",
      "descriptionListText": "pf-v5-c-description-list__text",
      "modifiers": {
        "inlineGrid": "pf-m-inline-grid",
        "autoColumnWidths": "pf-m-auto-column-widths",
        "autoFit": "pf-m-auto-fit",
        "compact": "pf-m-compact",
        "fluid": "pf-m-fluid",
        "fillColumns": "pf-m-fill-columns",
        "displayLg": "pf-m-display-lg",
        "display_2xl": "pf-m-display-2xl",
        "helpText": "pf-m-help-text",
        "1Col": "pf-m-1-col",
        "2Col": "pf-m-2-col",
        "3Col": "pf-m-3-col",
        "horizontal": "pf-m-horizontal",
        "vertical": "pf-m-vertical",
        "1ColOnSm": "pf-m-1-col-on-sm",
        "2ColOnSm": "pf-m-2-col-on-sm",
        "3ColOnSm": "pf-m-3-col-on-sm",
        "horizontalOnSm": "pf-m-horizontal-on-sm",
        "verticalOnSm": "pf-m-vertical-on-sm",
        "1ColOnMd": "pf-m-1-col-on-md",
        "2ColOnMd": "pf-m-2-col-on-md",
        "3ColOnMd": "pf-m-3-col-on-md",
        "horizontalOnMd": "pf-m-horizontal-on-md",
        "verticalOnMd": "pf-m-vertical-on-md",
        "1ColOnLg": "pf-m-1-col-on-lg",
        "2ColOnLg": "pf-m-2-col-on-lg",
        "3ColOnLg": "pf-m-3-col-on-lg",
        "horizontalOnLg": "pf-m-horizontal-on-lg",
        "verticalOnLg": "pf-m-vertical-on-lg",
        "1ColOnXl": "pf-m-1-col-on-xl",
        "2ColOnXl": "pf-m-2-col-on-xl",
        "3ColOnXl": "pf-m-3-col-on-xl",
        "horizontalOnXl": "pf-m-horizontal-on-xl",
        "verticalOnXl": "pf-m-vertical-on-xl",
        "1ColOn_2xl": "pf-m-1-col-on-2xl",
        "2ColOn_2xl": "pf-m-2-col-on-2xl",
        "3ColOn_2xl": "pf-m-3-col-on-2xl",
        "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
        "verticalOn_2xl": "pf-m-vertical-on-2xl"
      }
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list_GridTemplateColumns_min.js
var c_description_list_GridTemplateColumns_min, c_description_list_GridTemplateColumns_min_default;
var init_c_description_list_GridTemplateColumns_min = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_description_list_GridTemplateColumns_min.js"() {
    c_description_list_GridTemplateColumns_min = {
      "name": "--pf-v5-c-description-list--GridTemplateColumns--min",
      "value": "0",
      "var": "var(--pf-v5-c-description-list--GridTemplateColumns--min)"
    };
    c_description_list_GridTemplateColumns_min_default = c_description_list_GridTemplateColumns_min;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list__term_width.js
var c_description_list__term_width, c_description_list_term_width_default;
var init_c_description_list_term_width = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_description_list__term_width.js"() {
    c_description_list__term_width = {
      "name": "--pf-v5-c-description-list__term--width",
      "value": "12ch",
      "var": "var(--pf-v5-c-description-list__term--width)"
    };
    c_description_list_term_width_default = c_description_list__term_width;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list_m_horizontal__term_width.js
var c_description_list_m_horizontal__term_width, c_description_list_m_horizontal_term_width_default;
var init_c_description_list_m_horizontal_term_width = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_description_list_m_horizontal__term_width.js"() {
    c_description_list_m_horizontal__term_width = {
      "name": "--pf-v5-c-description-list--m-horizontal__term--width",
      "value": "fit-content(20ch)",
      "var": "var(--pf-v5-c-description-list--m-horizontal__term--width)"
    };
    c_description_list_m_horizontal_term_width_default = c_description_list_m_horizontal__term_width;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js
var React129, setBreakpointModifiers, DescriptionList;
var init_DescriptionList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js"() {
    init_tslib_es6();
    React129 = __toESM(require_react());
    init_esm();
    init_description_list2();
    init_helpers();
    init_c_description_list_GridTemplateColumns_min();
    init_c_description_list_term_width();
    init_c_description_list_m_horizontal_term_width();
    setBreakpointModifiers = (prefix, modifiers) => {
      const mods = modifiers;
      return Object.keys(mods || {}).reduce((acc, curr) => curr === "default" ? Object.assign(Object.assign({}, acc), { [prefix]: mods[curr] }) : Object.assign(Object.assign({}, acc), { [`${prefix}-on-${curr}`]: mods[curr] }), {});
    };
    DescriptionList = (_a) => {
      var { className = "", children = null, isHorizontal = false, isAutoColumnWidths, isAutoFit, isInlineGrid, isCompact, isFluid, isFillColumns, displaySize = "default", columnModifier, autoFitMinModifier, termWidth, horizontalTermWidthModifier, orientation, style } = _a, props = __rest(_a, ["className", "children", "isHorizontal", "isAutoColumnWidths", "isAutoFit", "isInlineGrid", "isCompact", "isFluid", "isFillColumns", "displaySize", "columnModifier", "autoFitMinModifier", "termWidth", "horizontalTermWidthModifier", "orientation", "style"]);
      if (isAutoFit && autoFitMinModifier) {
        style = Object.assign(Object.assign({}, style), setBreakpointModifiers(c_description_list_GridTemplateColumns_min_default.name, autoFitMinModifier));
      }
      if (termWidth) {
        style = Object.assign(Object.assign({}, style), { [c_description_list_term_width_default.name]: termWidth });
      }
      if (isHorizontal && horizontalTermWidthModifier) {
        style = Object.assign(Object.assign({}, style), setBreakpointModifiers(c_description_list_m_horizontal_term_width_default.name, horizontalTermWidthModifier));
      }
      return React129.createElement("dl", Object.assign({ className: css(description_list_default.descriptionList, (isHorizontal || isFluid) && description_list_default.modifiers.horizontal, isAutoColumnWidths && description_list_default.modifiers.autoColumnWidths, isAutoFit && description_list_default.modifiers.autoFit, formatBreakpointMods(columnModifier, description_list_default), formatBreakpointMods(orientation, description_list_default), isInlineGrid && description_list_default.modifiers.inlineGrid, isCompact && description_list_default.modifiers.compact, isFluid && description_list_default.modifiers.fluid, isFillColumns && description_list_default.modifiers.fillColumns, displaySize === "lg" && description_list_default.modifiers.displayLg, displaySize === "2xl" && description_list_default.modifiers.display_2xl, className), style }, props), children);
    };
    DescriptionList.displayName = "DescriptionList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListDescription.js
var React130, DescriptionListDescription;
var init_DescriptionListDescription = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListDescription.js"() {
    init_tslib_es6();
    React130 = __toESM(require_react());
    init_description_list2();
    init_esm();
    DescriptionListDescription = (_a) => {
      var { children = null, className } = _a, props = __rest(_a, ["children", "className"]);
      return React130.createElement(
        "dd",
        Object.assign({ className: css(description_list_default.descriptionListDescription, className) }, props),
        React130.createElement("div", { className: css(description_list_default.descriptionListText) }, children)
      );
    };
    DescriptionListDescription.displayName = "DescriptionListDescription";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListGroup.js
var React131, DescriptionListGroup;
var init_DescriptionListGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListGroup.js"() {
    init_tslib_es6();
    React131 = __toESM(require_react());
    init_description_list2();
    init_esm();
    DescriptionListGroup = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React131.createElement("div", Object.assign({ className: css(description_list_default.descriptionListGroup, className) }, props), children);
    };
    DescriptionListGroup.displayName = "DescriptionListGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTerm.js
var React132, DescriptionListTerm;
var init_DescriptionListTerm = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTerm.js"() {
    init_tslib_es6();
    React132 = __toESM(require_react());
    init_description_list2();
    init_esm();
    DescriptionListTerm = (_a) => {
      var { children, className, icon } = _a, props = __rest(_a, ["children", "className", "icon"]);
      return React132.createElement(
        "dt",
        Object.assign({ className: css(description_list_default.descriptionListTerm, className) }, props),
        icon ? React132.createElement("span", { className: css(description_list_default.descriptionListTermIcon) }, icon) : null,
        React132.createElement("span", { className: css(description_list_default.descriptionListText) }, children)
      );
    };
    DescriptionListTerm.displayName = "DescriptionListTerm";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpText.js
var React133, DescriptionListTermHelpText;
var init_DescriptionListTermHelpText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpText.js"() {
    init_tslib_es6();
    React133 = __toESM(require_react());
    init_description_list2();
    init_esm();
    DescriptionListTermHelpText = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React133.createElement("dt", Object.assign({ className: css(description_list_default.descriptionListTerm, className) }, props), children);
    };
    DescriptionListTermHelpText.displayName = "DescriptionListTermHelpText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpTextButton.js
var React134, DescriptionListTermHelpTextButton;
var init_DescriptionListTermHelpTextButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpTextButton.js"() {
    init_tslib_es6();
    React134 = __toESM(require_react());
    init_description_list2();
    init_esm();
    DescriptionListTermHelpTextButton = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React134.createElement("span", Object.assign({ className: css(className, description_list_default.descriptionListText, description_list_default.modifiers.helpText), role: "button", type: "button", tabIndex: 0 }, props), children);
    };
    DescriptionListTermHelpTextButton.displayName = "DescriptionListTermHelpTextButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/index.js
var init_DescriptionList2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/index.js"() {
    init_DescriptionList();
    init_DescriptionListDescription();
    init_DescriptionListGroup();
    init_DescriptionListTerm();
    init_DescriptionListTermHelpText();
    init_DescriptionListTermHelpTextButton();
  }
});

// node_modules/@patternfly/react-styles/css/components/Divider/divider.css
var init_divider = __esm({
  "node_modules/@patternfly/react-styles/css/components/Divider/divider.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Divider/divider.mjs
var divider_default;
var init_divider2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Divider/divider.mjs"() {
    init_divider();
    divider_default = {
      "divider": "pf-v5-c-divider",
      "modifiers": {
        "hidden": "pf-m-hidden",
        "hiddenOnSm": "pf-m-hidden-on-sm",
        "visibleOnSm": "pf-m-visible-on-sm",
        "hiddenOnMd": "pf-m-hidden-on-md",
        "visibleOnMd": "pf-m-visible-on-md",
        "hiddenOnLg": "pf-m-hidden-on-lg",
        "visibleOnLg": "pf-m-visible-on-lg",
        "hiddenOnXl": "pf-m-hidden-on-xl",
        "visibleOnXl": "pf-m-visible-on-xl",
        "hiddenOn_2xl": "pf-m-hidden-on-2xl",
        "visibleOn_2xl": "pf-m-visible-on-2xl",
        "vertical": "pf-m-vertical",
        "insetNone": "pf-m-inset-none",
        "insetXs": "pf-m-inset-xs",
        "insetSm": "pf-m-inset-sm",
        "insetMd": "pf-m-inset-md",
        "insetLg": "pf-m-inset-lg",
        "insetXl": "pf-m-inset-xl",
        "inset_2xl": "pf-m-inset-2xl",
        "inset_3xl": "pf-m-inset-3xl",
        "horizontalOnSm": "pf-m-horizontal-on-sm",
        "verticalOnSm": "pf-m-vertical-on-sm",
        "insetNoneOnSm": "pf-m-inset-none-on-sm",
        "insetXsOnSm": "pf-m-inset-xs-on-sm",
        "insetSmOnSm": "pf-m-inset-sm-on-sm",
        "insetMdOnSm": "pf-m-inset-md-on-sm",
        "insetLgOnSm": "pf-m-inset-lg-on-sm",
        "insetXlOnSm": "pf-m-inset-xl-on-sm",
        "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
        "inset_3xlOnSm": "pf-m-inset-3xl-on-sm",
        "horizontalOnMd": "pf-m-horizontal-on-md",
        "verticalOnMd": "pf-m-vertical-on-md",
        "insetNoneOnMd": "pf-m-inset-none-on-md",
        "insetXsOnMd": "pf-m-inset-xs-on-md",
        "insetSmOnMd": "pf-m-inset-sm-on-md",
        "insetMdOnMd": "pf-m-inset-md-on-md",
        "insetLgOnMd": "pf-m-inset-lg-on-md",
        "insetXlOnMd": "pf-m-inset-xl-on-md",
        "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
        "inset_3xlOnMd": "pf-m-inset-3xl-on-md",
        "horizontalOnLg": "pf-m-horizontal-on-lg",
        "verticalOnLg": "pf-m-vertical-on-lg",
        "insetNoneOnLg": "pf-m-inset-none-on-lg",
        "insetXsOnLg": "pf-m-inset-xs-on-lg",
        "insetSmOnLg": "pf-m-inset-sm-on-lg",
        "insetMdOnLg": "pf-m-inset-md-on-lg",
        "insetLgOnLg": "pf-m-inset-lg-on-lg",
        "insetXlOnLg": "pf-m-inset-xl-on-lg",
        "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
        "inset_3xlOnLg": "pf-m-inset-3xl-on-lg",
        "horizontalOnXl": "pf-m-horizontal-on-xl",
        "verticalOnXl": "pf-m-vertical-on-xl",
        "insetNoneOnXl": "pf-m-inset-none-on-xl",
        "insetXsOnXl": "pf-m-inset-xs-on-xl",
        "insetSmOnXl": "pf-m-inset-sm-on-xl",
        "insetMdOnXl": "pf-m-inset-md-on-xl",
        "insetLgOnXl": "pf-m-inset-lg-on-xl",
        "insetXlOnXl": "pf-m-inset-xl-on-xl",
        "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
        "inset_3xlOnXl": "pf-m-inset-3xl-on-xl",
        "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
        "verticalOn_2xl": "pf-m-vertical-on-2xl",
        "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
        "insetXsOn_2xl": "pf-m-inset-xs-on-2xl",
        "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
        "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
        "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
        "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
        "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl",
        "inset_3xlOn_2xl": "pf-m-inset-3xl-on-2xl"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
var React135, DividerVariant, Divider;
var init_Divider = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js"() {
    init_tslib_es6();
    React135 = __toESM(require_react());
    init_esm();
    init_divider2();
    init_util();
    (function(DividerVariant2) {
      DividerVariant2["hr"] = "hr";
      DividerVariant2["li"] = "li";
      DividerVariant2["div"] = "div";
    })(DividerVariant || (DividerVariant = {}));
    Divider = (_a) => {
      var { className, component = DividerVariant.hr, inset, orientation } = _a, props = __rest(_a, ["className", "component", "inset", "orientation"]);
      const Component44 = component;
      return React135.createElement(Component44, Object.assign({ className: css(divider_default.divider, formatBreakpointMods(inset, divider_default), formatBreakpointMods(orientation, divider_default), className) }, component !== "hr" && { role: "separator" }, props));
    };
    Divider.displayName = "Divider";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Divider/index.js
var init_Divider2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Divider/index.js"() {
    init_Divider();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/DragDrop.js
var React136, DragDropContext, DragDrop;
var init_DragDrop = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DragDrop/DragDrop.js"() {
    React136 = __toESM(require_react());
    DragDropContext = React136.createContext({
      onDrag: (_source) => true,
      onDragMove: (_source, _dest) => {
      },
      onDrop: (_source, _dest) => false
    });
    DragDrop = ({ children, onDrag = () => true, onDragMove = () => {
    }, onDrop = () => false }) => React136.createElement(DragDropContext.Provider, { value: { onDrag, onDragMove, onDrop } }, children);
    DragDrop.displayName = "DragDrop";
  }
});

// node_modules/@patternfly/react-styles/css/components/DragDrop/drag-drop.css
var init_drag_drop = __esm({
  "node_modules/@patternfly/react-styles/css/components/DragDrop/drag-drop.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/DragDrop/drag-drop.mjs
var drag_drop_default;
var init_drag_drop2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/DragDrop/drag-drop.mjs"() {
    init_drag_drop();
    drag_drop_default = {
      "draggable": "pf-v5-c-draggable",
      "droppable": "pf-v5-c-droppable",
      "modifiers": {
        "dragging": "pf-m-dragging",
        "dragOutside": "pf-m-drag-outside"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/DroppableContext.js
var React137, DroppableContext;
var init_DroppableContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DragDrop/DroppableContext.js"() {
    React137 = __toESM(require_react());
    DroppableContext = React137.createContext({
      zone: "defaultDroppableZone",
      droppableId: "defaultDroppableId"
    });
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_draggable_m_dragging_BackgroundColor.js
var c_draggable_m_dragging_BackgroundColor, c_draggable_m_dragging_BackgroundColor_default;
var init_c_draggable_m_dragging_BackgroundColor = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_draggable_m_dragging_BackgroundColor.js"() {
    c_draggable_m_dragging_BackgroundColor = {
      "name": "--pf-v5-c-draggable--m-dragging--BackgroundColor",
      "value": "#fff",
      "var": "var(--pf-v5-c-draggable--m-dragging--BackgroundColor)"
    };
    c_draggable_m_dragging_BackgroundColor_default = c_draggable_m_dragging_BackgroundColor;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Draggable.js
function getDefaultBackground() {
  const div = document.createElement("div");
  document.head.appendChild(div);
  const bg = window.getComputedStyle(div).backgroundColor;
  document.head.removeChild(div);
  return bg;
}
function getInheritedBackgroundColor(el) {
  const defaultStyle = getDefaultBackground();
  const backgroundColor = window.getComputedStyle(el).backgroundColor;
  if (backgroundColor !== defaultStyle) {
    return backgroundColor;
  } else if (!el.parentElement) {
    return defaultStyle;
  }
  return getInheritedBackgroundColor(el.parentElement);
}
function removeBlankDiv(node) {
  if (node.getAttribute("blankDiv") === "true") {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      if (child.getAttribute("blankDiv") === "true") {
        node.removeChild(child);
        node.setAttribute("blankDiv", "false");
        break;
      }
    }
  }
}
function resetDroppableItem(droppableItem) {
  removeBlankDiv(droppableItem.node);
  droppableItem.node.classList.remove(drag_drop_default.modifiers.dragging);
  droppableItem.node.classList.remove(drag_drop_default.modifiers.dragOutside);
  droppableItem.draggableNodes.forEach((n, i) => {
    n.style.transform = "";
    n.style.transition = "";
    droppableItem.draggableNodesRects[i] = n.getBoundingClientRect();
  });
}
function overlaps(ev, rect) {
  return ev.clientX > rect.x && ev.clientX < rect.x + rect.width && ev.clientY > rect.y && ev.clientY < rect.y + rect.height;
}
var React138, Draggable;
var init_Draggable = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Draggable.js"() {
    init_tslib_es6();
    React138 = __toESM(require_react());
    init_esm();
    init_drag_drop2();
    init_DroppableContext();
    init_DragDrop();
    init_c_draggable_m_dragging_BackgroundColor();
    Draggable = (_a) => {
      var { className, children, style: styleProp = {}, hasNoWrapper = false } = _a, props = __rest(_a, ["className", "children", "style", "hasNoWrapper"]);
      let [style, setStyle] = React138.useState(styleProp);
      const [isDragging, setIsDragging] = React138.useState(false);
      const [isValidDrag, setIsValidDrag] = React138.useState(true);
      const { zone, droppableId } = React138.useContext(DroppableContext);
      const { onDrag, onDragMove, onDrop } = React138.useContext(DragDropContext);
      let startX = 0;
      let startY = 0;
      let index = null;
      let hoveringDroppable;
      let hoveringIndex = null;
      let mouseMoveListener;
      let mouseUpListener;
      let startYOffset = 0;
      const onTransitionEnd = (_ev) => {
        if (isDragging) {
          setIsDragging(false);
          setStyle(styleProp);
        }
      };
      function getSourceAndDest() {
        const hoveringDroppableId = hoveringDroppable ? hoveringDroppable.getAttribute("data-pf-droppableid") : null;
        const source = {
          droppableId,
          index
        };
        const dest = hoveringDroppableId !== null && hoveringIndex !== null ? {
          droppableId: hoveringDroppableId,
          index: hoveringIndex
        } : void 0;
        return { source, dest, hoveringDroppableId };
      }
      const onMouseUpWhileDragging = (droppableItems) => {
        droppableItems.forEach(resetDroppableItem);
        document.removeEventListener("mousemove", mouseMoveListener);
        document.removeEventListener("mouseup", mouseUpListener);
        document.removeEventListener("contextmenu", mouseUpListener);
        const { source, dest, hoveringDroppableId } = getSourceAndDest();
        const consumerReordered = onDrop(source, dest);
        if (consumerReordered && droppableId === hoveringDroppableId) {
          setIsDragging(false);
          setStyle(styleProp);
        } else if (!consumerReordered) {
          setStyle(Object.assign(Object.assign({}, style), { transition: "transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s", transform: "", background: styleProp.background, boxShadow: styleProp.boxShadow }));
        }
      };
      const onMouseMoveWhileDragging = (ev, droppableItems, blankDivRect) => {
        hoveringDroppable = null;
        droppableItems.forEach((droppableItem) => {
          const { node, rect, isDraggingHost, draggableNodes, draggableNodesRects } = droppableItem;
          if (overlaps(ev, rect)) {
            node.classList.remove(drag_drop_default.modifiers.dragOutside);
            hoveringDroppable = node;
            if (node.getAttribute("blankDiv") !== "true" && !isDraggingHost) {
              const blankDiv = document.createElement("div");
              blankDiv.setAttribute("blankDiv", "true");
              let blankDivPos = -1;
              for (let i = 0; i < draggableNodes.length; i++) {
                const childRect = draggableNodesRects[i];
                const isLast = i === draggableNodes.length - 1;
                const startOverlaps = childRect.y >= startY - startYOffset;
                if ((startOverlaps || isLast) && blankDivPos === -1) {
                  if (isLast && !startOverlaps) {
                    draggableNodes[i].after(blankDiv);
                  } else {
                    draggableNodes[i].before(blankDiv);
                  }
                  blankDiv.style.height = `${blankDivRect.height}px`;
                  blankDiv.style.width = `${blankDivRect.width}px`;
                  node.setAttribute("blankDiv", "true");
                  blankDivPos = i;
                }
                if (blankDivPos !== -1) {
                  childRect.y += blankDivRect.height;
                }
              }
              draggableNodes.splice(blankDivPos, 0, blankDiv);
              draggableNodesRects.splice(blankDivPos, 0, blankDivRect);
              rect.height += blankDivRect.height;
            }
          } else {
            resetDroppableItem(droppableItem);
            node.classList.add(drag_drop_default.modifiers.dragging);
            node.classList.add(drag_drop_default.modifiers.dragOutside);
          }
        });
        setStyle(Object.assign(Object.assign({}, style), { transform: `translate(${ev.pageX - startX}px, ${ev.pageY - startY}px)` }));
        setIsValidDrag(Boolean(hoveringDroppable));
        hoveringIndex = null;
        if (hoveringDroppable) {
          const { draggableNodes, draggableNodesRects } = droppableItems.find((item) => item.node === hoveringDroppable);
          let lastTranslate = 0;
          draggableNodes.forEach((n, i) => {
            n.style.transition = "transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s";
            const rect = draggableNodesRects[i];
            const halfway = rect.y + rect.height / 2;
            let translateY = 0;
            if (startY < halfway && ev.pageY + (blankDivRect.height - startYOffset) > halfway) {
              translateY -= blankDivRect.height;
            } else if (startY >= halfway && ev.pageY - startYOffset <= halfway) {
              translateY += blankDivRect.height;
            }
            if (translateY <= lastTranslate && translateY < 0 || translateY > lastTranslate && translateY > 0) {
              hoveringIndex = i;
            }
            n.style.transform = `translate(0, ${translateY}px`;
            lastTranslate = translateY;
          });
        }
        const { source, dest } = getSourceAndDest();
        onDragMove(source, dest);
      };
      const onDragStart = (ev) => {
        ev.preventDefault();
        if (isDragging) {
          return;
        }
        const dragging = ev.target;
        const rect = dragging.getBoundingClientRect();
        const droppableNodes = Array.from(document.querySelectorAll(`[data-pf-droppable="${zone}"]`));
        const droppableItems = droppableNodes.reduce((acc, cur) => {
          cur.classList.add(drag_drop_default.modifiers.dragging);
          const draggableNodes = Array.from(cur.querySelectorAll(`[data-pf-draggable-zone="${zone}"]`));
          const isDraggingHost = cur.contains(dragging);
          if (isDraggingHost) {
            index = draggableNodes.indexOf(dragging);
          }
          const droppableItem = {
            node: cur,
            rect: cur.getBoundingClientRect(),
            isDraggingHost,
            // We don't want styles to apply to the left behind div in onMouseMoveWhileDragging
            draggableNodes: draggableNodes.map((node) => node === dragging ? node.cloneNode(false) : node),
            draggableNodesRects: draggableNodes.map((node) => node.getBoundingClientRect())
          };
          acc.push(droppableItem);
          return acc;
        }, []);
        if (!onDrag({ droppableId, index })) {
          droppableItems.forEach((item) => resetDroppableItem(item));
          return;
        }
        style = Object.assign(Object.assign({}, style), { top: rect.y, left: rect.x, width: rect.width, height: rect.height, [c_draggable_m_dragging_BackgroundColor_default.name]: getInheritedBackgroundColor(dragging), position: "fixed", zIndex: 5e3 });
        setStyle(style);
        startX = ev.pageX;
        startY = ev.pageY;
        startYOffset = startY - rect.y;
        setIsDragging(true);
        mouseMoveListener = (ev2) => onMouseMoveWhileDragging(ev2, droppableItems, rect);
        mouseUpListener = () => onMouseUpWhileDragging(droppableItems);
        document.addEventListener("mousemove", mouseMoveListener);
        document.addEventListener("mouseup", mouseUpListener);
      };
      const childProps = Object.assign({
        "data-pf-draggable-zone": isDragging ? null : zone,
        draggable: true,
        className: css(drag_drop_default.draggable, isDragging && drag_drop_default.modifiers.dragging, !isValidDrag && drag_drop_default.modifiers.dragOutside, className),
        onDragStart,
        onTransitionEnd,
        style
      }, props);
      return React138.createElement(
        React138.Fragment,
        null,
        isDragging && React138.createElement("div", Object.assign({ draggable: true }, props, { style: Object.assign(Object.assign({}, styleProp), { visibility: "hidden" }) }), children),
        hasNoWrapper ? React138.cloneElement(children, childProps) : React138.createElement("div", Object.assign({}, childProps), children)
      );
    };
    Draggable.displayName = "Draggable";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Droppable.js
var React139, Droppable;
var init_Droppable = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Droppable.js"() {
    init_tslib_es6();
    React139 = __toESM(require_react());
    init_esm();
    init_drag_drop2();
    init_DroppableContext();
    Droppable = (_a) => {
      var { className, children, zone = "defaultZone", droppableId = "defaultId", hasNoWrapper = false } = _a, props = __rest(_a, ["className", "children", "zone", "droppableId", "hasNoWrapper"]);
      const childProps = Object.assign({
        "data-pf-droppable": zone,
        "data-pf-droppableid": droppableId,
        // if has no wrapper is set, don't overwrite children className with the className prop
        className: hasNoWrapper && React139.Children.count(children) === 1 ? css(drag_drop_default.droppable, className, children.props.className) : css(drag_drop_default.droppable, className)
      }, props);
      return React139.createElement(DroppableContext.Provider, { value: { zone, droppableId } }, hasNoWrapper ? React139.cloneElement(children, childProps) : React139.createElement("div", Object.assign({}, childProps), children));
    };
    Droppable.displayName = "Droppable";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/index.js
var init_DragDrop2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DragDrop/index.js"() {
    init_DragDrop();
    init_Draggable();
    init_Droppable();
    init_DroppableContext();
  }
});

// node_modules/@patternfly/react-styles/css/components/Drawer/drawer.css
var init_drawer = __esm({
  "node_modules/@patternfly/react-styles/css/components/Drawer/drawer.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Drawer/drawer.mjs
var drawer_default;
var init_drawer2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Drawer/drawer.mjs"() {
    init_drawer();
    drawer_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "drawer": "pf-v5-c-drawer",
      "drawerActions": "pf-v5-c-drawer__actions",
      "drawerBody": "pf-v5-c-drawer__body",
      "drawerClose": "pf-v5-c-drawer__close",
      "drawerContent": "pf-v5-c-drawer__content",
      "drawerHead": "pf-v5-c-drawer__head",
      "drawerMain": "pf-v5-c-drawer__main",
      "drawerPanel": "pf-v5-c-drawer__panel",
      "drawerPanelMain": "pf-v5-c-drawer__panel-main",
      "drawerSection": "pf-v5-c-drawer__section",
      "drawerSplitter": "pf-v5-c-drawer__splitter",
      "drawerSplitterHandle": "pf-v5-c-drawer__splitter-handle",
      "modifiers": {
        "panelBottom": "pf-m-panel-bottom",
        "inline": "pf-m-inline",
        "noBorder": "pf-m-no-border",
        "resizable": "pf-m-resizable",
        "static": "pf-m-static",
        "panelLeft": "pf-m-panel-left",
        "expanded": "pf-m-expanded",
        "resizing": "pf-m-resizing",
        "noBackground": "pf-m-no-background",
        "light_200": "pf-m-light-200",
        "noPadding": "pf-m-no-padding",
        "padding": "pf-m-padding",
        "vertical": "pf-m-vertical",
        "width_25": "pf-m-width-25",
        "width_33": "pf-m-width-33",
        "width_50": "pf-m-width-50",
        "width_66": "pf-m-width-66",
        "width_75": "pf-m-width-75",
        "width_100": "pf-m-width-100",
        "width_25OnLg": "pf-m-width-25-on-lg",
        "width_33OnLg": "pf-m-width-33-on-lg",
        "width_50OnLg": "pf-m-width-50-on-lg",
        "width_66OnLg": "pf-m-width-66-on-lg",
        "width_75OnLg": "pf-m-width-75-on-lg",
        "width_100OnLg": "pf-m-width-100-on-lg",
        "width_25OnXl": "pf-m-width-25-on-xl",
        "width_33OnXl": "pf-m-width-33-on-xl",
        "width_50OnXl": "pf-m-width-50-on-xl",
        "width_66OnXl": "pf-m-width-66-on-xl",
        "width_75OnXl": "pf-m-width-75-on-xl",
        "width_100OnXl": "pf-m-width-100-on-xl",
        "width_25On_2xl": "pf-m-width-25-on-2xl",
        "width_33On_2xl": "pf-m-width-33-on-2xl",
        "width_50On_2xl": "pf-m-width-50-on-2xl",
        "width_66On_2xl": "pf-m-width-66-on-2xl",
        "width_75On_2xl": "pf-m-width-75-on-2xl",
        "width_100On_2xl": "pf-m-width-100-on-2xl",
        "inlineOnLg": "pf-m-inline-on-lg",
        "staticOnLg": "pf-m-static-on-lg",
        "inlineOnXl": "pf-m-inline-on-xl",
        "staticOnXl": "pf-m-static-on-xl",
        "inlineOn_2xl": "pf-m-inline-on-2xl",
        "staticOn_2xl": "pf-m-static-on-2xl"
      },
      "pageMain": "pf-v5-c-page__main",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js
var React140, DrawerColorVariant, DrawerContext, Drawer;
var init_Drawer = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js"() {
    init_tslib_es6();
    React140 = __toESM(require_react());
    init_drawer2();
    init_esm();
    (function(DrawerColorVariant2) {
      DrawerColorVariant2["default"] = "default";
      DrawerColorVariant2["light200"] = "light-200";
      DrawerColorVariant2["noBackground"] = "no-background";
    })(DrawerColorVariant || (DrawerColorVariant = {}));
    DrawerContext = React140.createContext({
      isExpanded: false,
      isStatic: false,
      onExpand: () => {
      },
      position: "end",
      drawerRef: null,
      drawerContentRef: null,
      isInline: false
    });
    Drawer = (_a) => {
      var { className = "", children, isExpanded = false, isInline = false, isStatic = false, position = "end", onExpand = () => {
      } } = _a, props = __rest(_a, ["className", "children", "isExpanded", "isInline", "isStatic", "position", "onExpand"]);
      const drawerRef = React140.useRef();
      const drawerContentRef = React140.useRef();
      return React140.createElement(
        DrawerContext.Provider,
        { value: { isExpanded, isStatic, onExpand, position, drawerRef, drawerContentRef, isInline } },
        React140.createElement("div", Object.assign({ className: css(drawer_default.drawer, isExpanded && drawer_default.modifiers.expanded, isInline && drawer_default.modifiers.inline, isStatic && drawer_default.modifiers.static, (position === "left" || position === "start") && drawer_default.modifiers.panelLeft, position === "bottom" && drawer_default.modifiers.panelBottom, className), ref: drawerRef }, props), children)
      );
    };
    Drawer.displayName = "Drawer";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerActions.js
var React141, DrawerActions;
var init_DrawerActions = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerActions.js"() {
    init_tslib_es6();
    React141 = __toESM(require_react());
    init_drawer2();
    init_esm();
    DrawerActions = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children
      } = _a, props = __rest(_a, ["className", "children"]);
      return React141.createElement("div", Object.assign({ className: css(drawer_default.drawerActions, className) }, props), children);
    };
    DrawerActions.displayName = "DrawerActions";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerCloseButton.js
var React142, DrawerCloseButton;
var init_DrawerCloseButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerCloseButton.js"() {
    init_tslib_es6();
    React142 = __toESM(require_react());
    init_drawer2();
    init_esm();
    init_Button2();
    init_times_icon();
    DrawerCloseButton = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        onClose = () => void 0,
        "aria-label": ariaLabel = "Close drawer panel"
      } = _a, props = __rest(_a, ["className", "onClose", "aria-label"]);
      return React142.createElement(
        "div",
        Object.assign({ className: css(drawer_default.drawerClose, className) }, props),
        React142.createElement(
          Button,
          { variant: "plain", onClick: onClose, "aria-label": ariaLabel },
          React142.createElement(times_icon_default, null)
        )
      );
    };
    DrawerCloseButton.displayName = "DrawerCloseButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerMain.js
var React143, DrawerMain;
var init_DrawerMain = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerMain.js"() {
    init_tslib_es6();
    React143 = __toESM(require_react());
    init_drawer2();
    init_esm();
    DrawerMain = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children
      } = _a, props = __rest(_a, ["className", "children"]);
      return React143.createElement("div", Object.assign({ className: css(drawer_default.drawerMain, className) }, props), children);
    };
    DrawerMain.displayName = "DrawerMain";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js
var React144, DrawerContent;
var init_DrawerContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js"() {
    init_tslib_es6();
    React144 = __toESM(require_react());
    init_drawer2();
    init_esm();
    init_DrawerMain();
    init_Drawer();
    DrawerContent = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children,
        panelContent,
        colorVariant = DrawerColorVariant.default
      } = _a, props = __rest(_a, ["className", "children", "panelContent", "colorVariant"]);
      const { drawerContentRef } = React144.useContext(DrawerContext);
      return React144.createElement(
        DrawerMain,
        null,
        React144.createElement("div", Object.assign({ className: css(drawer_default.drawerContent, colorVariant === DrawerColorVariant.light200 && drawer_default.modifiers.light_200, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, className), ref: drawerContentRef }, props), children),
        panelContent
      );
    };
    DrawerContent.displayName = "DrawerContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContentBody.js
var React145, DrawerContentBody;
var init_DrawerContentBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContentBody.js"() {
    init_tslib_es6();
    React145 = __toESM(require_react());
    init_drawer2();
    init_esm();
    DrawerContentBody = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children,
        hasPadding = false
      } = _a, props = __rest(_a, ["className", "children", "hasPadding"]);
      return React145.createElement("div", Object.assign({ className: css(drawer_default.drawerBody, hasPadding && drawer_default.modifiers.padding, className) }, props), children);
    };
    DrawerContentBody.displayName = "DrawerContentBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js
var React146, DrawerPanelBody;
var init_DrawerPanelBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js"() {
    init_tslib_es6();
    React146 = __toESM(require_react());
    init_drawer2();
    init_esm();
    DrawerPanelBody = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children,
        hasNoPadding = false
      } = _a, props = __rest(_a, ["className", "children", "hasNoPadding"]);
      return React146.createElement("div", Object.assign({ className: css(drawer_default.drawerBody, hasNoPadding && drawer_default.modifiers.noPadding, className) }, props), children);
    };
    DrawerPanelBody.displayName = "DrawerPanelBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js
var React147, DrawerHead;
var init_DrawerHead = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js"() {
    init_tslib_es6();
    React147 = __toESM(require_react());
    init_drawer2();
    init_esm();
    init_DrawerPanelBody();
    DrawerHead = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children,
        hasNoPadding = false
      } = _a, props = __rest(_a, ["className", "children", "hasNoPadding"]);
      return React147.createElement(
        DrawerPanelBody,
        { hasNoPadding },
        React147.createElement("div", Object.assign({ className: css(drawer_default.drawerHead, className) }, props), children)
      );
    };
    DrawerHead.displayName = "DrawerHead";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis.js
var c_drawer__panel_md_FlexBasis, c_drawer_panel_md_FlexBasis_default;
var init_c_drawer_panel_md_FlexBasis = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis.js"() {
    c_drawer__panel_md_FlexBasis = {
      "name": "--pf-v5-c-drawer__panel--md--FlexBasis",
      "value": "50%",
      "var": "var(--pf-v5-c-drawer__panel--md--FlexBasis)"
    };
    c_drawer_panel_md_FlexBasis_default = c_drawer__panel_md_FlexBasis;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_min.js
var c_drawer__panel_md_FlexBasis_min, c_drawer_panel_md_FlexBasis_min_default;
var init_c_drawer_panel_md_FlexBasis_min = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_min.js"() {
    c_drawer__panel_md_FlexBasis_min = {
      "name": "--pf-v5-c-drawer__panel--md--FlexBasis--min",
      "value": "1.5rem",
      "var": "var(--pf-v5-c-drawer__panel--md--FlexBasis--min)"
    };
    c_drawer_panel_md_FlexBasis_min_default = c_drawer__panel_md_FlexBasis_min;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_max.js
var c_drawer__panel_md_FlexBasis_max, c_drawer_panel_md_FlexBasis_max_default;
var init_c_drawer_panel_md_FlexBasis_max = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_max.js"() {
    c_drawer__panel_md_FlexBasis_max = {
      "name": "--pf-v5-c-drawer__panel--md--FlexBasis--max",
      "value": "100%",
      "var": "var(--pf-v5-c-drawer__panel--md--FlexBasis--max)"
    };
    c_drawer_panel_md_FlexBasis_max_default = c_drawer__panel_md_FlexBasis_max;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js
var React148, isResizing, newSize, DrawerPanelContent;
var init_DrawerPanelContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js"() {
    init_tslib_es6();
    React148 = __toESM(require_react());
    init_drawer2();
    init_esm();
    init_Drawer();
    init_util();
    init_GenerateId();
    init_FocusTrap();
    init_c_drawer_panel_md_FlexBasis();
    init_c_drawer_panel_md_FlexBasis_min();
    init_c_drawer_panel_md_FlexBasis_max();
    isResizing = null;
    newSize = 0;
    DrawerPanelContent = (_a) => {
      var { className = "", id, children, hasNoBorder = false, isResizable = false, onResize, minSize, defaultSize, maxSize, increment = 5, resizeAriaLabel = "Resize", widths, colorVariant = DrawerColorVariant.default, focusTrap } = _a, props = __rest(_a, ["className", "id", "children", "hasNoBorder", "isResizable", "onResize", "minSize", "defaultSize", "maxSize", "increment", "resizeAriaLabel", "widths", "colorVariant", "focusTrap"]);
      const panel = React148.useRef();
      const splitterRef = React148.useRef();
      const [separatorValue, setSeparatorValue] = React148.useState(0);
      const { position, isExpanded, isStatic, onExpand, drawerRef, drawerContentRef, isInline } = React148.useContext(DrawerContext);
      const hidden = isStatic ? false : !isExpanded;
      const [isExpandedInternal, setIsExpandedInternal] = React148.useState(!hidden);
      const [isFocusTrapActive, setIsFocusTrapActive] = React148.useState(false);
      const previouslyFocusedElement = React148.useRef(null);
      let currWidth = 0;
      let panelRect;
      let end2;
      let start2;
      let bottom2;
      let setInitialVals = true;
      if (isStatic && (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.enabled)) {
        console.warn(`DrawerPanelContent: The focusTrap.enabled prop cannot be true if the Drawer's isStatic prop is true. This will cause a permanent focus trap.`);
      }
      React148.useEffect(() => {
        if (!isStatic && isExpanded) {
          setIsExpandedInternal(isExpanded);
        }
      }, [isStatic, isExpanded]);
      const calcValueNow = () => {
        let splitterPos;
        let drawerSize;
        const isRTL = getLanguageDirection(panel.current) === "rtl";
        if (isInline && (position === "end" || position === "right")) {
          if (isRTL) {
            splitterPos = panel.current.getBoundingClientRect().left - splitterRef.current.getBoundingClientRect().right;
            drawerSize = drawerRef.current.getBoundingClientRect().left - drawerRef.current.getBoundingClientRect().right;
          } else {
            splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;
            drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;
          }
        } else if (isInline && (position === "start" || position === "left")) {
          if (isRTL) {
            splitterPos = splitterRef.current.getBoundingClientRect().left - panel.current.getBoundingClientRect().right;
            drawerSize = drawerRef.current.getBoundingClientRect().left - drawerRef.current.getBoundingClientRect().right;
          } else {
            splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;
            drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;
          }
        } else if (position === "end" || position === "right") {
          if (isRTL) {
            splitterPos = drawerContentRef.current.getBoundingClientRect().left - splitterRef.current.getBoundingClientRect().right;
            drawerSize = drawerContentRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
          } else {
            splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;
            drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
          }
        } else if (position === "start" || position === "left") {
          if (isRTL) {
            splitterPos = splitterRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
            drawerSize = drawerContentRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
          } else {
            splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
            drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
          }
        } else if (position === "bottom") {
          splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;
          drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;
        }
        const newSplitterPos = splitterPos / drawerSize * 100;
        return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;
      };
      const handleTouchStart = (e) => {
        e.stopPropagation();
        document.addEventListener("touchmove", callbackTouchMove, { passive: false });
        document.addEventListener("touchend", callbackTouchEnd);
        isResizing = true;
      };
      const handleMousedown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        document.addEventListener("mousemove", callbackMouseMove);
        document.addEventListener("mouseup", callbackMouseUp);
        drawerRef.current.classList.add(css(drawer_default.modifiers.resizing));
        isResizing = true;
        setInitialVals = true;
      };
      const handleMouseMove = (e) => {
        const mousePos = position === "bottom" ? e.clientY : e.clientX;
        handleControlMove(e, mousePos);
      };
      const handleTouchMove = (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
        const touchPos = position === "bottom" ? e.touches[0].clientY : e.touches[0].clientX;
        handleControlMove(e, touchPos);
      };
      const handleControlMove = (e, controlPosition) => {
        const isRTL = getLanguageDirection(panel.current) === "rtl";
        e.stopPropagation();
        if (!isResizing) {
          return;
        }
        if (setInitialVals) {
          panelRect = panel.current.getBoundingClientRect();
          if (isRTL) {
            start2 = panelRect.right;
            end2 = panelRect.left;
          } else {
            end2 = panelRect.right;
            start2 = panelRect.left;
          }
          bottom2 = panelRect.bottom;
          setInitialVals = false;
        }
        const mousePos = controlPosition;
        let newSize2 = 0;
        if (position === "end" || position === "right") {
          newSize2 = isRTL ? mousePos - end2 : end2 - mousePos;
        } else if (position === "start" || position === "left") {
          newSize2 = isRTL ? start2 - mousePos : mousePos - start2;
        } else {
          newSize2 = bottom2 - mousePos;
        }
        if (position === "bottom") {
          panel.current.style.overflowAnchor = "none";
        }
        panel.current.style.setProperty(c_drawer_panel_md_FlexBasis_default.name, newSize2 + "px");
        currWidth = newSize2;
        setSeparatorValue(calcValueNow());
      };
      const handleMouseup = (e) => {
        if (!isResizing) {
          return;
        }
        drawerRef.current.classList.remove(css(drawer_default.modifiers.resizing));
        isResizing = false;
        onResize && onResize(e, currWidth, id);
        setInitialVals = true;
        document.removeEventListener("mousemove", callbackMouseMove);
        document.removeEventListener("mouseup", callbackMouseUp);
      };
      const handleTouchEnd = (e) => {
        e.stopPropagation();
        if (!isResizing) {
          return;
        }
        isResizing = false;
        onResize && onResize(e, currWidth, id);
        document.removeEventListener("touchmove", callbackTouchMove);
        document.removeEventListener("touchend", callbackTouchEnd);
      };
      const callbackMouseMove = React148.useCallback(handleMouseMove, []);
      const callbackTouchEnd = React148.useCallback(handleTouchEnd, []);
      const callbackTouchMove = React148.useCallback(handleTouchMove, []);
      const callbackMouseUp = React148.useCallback(handleMouseup, []);
      const handleKeys = (e) => {
        const isRTL = getLanguageDirection(panel.current) === "rtl";
        const key = e.key;
        if (key !== "Escape" && key !== "Enter" && key !== "ArrowUp" && key !== "ArrowDown" && key !== "ArrowLeft" && key !== "ArrowRight") {
          if (isResizing) {
            e.preventDefault();
          }
          return;
        }
        e.preventDefault();
        if (key === "Escape" || key === "Enter") {
          onResize && onResize(e, currWidth, id);
        }
        const panelRect2 = panel.current.getBoundingClientRect();
        newSize = position === "bottom" ? panelRect2.height : panelRect2.width;
        let delta = 0;
        if (key === "ArrowRight") {
          if (isRTL) {
            delta = position === "left" || position === "start" ? -increment : increment;
          } else {
            delta = position === "left" || position === "start" ? increment : -increment;
          }
        } else if (key === "ArrowLeft") {
          if (isRTL) {
            delta = position === "left" || position === "start" ? increment : -increment;
          } else {
            delta = position === "left" || position === "start" ? -increment : increment;
          }
        } else if (key === "ArrowUp") {
          delta = increment;
        } else if (key === "ArrowDown") {
          delta = -increment;
        }
        newSize = newSize + delta;
        if (position === "bottom") {
          panel.current.style.overflowAnchor = "none";
        }
        panel.current.style.setProperty(c_drawer_panel_md_FlexBasis_default.name, newSize + "px");
        currWidth = newSize;
        setSeparatorValue(calcValueNow());
      };
      const boundaryCssVars = {};
      if (defaultSize) {
        boundaryCssVars[c_drawer_panel_md_FlexBasis_default.name] = defaultSize;
      }
      if (minSize) {
        boundaryCssVars[c_drawer_panel_md_FlexBasis_min_default.name] = minSize;
      }
      if (maxSize) {
        boundaryCssVars[c_drawer_panel_md_FlexBasis_max_default.name] = maxSize;
      }
      const isValidFocusTrap = (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.enabled) && !isStatic;
      const Component44 = isValidFocusTrap ? FocusTrap : "div";
      return React148.createElement(GenerateId, { prefix: "pf-drawer-panel-" }, (panelId) => {
        const focusTrapProps = {
          tabIndex: -1,
          "aria-modal": true,
          role: "dialog",
          active: isFocusTrapActive,
          "aria-labelledby": (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap["aria-labelledby"]) || id || panelId,
          focusTrapOptions: {
            fallbackFocus: () => panel.current,
            onActivate: () => {
              if (previouslyFocusedElement.current !== document.activeElement) {
                previouslyFocusedElement.current = document.activeElement;
              }
            },
            onDeactivate: () => {
              previouslyFocusedElement.current && previouslyFocusedElement.current.focus && previouslyFocusedElement.current.focus();
            },
            clickOutsideDeactivates: true,
            returnFocusOnDeactivate: false,
            // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
            // We want to prevent this in case false is ever passed in.
            initialFocus: (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.elementToFocusOnExpand) || void 0,
            escapeDeactivates: false
          }
        };
        return React148.createElement(Component44, Object.assign({}, isValidFocusTrap && focusTrapProps, { id: id || panelId, className: css(drawer_default.drawerPanel, isResizable && drawer_default.modifiers.resizable, hasNoBorder && drawer_default.modifiers.noBorder, formatBreakpointMods(widths, drawer_default), colorVariant === DrawerColorVariant.light200 && drawer_default.modifiers.light_200, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, className), onTransitionEnd: (ev) => {
          if (ev.target === panel.current) {
            if (!hidden && ev.nativeEvent.propertyName === "transform") {
              onExpand(ev);
            }
            setIsExpandedInternal(!hidden);
            if (isValidFocusTrap && ev.nativeEvent.propertyName === "transform") {
              setIsFocusTrapActive((prevIsFocusTrapActive) => !prevIsFocusTrapActive);
            }
          }
        }, hidden }, (defaultSize || minSize || maxSize) && {
          style: boundaryCssVars
        }, props, { ref: panel }), isExpandedInternal && React148.createElement(
          React148.Fragment,
          null,
          isResizable && React148.createElement(
            React148.Fragment,
            null,
            React148.createElement(
              "div",
              { className: css(drawer_default.drawerSplitter, position !== "bottom" && drawer_default.modifiers.vertical), role: "separator", tabIndex: 0, "aria-orientation": position === "bottom" ? "horizontal" : "vertical", "aria-label": resizeAriaLabel, "aria-valuenow": separatorValue, "aria-valuemin": 0, "aria-valuemax": 100, "aria-controls": id || panelId, onMouseDown: handleMousedown, onKeyDown: handleKeys, onTouchStart: handleTouchStart, ref: splitterRef },
              React148.createElement("div", { className: css(drawer_default.drawerSplitterHandle), "aria-hidden": true })
            ),
            React148.createElement("div", { className: css(drawer_default.drawerPanelMain) }, children)
          ),
          !isResizable && children
        ));
      });
    };
    DrawerPanelContent.displayName = "DrawerPanelContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerSection.js
var React149, DrawerSection;
var init_DrawerSection = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerSection.js"() {
    init_tslib_es6();
    React149 = __toESM(require_react());
    init_drawer2();
    init_esm();
    init_Drawer();
    DrawerSection = (_a) => {
      var {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        className = "",
        children,
        colorVariant = DrawerColorVariant.default
      } = _a, props = __rest(_a, ["className", "children", "colorVariant"]);
      return React149.createElement("div", Object.assign({ className: css(drawer_default.drawerSection, colorVariant === DrawerColorVariant.light200 && drawer_default.modifiers.light_200, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, className) }, props), children);
    };
    DrawerSection.displayName = "DrawerSection";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/index.js
var init_Drawer2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Drawer/index.js"() {
    init_Drawer();
    init_DrawerActions();
    init_DrawerCloseButton();
    init_DrawerContent();
    init_DrawerContentBody();
    init_DrawerHead();
    init_DrawerPanelBody();
    init_DrawerPanelContent();
    init_DrawerSection();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js
var import_react15, DropdownBase, Dropdown;
var init_Dropdown = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js"() {
    init_tslib_es6();
    import_react15 = __toESM(require_react());
    init_esm();
    init_Menu2();
    init_Popper2();
    init_helpers();
    DropdownBase = (_a) => {
      var { children, className, onSelect, isOpen, toggle, shouldFocusToggleOnSelect = false, onOpenChange, isPlain, isScrollable, innerRef, ouiaId, ouiaSafe = true, zIndex = 9999, popperProps, onOpenChangeKeys = ["Escape", "Tab"], menuHeight, maxMenuHeight } = _a, props = __rest(_a, ["children", "className", "onSelect", "isOpen", "toggle", "shouldFocusToggleOnSelect", "onOpenChange", "isPlain", "isScrollable", "innerRef", "ouiaId", "ouiaSafe", "zIndex", "popperProps", "onOpenChangeKeys", "menuHeight", "maxMenuHeight"]);
      const localMenuRef = import_react15.default.useRef();
      const localToggleRef = import_react15.default.useRef();
      const ouiaProps = useOUIAProps(Dropdown.displayName, ouiaId, ouiaSafe);
      const menuRef = innerRef || localMenuRef;
      const toggleRef = typeof toggle === "function" || typeof toggle !== "function" && !toggle.toggleRef ? localToggleRef : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;
      import_react15.default.useEffect(() => {
        const handleMenuKeys = (event) => {
          var _a2, _b, _c;
          if (isOpen && onOpenChange && (((_a2 = menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
            if (onOpenChangeKeys.includes(event.key)) {
              onOpenChange(false);
              (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
            }
          }
        };
        const handleClick = (event) => {
          var _a2, _b, _c;
          if (isOpen && ((_a2 = toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
            setTimeout(() => {
              var _a3;
              const firstElement = (_a3 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector('li button:not(:disabled),li input:not(:disabled),li a:not([aria-disabled="true"])');
              firstElement && firstElement.focus();
            }, 0);
          }
          if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
              onOpenChange(false);
            }
          }
        };
        window.addEventListener("keydown", handleMenuKeys);
        window.addEventListener("click", handleClick);
        return () => {
          window.removeEventListener("keydown", handleMenuKeys);
          window.removeEventListener("click", handleClick);
        };
      }, [isOpen, menuRef, toggleRef, onOpenChange, onOpenChangeKeys]);
      const scrollable = maxMenuHeight !== void 0 || menuHeight !== void 0 || isScrollable;
      const menu = import_react15.default.createElement(
        Menu,
        Object.assign({ className: css(className), ref: menuRef, onSelect: (event, value) => {
          onSelect && onSelect(event, value);
          shouldFocusToggleOnSelect && toggleRef.current.focus();
        }, isPlain, isScrollable: scrollable }, props, ouiaProps),
        import_react15.default.createElement(MenuContent, { menuHeight, maxMenuHeight }, children)
      );
      return import_react15.default.createElement(Popper, Object.assign({ trigger: typeof toggle === "function" ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
    };
    Dropdown = import_react15.default.forwardRef((props, ref) => import_react15.default.createElement(DropdownBase, Object.assign({ innerRef: ref }, props)));
    Dropdown.displayName = "Dropdown";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownGroup.js
var import_react16, DropdownGroup;
var init_DropdownGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownGroup.js"() {
    init_tslib_es6();
    import_react16 = __toESM(require_react());
    init_esm();
    init_Menu2();
    DropdownGroup = (_a) => {
      var { children, className, label, labelHeadingLevel = "h1" } = _a, props = __rest(_a, ["children", "className", "label", "labelHeadingLevel"]);
      return import_react16.default.createElement(MenuGroup, Object.assign({ className: css(className), label, labelHeadingLevel }, props), children);
    };
    DropdownGroup.displayName = "DropdownGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem.js
var import_react17, DropdownItemBase, DropdownItem;
var init_DropdownItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem.js"() {
    init_tslib_es6();
    import_react17 = __toESM(require_react());
    init_esm();
    init_Menu2();
    init_helpers();
    DropdownItemBase = (_a) => {
      var { children, className, description, isDisabled, isAriaDisabled, value, onClick, ouiaId, ouiaSafe, innerRef, tooltipProps } = _a, props = __rest(_a, ["children", "className", "description", "isDisabled", "isAriaDisabled", "value", "onClick", "ouiaId", "ouiaSafe", "innerRef", "tooltipProps"]);
      const ouiaProps = useOUIAProps(DropdownItem.displayName, ouiaId, ouiaSafe);
      return import_react17.default.createElement(MenuItem, Object.assign({ className: css(className), description, isDisabled, isAriaDisabled, itemId: value, onClick, tooltipProps, ref: innerRef }, ouiaProps, props), children);
    };
    DropdownItem = import_react17.default.forwardRef((props, ref) => import_react17.default.createElement(DropdownItemBase, Object.assign({}, props, { innerRef: ref })));
    DropdownItem.displayName = "DropdownItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownList.js
var import_react18, DropdownList;
var init_DropdownList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownList.js"() {
    init_tslib_es6();
    import_react18 = __toESM(require_react());
    init_esm();
    init_Menu2();
    DropdownList = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return import_react18.default.createElement(MenuList, Object.assign({ className: css(className) }, props), children);
    };
    DropdownList.displayName = "DropdownList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/index.js
var init_Dropdown2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Dropdown/index.js"() {
    init_Dropdown();
    init_DropdownGroup();
    init_DropdownItem();
    init_DropdownList();
  }
});

// node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.css
var init_dual_list_selector = __esm({
  "node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.mjs
var dual_list_selector_default;
var init_dual_list_selector2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.mjs"() {
    init_dual_list_selector();
    dual_list_selector_default = {
      "badge": "pf-v5-c-badge",
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "dualListSelector": "pf-v5-c-dual-list-selector",
      "dualListSelectorControls": "pf-v5-c-dual-list-selector__controls",
      "dualListSelectorControlsItem": "pf-v5-c-dual-list-selector__controls-item",
      "dualListSelectorDraggable": "pf-v5-c-dual-list-selector__draggable",
      "dualListSelectorHeader": "pf-v5-c-dual-list-selector__header",
      "dualListSelectorItem": "pf-v5-c-dual-list-selector__item",
      "dualListSelectorItemCheck": "pf-v5-c-dual-list-selector__item-check",
      "dualListSelectorItemCount": "pf-v5-c-dual-list-selector__item-count",
      "dualListSelectorItemMain": "pf-v5-c-dual-list-selector__item-main",
      "dualListSelectorItemText": "pf-v5-c-dual-list-selector__item-text",
      "dualListSelectorItemToggle": "pf-v5-c-dual-list-selector__item-toggle",
      "dualListSelectorItemToggleIcon": "pf-v5-c-dual-list-selector__item-toggle-icon",
      "dualListSelectorList": "pf-v5-c-dual-list-selector__list",
      "dualListSelectorListItem": "pf-v5-c-dual-list-selector__list-item",
      "dualListSelectorListItemRow": "pf-v5-c-dual-list-selector__list-item-row",
      "dualListSelectorMain": "pf-v5-c-dual-list-selector__main",
      "dualListSelectorMenu": "pf-v5-c-dual-list-selector__menu",
      "dualListSelectorPane": "pf-v5-c-dual-list-selector__pane",
      "dualListSelectorStatus": "pf-v5-c-dual-list-selector__status",
      "dualListSelectorStatusText": "pf-v5-c-dual-list-selector__status-text",
      "dualListSelectorTitleText": "pf-v5-c-dual-list-selector__title-text",
      "dualListSelectorTools": "pf-v5-c-dual-list-selector__tools",
      "dualListSelectorToolsActions": "pf-v5-c-dual-list-selector__tools-actions",
      "dualListSelectorToolsFilter": "pf-v5-c-dual-list-selector__tools-filter",
      "modifiers": {
        "chosen": "pf-m-chosen",
        "dragOver": "pf-m-drag-over",
        "expandable": "pf-m-expandable",
        "expanded": "pf-m-expanded",
        "disabled": "pf-m-disabled",
        "selected": "pf-m-selected",
        "check": "pf-m-check",
        "ghostRow": "pf-m-ghost-row",
        "read": "pf-m-read"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-left-icon.js
var AngleDoubleLeftIconConfig, AngleDoubleLeftIcon, angle_double_left_icon_default;
var init_angle_double_left_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-left-icon.js"() {
    init_createIcon();
    AngleDoubleLeftIconConfig = {
      name: "AngleDoubleLeftIcon",
      height: 512,
      width: 448,
      svgPath: "M223.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L319.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L393.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34zm-192 34l136 136c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9L127.9 256l96.4-96.4c9.4-9.4 9.4-24.6 0-33.9L201.7 103c-9.4-9.4-24.6-9.4-33.9 0l-136 136c-9.5 9.4-9.5 24.6-.1 34z",
      yOffset: 0,
      xOffset: 0
    };
    AngleDoubleLeftIcon = createIcon(AngleDoubleLeftIconConfig);
    angle_double_left_icon_default = AngleDoubleLeftIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-right-icon.js
var AngleDoubleRightIconConfig, AngleDoubleRightIcon, angle_double_right_icon_default;
var init_angle_double_right_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-right-icon.js"() {
    init_createIcon();
    AngleDoubleRightIconConfig = {
      name: "AngleDoubleRightIcon",
      height: 512,
      width: 448,
      svgPath: "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z",
      yOffset: 0,
      xOffset: 0
    };
    AngleDoubleRightIcon = createIcon(AngleDoubleRightIconConfig);
    angle_double_right_icon_default = AngleDoubleRightIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/treeUtils.js
function flattenTree(tree) {
  let result = [];
  tree.forEach((item) => {
    if (item.children) {
      result = result.concat(flattenTree(item.children));
    } else {
      result.push(item.id);
    }
  });
  return result;
}
function flattenTreeWithFolders(tree) {
  let result = [];
  tree.forEach((item) => {
    result.push(item.id);
    if (item.children) {
      result = result.concat(flattenTreeWithFolders(item.children));
    }
  });
  return result;
}
function filterFolders(tree, inputList) {
  let result = [];
  tree.forEach((item) => {
    if (item.children) {
      result = result.concat(filterFolders(item.children, inputList));
    } else {
      if (inputList.includes(item.id)) {
        result.push(item.id);
      }
    }
  });
  return result;
}
function filterTreeItems(item, inputList) {
  if (inputList.includes(item.id)) {
    return true;
  }
  if (item.children) {
    return (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child) => filterTreeItems(child, inputList))).length > 0;
  }
}
function filterTreeItemsWithoutFolders(item, inputList) {
  if (item.children) {
    return (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child) => child.children ? filterTreeItemsWithoutFolders(child, inputList) : filterTreeItems(child, inputList))).length > 0;
  }
  if (inputList.includes(item.id)) {
    return true;
  }
}
function filterRestTreeItems(item, inputList) {
  if (item.children) {
    const child = (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child2) => filterRestTreeItems(child2, inputList))).length > 0;
    return child;
  }
  if (!inputList.includes(item.id)) {
    return true;
  }
}
var init_treeUtils = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/treeUtils.js"() {
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorContext.js
var React154, DualListSelectorContext, DualListSelectorListContext, DualListSelectorPaneContext;
var init_DualListSelectorContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorContext.js"() {
    React154 = __toESM(require_react());
    DualListSelectorContext = React154.createContext({ isTree: false });
    DualListSelectorListContext = React154.createContext({});
    DualListSelectorPaneContext = React154.createContext({ isChosen: false });
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTreeItem.js
var React155, DualListSelectorTreeItemBase, DualListSelectorTreeItem;
var init_DualListSelectorTreeItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTreeItem.js"() {
    init_tslib_es6();
    React155 = __toESM(require_react());
    init_dual_list_selector2();
    init_esm();
    init_Badge2();
    init_angle_right_icon();
    init_treeUtils();
    init_DualListSelectorContext();
    DualListSelectorTreeItemBase = (_a) => {
      var {
        onOptionCheck,
        children,
        className,
        id,
        text,
        defaultExpanded,
        hasBadge,
        isChecked,
        checkProps,
        badgeProps,
        itemData,
        isDisabled = false,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        useMemo: useMemo8
      } = _a, props = __rest(_a, ["onOptionCheck", "children", "className", "id", "text", "defaultExpanded", "hasBadge", "isChecked", "checkProps", "badgeProps", "itemData", "isDisabled", "useMemo"]);
      const ref = React155.useRef(null);
      const [isExpanded, setIsExpanded] = React155.useState(defaultExpanded || false);
      const { setFocusedOption } = React155.useContext(DualListSelectorListContext);
      React155.useEffect(() => {
        setIsExpanded(defaultExpanded);
      }, [defaultExpanded]);
      return React155.createElement(
        "li",
        Object.assign({ className: css(dual_list_selector_default.dualListSelectorListItem, className, children && dual_list_selector_default.modifiers.expandable, isExpanded && dual_list_selector_default.modifiers.expanded, isDisabled && dual_list_selector_default.modifiers.disabled), id }, props, { "aria-selected": isChecked, role: "treeitem" }, isExpanded && { "aria-expanded": "true" }),
        React155.createElement(
          "div",
          { className: css(dual_list_selector_default.dualListSelectorListItemRow, isChecked && dual_list_selector_default.modifiers.selected, dual_list_selector_default.modifiers.check) },
          React155.createElement(
            "div",
            { className: css(dual_list_selector_default.dualListSelectorItem), ref, tabIndex: -1, onClick: isDisabled ? void 0 : (evt) => {
              onOptionCheck && onOptionCheck(evt, !isChecked, itemData);
              setFocusedOption(id);
            } },
            React155.createElement(
              "span",
              { className: css(dual_list_selector_default.dualListSelectorItemMain) },
              children && React155.createElement(
                "div",
                { className: css(dual_list_selector_default.dualListSelectorItemToggle), onClick: (e) => {
                  if (children) {
                    setIsExpanded(!isExpanded);
                  }
                  e.stopPropagation();
                }, onKeyDown: (e) => {
                  if (e.key === " " || e.key === "Enter") {
                    document.activeElement.click();
                    e.preventDefault();
                  }
                }, tabIndex: -1 },
                React155.createElement(
                  "span",
                  { className: css(dual_list_selector_default.dualListSelectorItemToggleIcon) },
                  React155.createElement(angle_right_icon_default, { "aria-hidden": true })
                )
              ),
              React155.createElement(
                "span",
                { className: css(dual_list_selector_default.dualListSelectorItemCheck) },
                React155.createElement("input", Object.assign({ type: "checkbox", onChange: (evt) => {
                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);
                  setFocusedOption(id);
                }, onClick: (evt) => evt.stopPropagation(), onKeyDown: (e) => {
                  if (e.key === " " || e.key === "Enter") {
                    onOptionCheck && onOptionCheck(e, !isChecked, itemData);
                    setFocusedOption(id);
                    e.preventDefault();
                  }
                }, ref: (elem) => elem && (elem.indeterminate = isChecked === null), checked: isChecked || false, tabIndex: -1 }, checkProps))
              ),
              React155.createElement("span", { className: css(dual_list_selector_default.dualListSelectorItemText) }, text),
              hasBadge && children && React155.createElement(
                "span",
                { className: css(dual_list_selector_default.dualListSelectorItemCount) },
                React155.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length)
              )
            )
          )
        ),
        isExpanded && children
      );
    };
    DualListSelectorTreeItem = React155.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {
      if (!nextProps.useMemo) {
        return false;
      }
      if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {
        return false;
      }
      return true;
    });
    DualListSelectorTreeItem.displayName = "DualListSelectorTreeItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTree.js
var React156, DualListSelectorTree;
var init_DualListSelectorTree = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTree.js"() {
    init_tslib_es6();
    React156 = __toESM(require_react());
    init_esm();
    init_dual_list_selector2();
    init_DualListSelectorTreeItem();
    DualListSelectorTree = (_a) => {
      var { data, hasBadges = false, isNested = false, defaultAllExpanded = false, onOptionCheck, isDisabled = false } = _a, props = __rest(_a, ["data", "hasBadges", "isNested", "defaultAllExpanded", "onOptionCheck", "isDisabled"]);
      const dataToRender = typeof data === "function" ? data() : data;
      const tree = dataToRender.map((item) => React156.createElement(DualListSelectorTreeItem, Object.assign({ key: item.id, text: item.text, id: item.id, defaultExpanded: item.defaultExpanded !== void 0 ? item.defaultExpanded : defaultAllExpanded, onOptionCheck, isChecked: item.isChecked, checkProps: item.checkProps, hasBadge: item.hasBadge !== void 0 ? item.hasBadge : hasBadges, badgeProps: item.badgeProps, itemData: item, isDisabled, useMemo: true }, item.children && {
        children: React156.createElement(DualListSelectorTree, { isNested: true, data: item.children, hasBadges, defaultAllExpanded, onOptionCheck, isDisabled })
      })));
      return isNested ? React156.createElement("ul", Object.assign({ className: css(dual_list_selector_default.dualListSelectorList), role: "group" }, props), tree) : React156.createElement(React156.Fragment, null, tree);
    };
    DualListSelectorTree.displayName = "DualListSelectorTree";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListItem.js
var React157, DualListSelectorListItemBase, DualListSelectorListItem;
var init_DualListSelectorListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListItem.js"() {
    init_tslib_es6();
    React157 = __toESM(require_react());
    init_dual_list_selector2();
    init_esm();
    init_helpers();
    init_grip_vertical_icon();
    init_Button2();
    init_DualListSelectorContext();
    DualListSelectorListItemBase = (_a) => {
      var {
        onOptionSelect,
        orderIndex,
        children,
        className,
        id = getUniqueId("dual-list-selector-list-item"),
        isSelected,
        innerRef,
        isDraggable = false,
        isDisabled,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        draggableButtonAriaLabel = "Reorder option"
      } = _a, props = __rest(_a, ["onOptionSelect", "orderIndex", "children", "className", "id", "isSelected", "innerRef", "isDraggable", "isDisabled", "draggableButtonAriaLabel"]);
      const privateRef = React157.useRef(null);
      const ref = innerRef || privateRef;
      const { setFocusedOption } = React157.useContext(DualListSelectorListContext);
      return React157.createElement(
        "li",
        Object.assign({ className: css(dual_list_selector_default.dualListSelectorListItem, className, isDisabled && dual_list_selector_default.modifiers.disabled), key: orderIndex, onClick: isDisabled ? void 0 : (e) => {
          setFocusedOption(id);
          onOptionSelect(e, id);
        }, onKeyDown: (e) => {
          if (e.key === " " || e.key === "Enter") {
            document.activeElement.click();
            e.preventDefault();
          }
        }, "aria-selected": isSelected, id, ref, role: "option", tabIndex: -1 }, props),
        React157.createElement(
          "div",
          { className: css(dual_list_selector_default.dualListSelectorListItemRow, isSelected && dual_list_selector_default.modifiers.selected) },
          isDraggable && !isDisabled && React157.createElement(
            "div",
            { className: css(dual_list_selector_default.dualListSelectorDraggable) },
            React157.createElement(
              Button,
              { variant: ButtonVariant.plain, component: "span" },
              React157.createElement(grip_vertical_icon_default, { style: { verticalAlign: "-0.3em" } })
            )
          ),
          React157.createElement(
            "span",
            { className: css(dual_list_selector_default.dualListSelectorItem) },
            React157.createElement(
              "span",
              { className: css(dual_list_selector_default.dualListSelectorItemMain) },
              React157.createElement("span", { className: css(dual_list_selector_default.dualListSelectorItemText) }, children)
            )
          )
        )
      );
    };
    DualListSelectorListItemBase.displayName = "DualListSelectorListItemBase";
    DualListSelectorListItem = React157.forwardRef((props, ref) => React157.createElement(DualListSelectorListItemBase, Object.assign({ innerRef: ref }, props)));
    DualListSelectorListItem.displayName = "DualListSelectorListItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorList.js
var React158, DualListSelectorList;
var init_DualListSelectorList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorList.js"() {
    init_tslib_es6();
    init_esm();
    init_dual_list_selector2();
    init_DualListSelectorListItem();
    React158 = __toESM(require_react());
    init_DualListSelectorContext();
    DualListSelectorList = (_a) => {
      var { children } = _a, props = __rest(_a, ["children"]);
      const { setFocusedOption, isTree, ariaLabelledBy, focusedOption, displayOption, selectedOptions, id, onOptionSelect, options, isDisabled } = React158.useContext(DualListSelectorListContext);
      const onOptionClick = (e, index, id2) => {
        setFocusedOption(id2);
        onOptionSelect(e, index, id2);
      };
      const hasOptions = () => options.length !== 0 || children !== void 0 && children.length !== 0;
      return React158.createElement("ul", Object.assign({ className: css(dual_list_selector_default.dualListSelectorList) }, hasOptions() && {
        role: isTree ? "tree" : "listbox",
        "aria-multiselectable": true,
        "aria-labelledby": ariaLabelledBy,
        "aria-activedescendant": focusedOption
      }, { "aria-disabled": isDisabled ? "true" : void 0 }, props), options.length === 0 ? children : options.map((option, index) => {
        if (displayOption(option)) {
          return React158.createElement(DualListSelectorListItem, { key: index, isSelected: selectedOptions.indexOf(index) !== -1, id: `${id}-option-${index}`, onOptionSelect: (e, id2) => onOptionClick(e, index, id2), orderIndex: index, isDisabled }, option);
        }
        return;
      }));
    };
    DualListSelectorList.displayName = "DualListSelectorList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListWrapper.js
var React159, DualListSelectorListWrapperBase, DualListSelectorListWrapper;
var init_DualListSelectorListWrapper = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListWrapper.js"() {
    init_tslib_es6();
    React159 = __toESM(require_react());
    init_dual_list_selector2();
    init_esm();
    init_helpers();
    init_DualListSelectorList();
    init_DualListSelectorContext();
    DualListSelectorListWrapperBase = (_a) => {
      var { className, children, "aria-labelledby": ariaLabelledBy, innerRef, options = [], selectedOptions = [], onOptionSelect, displayOption, id = getUniqueId("dual-list-selector-list"), isDisabled = false } = _a, props = __rest(_a, ["className", "children", "aria-labelledby", "innerRef", "options", "selectedOptions", "onOptionSelect", "displayOption", "id", "isDisabled"]);
      const [focusedOption, setFocusedOption] = React159.useState("");
      const ref = React159.useRef(null);
      const menuRef = innerRef || ref;
      const { isTree } = React159.useContext(DualListSelectorContext);
      const handleKeys = (event) => {
        if (!menuRef.current || menuRef.current !== event.target.closest(`.${dual_list_selector_default.dualListSelectorMenu}`) && !Array.from(menuRef.current.getElementsByClassName(dual_list_selector_default.dualListSelectorMenu)).includes(event.target.closest(`.${dual_list_selector_default.dualListSelectorMenu}`))) {
          return;
        }
        event.stopImmediatePropagation();
        const validOptions = isTree ? Array.from(menuRef.current.querySelectorAll(`.${dual_list_selector_default.dualListSelectorItemToggle}, .${dual_list_selector_default.dualListSelectorItemCheck} > input`)) : Array.from(menuRef.current.getElementsByTagName("LI")).filter((el) => !el.classList.contains("pf-m-disabled"));
        const activeElement = document.activeElement;
        handleArrows(event, validOptions, (element) => activeElement.contains(element), (element) => {
          if (element.classList.contains(`.${dual_list_selector_default.dualListSelectorListItem}`)) {
            setFocusedOption(element.id);
          } else {
            setFocusedOption(element.closest(`.${dual_list_selector_default.dualListSelectorListItem}`).id);
          }
          return element;
        }, [`.${dual_list_selector_default.dualListSelectorItemToggle}`, `.${dual_list_selector_default.dualListSelectorItemCheck} > input`], void 0, false, false, false);
      };
      React159.useEffect(() => {
        window.addEventListener("keydown", handleKeys);
        return () => {
          window.removeEventListener("keydown", handleKeys);
        };
      }, [menuRef.current]);
      return React159.createElement(
        "div",
        Object.assign({ className: css(dual_list_selector_default.dualListSelectorMenu, className), ref: menuRef, tabIndex: 0 }, props),
        React159.createElement(DualListSelectorListContext.Provider, { value: {
          setFocusedOption,
          isTree,
          focusedOption,
          ariaLabelledBy,
          displayOption,
          selectedOptions,
          id,
          options,
          onOptionSelect,
          isDisabled
        } }, children ? children : React159.createElement(DualListSelectorList, null))
      );
    };
    DualListSelectorListWrapperBase.displayName = "DualListSelectorListWrapperBase";
    DualListSelectorListWrapper = React159.forwardRef((props, ref) => React159.createElement(DualListSelectorListWrapperBase, Object.assign({ innerRef: ref }, props)));
    DualListSelectorListWrapper.displayName = "DualListSelectorListWrapper";
  }
});

// node_modules/@patternfly/react-styles/css/components/Icon/icon.css
var init_icon = __esm({
  "node_modules/@patternfly/react-styles/css/components/Icon/icon.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Icon/icon.mjs
var icon_default;
var init_icon2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Icon/icon.mjs"() {
    init_icon();
    icon_default = {
      "icon": "pf-v5-c-icon",
      "iconContent": "pf-v5-c-icon__content",
      "iconProgress": "pf-v5-c-icon__progress",
      "modifiers": {
        "inline": "pf-m-inline",
        "sm": "pf-m-sm",
        "md": "pf-m-md",
        "lg": "pf-m-lg",
        "xl": "pf-m-xl",
        "inProgress": "pf-m-in-progress",
        "danger": "pf-m-danger",
        "warning": "pf-m-warning",
        "success": "pf-m-success",
        "info": "pf-m-info",
        "custom": "pf-m-custom"
      },
      "spinner": "pf-v5-c-spinner"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Icon/Icon.js
var React160, Icon;
var init_Icon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Icon/Icon.js"() {
    init_tslib_es6();
    React160 = __toESM(require_react());
    init_icon2();
    init_esm();
    init_Spinner2();
    Icon = (_a) => {
      var { children, className, progressIcon, size, iconSize, progressIconSize, status, isInline = false, isInProgress = false, defaultProgressArialabel = "Loading...", shouldMirrorRTL = false } = _a, props = __rest(_a, ["children", "className", "progressIcon", "size", "iconSize", "progressIconSize", "status", "isInline", "isInProgress", "defaultProgressArialabel", "shouldMirrorRTL"]);
      const _progressIcon = progressIcon !== null && progressIcon !== void 0 ? progressIcon : React160.createElement(Spinner, { diameter: "1em", "aria-label": defaultProgressArialabel });
      return React160.createElement(
        "span",
        Object.assign({ className: css(icon_default.icon, isInline && icon_default.modifiers.inline, isInProgress && icon_default.modifiers.inProgress, icon_default.modifiers[size], className) }, props),
        React160.createElement("span", { className: css(icon_default.iconContent, icon_default.modifiers[iconSize], icon_default.modifiers[status], shouldMirrorRTL && "pf-v5-m-mirror-inline-rtl") }, children),
        isInProgress && React160.createElement("span", { className: css(icon_default.iconProgress, icon_default.modifiers[progressIconSize], className) }, _progressIcon)
      );
    };
    Icon.displayName = "Icon";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Icon/index.js
var init_Icon2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Icon/index.js"() {
    init_Icon();
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-down-icon.js
var AngleDownIconConfig, AngleDownIcon, angle_down_icon_default;
var init_angle_down_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/angle-down-icon.js"() {
    init_createIcon();
    AngleDownIconConfig = {
      name: "AngleDownIcon",
      height: 512,
      width: 320,
      svgPath: "M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z",
      yOffset: 0,
      xOffset: 0
    };
    AngleDownIcon = createIcon(AngleDownIconConfig);
    angle_down_icon_default = AngleDownIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/search-icon.js
var SearchIconConfig, SearchIcon, search_icon_default;
var init_search_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/search-icon.js"() {
    init_createIcon();
    SearchIconConfig = {
      name: "SearchIcon",
      height: 512,
      width: 512,
      svgPath: "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z",
      yOffset: 0,
      xOffset: 0
    };
    SearchIcon = createIcon(SearchIconConfig);
    search_icon_default = SearchIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/arrow-right-icon.js
var ArrowRightIconConfig, ArrowRightIcon, arrow_right_icon_default;
var init_arrow_right_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/arrow-right-icon.js"() {
    init_createIcon();
    ArrowRightIconConfig = {
      name: "ArrowRightIcon",
      height: 512,
      width: 448,
      svgPath: "M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z",
      yOffset: 0,
      xOffset: 0
    };
    ArrowRightIcon = createIcon(ArrowRightIconConfig);
    arrow_right_icon_default = ArrowRightIcon;
  }
});

// node_modules/@patternfly/react-styles/css/components/Form/form.css
var init_form = __esm({
  "node_modules/@patternfly/react-styles/css/components/Form/form.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Form/form.mjs
var form_default;
var init_form2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Form/form.mjs"() {
    init_form();
    form_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "form": "pf-v5-c-form",
      "formActions": "pf-v5-c-form__actions",
      "formFieldGroup": "pf-v5-c-form__field-group",
      "formFieldGroupBody": "pf-v5-c-form__field-group-body",
      "formFieldGroupHeader": "pf-v5-c-form__field-group-header",
      "formFieldGroupHeaderActions": "pf-v5-c-form__field-group-header-actions",
      "formFieldGroupHeaderDescription": "pf-v5-c-form__field-group-header-description",
      "formFieldGroupHeaderMain": "pf-v5-c-form__field-group-header-main",
      "formFieldGroupHeaderTitle": "pf-v5-c-form__field-group-header-title",
      "formFieldGroupHeaderTitleText": "pf-v5-c-form__field-group-header-title-text",
      "formFieldGroupToggle": "pf-v5-c-form__field-group-toggle",
      "formFieldGroupToggleButton": "pf-v5-c-form__field-group-toggle-button",
      "formFieldGroupToggleIcon": "pf-v5-c-form__field-group-toggle-icon",
      "formFieldset": "pf-v5-c-form__fieldset",
      "formGroup": "pf-v5-c-form__group",
      "formGroupControl": "pf-v5-c-form__group-control",
      "formGroupLabel": "pf-v5-c-form__group-label",
      "formGroupLabelHelp": "pf-v5-c-form__group-label-help",
      "formGroupLabelInfo": "pf-v5-c-form__group-label-info",
      "formGroupLabelMain": "pf-v5-c-form__group-label-main",
      "formHelperText": "pf-v5-c-form__helper-text",
      "formHelperTextIcon": "pf-v5-c-form__helper-text-icon",
      "formLabel": "pf-v5-c-form__label",
      "formLabelRequired": "pf-v5-c-form__label-required",
      "formLabelText": "pf-v5-c-form__label-text",
      "formSection": "pf-v5-c-form__section",
      "formSectionTitle": "pf-v5-c-form__section-title",
      "modifiers": {
        "horizontal": "pf-m-horizontal",
        "alignRight": "pf-m-align-right",
        "noPaddingTop": "pf-m-no-padding-top",
        "horizontalOnXs": "pf-m-horizontal-on-xs",
        "horizontalOnSm": "pf-m-horizontal-on-sm",
        "horizontalOnMd": "pf-m-horizontal-on-md",
        "horizontalOnLg": "pf-m-horizontal-on-lg",
        "horizontalOnXl": "pf-m-horizontal-on-xl",
        "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
        "limitWidth": "pf-m-limit-width",
        "action": "pf-m-action",
        "info": "pf-m-info",
        "disabled": "pf-m-disabled",
        "inline": "pf-m-inline",
        "stack": "pf-m-stack",
        "error": "pf-m-error",
        "success": "pf-m-success",
        "warning": "pf-m-warning",
        "inactive": "pf-m-inactive",
        "hidden": "pf-m-hidden",
        "expanded": "pf-m-expanded"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/ActionGroup.js
var React161, ActionGroup;
var init_ActionGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/ActionGroup.js"() {
    init_tslib_es6();
    React161 = __toESM(require_react());
    init_form2();
    init_esm();
    ActionGroup = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      const customClassName = css(form_default.formGroup, form_default.modifiers.action, className);
      const formActionsComponent = React161.createElement("div", { className: css(form_default.formActions) }, children);
      return React161.createElement(
        "div",
        Object.assign({}, props, { className: customClassName }),
        React161.createElement("div", { className: css(form_default.formGroupControl) }, formActionsComponent)
      );
    };
    ActionGroup.displayName = "ActionGroup";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_form_m_limit_width_MaxWidth.js
var c_form_m_limit_width_MaxWidth, c_form_m_limit_width_MaxWidth_default;
var init_c_form_m_limit_width_MaxWidth = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_form_m_limit_width_MaxWidth.js"() {
    c_form_m_limit_width_MaxWidth = {
      "name": "--pf-v5-c-form--m-limit-width--MaxWidth",
      "value": "55rem",
      "var": "var(--pf-v5-c-form--m-limit-width--MaxWidth)"
    };
    c_form_m_limit_width_MaxWidth_default = c_form_m_limit_width_MaxWidth;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
var React162, FormBase, Form;
var init_Form = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js"() {
    init_tslib_es6();
    React162 = __toESM(require_react());
    init_form2();
    init_esm();
    init_c_form_m_limit_width_MaxWidth();
    FormBase = (_a) => {
      var { children = null, className = "", isHorizontal = false, isWidthLimited = false, maxWidth = "", innerRef } = _a, props = __rest(_a, ["children", "className", "isHorizontal", "isWidthLimited", "maxWidth", "innerRef"]);
      return React162.createElement("form", Object.assign({ noValidate: true }, maxWidth && {
        style: Object.assign({ [c_form_m_limit_width_MaxWidth_default.name]: maxWidth }, props.style)
      }, props, { className: css(form_default.form, isHorizontal && form_default.modifiers.horizontal, (isWidthLimited || maxWidth) && form_default.modifiers.limitWidth, className), ref: innerRef }), children);
    };
    Form = React162.forwardRef((props, ref) => React162.createElement(FormBase, Object.assign({ innerRef: ref }, props)));
    Form.displayName = "Form";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js
var React163, FormAlert;
var init_FormAlert = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js"() {
    init_tslib_es6();
    React163 = __toESM(require_react());
    init_esm();
    init_form2();
    FormAlert = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return (
        // There are currently no associated styles with the pf-v5-c-form_alert class.
        // Therefore, it does not exist in react-styles
        React163.createElement("div", Object.assign({}, props, { className: css(`${form_default.form}__alert`, className) }), children)
      );
    };
    FormAlert.displayName = "FormAlert";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupToggle.js
var React164, FormFieldGroupToggle;
var init_FormFieldGroupToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupToggle.js"() {
    init_tslib_es6();
    React164 = __toESM(require_react());
    init_form2();
    init_esm();
    init_angle_right_icon();
    init_Button2();
    FormFieldGroupToggle = (_a) => {
      var { className, onToggle, isExpanded, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, toggleId } = _a, props = __rest(_a, ["className", "onToggle", "isExpanded", "aria-label", "aria-labelledby", "toggleId"]);
      return React164.createElement(
        "div",
        Object.assign({ className: css(form_default.formFieldGroupToggle, className) }, props),
        React164.createElement(
          "div",
          { className: css(form_default.formFieldGroupToggleButton) },
          React164.createElement(
            Button,
            { variant: "plain", "aria-label": ariaLabel, onClick: onToggle, "aria-expanded": isExpanded, "aria-labelledby": ariaLabelledby, id: toggleId },
            React164.createElement(
              "span",
              { className: css(form_default.formFieldGroupToggleIcon) },
              React164.createElement(angle_right_icon_default, { "aria-hidden": "true" })
            )
          )
        )
      );
    };
    FormFieldGroupToggle.displayName = "FormFieldGroupToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js
var React165, InternalFormFieldGroup;
var init_InternalFormFieldGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js"() {
    init_tslib_es6();
    React165 = __toESM(require_react());
    init_form2();
    init_esm();
    init_FormFieldGroupToggle();
    init_helpers();
    InternalFormFieldGroup = (_a) => {
      var { children, className, header, isExpandable, isExpanded, onToggle, toggleAriaLabel } = _a, props = __rest(_a, ["children", "className", "header", "isExpandable", "isExpanded", "onToggle", "toggleAriaLabel"]);
      const headerTitleText = header ? header.props.titleText : null;
      if (isExpandable && !toggleAriaLabel && !headerTitleText) {
        console.error("FormFieldGroupExpandable:", "toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible");
      }
      return React165.createElement(
        "div",
        Object.assign({ className: css(form_default.formFieldGroup, isExpanded && isExpandable && form_default.modifiers.expanded, className), role: "group" }, headerTitleText && { "aria-labelledby": `${header.props.titleText.id}` }, props),
        isExpandable && React165.createElement(GenerateId, { prefix: "form-field-group-toggle" }, (id) => React165.createElement(FormFieldGroupToggle, Object.assign({ onToggle, isExpanded, "aria-label": toggleAriaLabel, toggleId: id }, headerTitleText && { "aria-labelledby": `${header.props.titleText.id} ${id}` }))),
        header && header,
        (!isExpandable || isExpandable && isExpanded) && React165.createElement("div", { className: css(form_default.formFieldGroupBody) }, children)
      );
    };
    InternalFormFieldGroup.displayName = "InternalFormFieldGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js
var React166, FormFieldGroup;
var init_FormFieldGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js"() {
    init_tslib_es6();
    React166 = __toESM(require_react());
    init_InternalFormFieldGroup();
    FormFieldGroup = (_a) => {
      var { children, className, header } = _a, props = __rest(_a, ["children", "className", "header"]);
      return React166.createElement(InternalFormFieldGroup, Object.assign({ className, header }, props), children);
    };
    FormFieldGroup.displayName = "FormFieldGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupExpandable.js
var React167, import_react19, FormFieldGroupExpandable;
var init_FormFieldGroupExpandable = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupExpandable.js"() {
    init_tslib_es6();
    React167 = __toESM(require_react());
    import_react19 = __toESM(require_react());
    init_InternalFormFieldGroup();
    FormFieldGroupExpandable = (_a) => {
      var { children, className, header, isExpanded = false, toggleAriaLabel } = _a, props = __rest(_a, ["children", "className", "header", "isExpanded", "toggleAriaLabel"]);
      const [localIsExpanded, setIsExpanded] = (0, import_react19.useState)(isExpanded);
      return React167.createElement(InternalFormFieldGroup, Object.assign({ className, header, isExpandable: true, isExpanded: localIsExpanded, toggleAriaLabel, onToggle: () => setIsExpanded(!localIsExpanded) }, props), children);
    };
    FormFieldGroupExpandable.displayName = "FormFieldGroupExpandable";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupHeader.js
var React168, FormFieldGroupHeader;
var init_FormFieldGroupHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupHeader.js"() {
    init_tslib_es6();
    React168 = __toESM(require_react());
    init_form2();
    init_esm();
    FormFieldGroupHeader = (_a) => {
      var { className, titleText, titleDescription, actions } = _a, props = __rest(_a, ["className", "titleText", "titleDescription", "actions"]);
      return React168.createElement(
        "div",
        Object.assign({ className: css(form_default.formFieldGroupHeader, className) }, props),
        React168.createElement(
          "div",
          { className: css(form_default.formFieldGroupHeaderMain) },
          titleText && React168.createElement(
            "div",
            { className: css(form_default.formFieldGroupHeaderTitle) },
            React168.createElement("div", { className: css(form_default.formFieldGroupHeaderTitleText), id: titleText.id }, titleText.text)
          ),
          titleDescription && React168.createElement("div", { className: css(form_default.formFieldGroupHeaderDescription) }, titleDescription)
        ),
        React168.createElement("div", { className: css(form_default.formFieldGroupHeaderActions) }, actions && actions)
      );
    };
    FormFieldGroupHeader.displayName = "FormFieldGroupHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js
var React169, FormGroup;
var init_FormGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js"() {
    init_tslib_es6();
    React169 = __toESM(require_react());
    init_form2();
    init_htmlConstants();
    init_esm();
    init_GenerateId();
    FormGroup = (_a) => {
      var { children = null, className = "", label, labelInfo, labelIcon, isRequired = false, isInline = false, hasNoPaddingTop = false, isStack = false, fieldId, role } = _a, props = __rest(_a, ["children", "className", "label", "labelInfo", "labelIcon", "isRequired", "isInline", "hasNoPaddingTop", "isStack", "fieldId", "role"]);
      const isGroupOrRadioGroup = role === "group" || role === "radiogroup";
      const LabelComponent = isGroupOrRadioGroup ? "span" : "label";
      const labelContent = React169.createElement(
        React169.Fragment,
        null,
        React169.createElement(
          LabelComponent,
          Object.assign({ className: css(form_default.formLabel) }, !isGroupOrRadioGroup && { htmlFor: fieldId }),
          React169.createElement("span", { className: css(form_default.formLabelText) }, label),
          isRequired && React169.createElement(
            "span",
            { className: css(form_default.formLabelRequired), "aria-hidden": "true" },
            " ",
            ASTERISK
          )
        ),
        " ",
        React169.isValidElement(labelIcon) && labelIcon
      );
      return React169.createElement(GenerateId, null, (randomId) => React169.createElement(
        "div",
        Object.assign({ className: css(form_default.formGroup, className) }, role && { role }, isGroupOrRadioGroup && { "aria-labelledby": `${fieldId || randomId}-legend` }, props),
        label && React169.createElement(
          "div",
          Object.assign({ className: css(form_default.formGroupLabel, labelInfo && form_default.modifiers.info, hasNoPaddingTop && form_default.modifiers.noPaddingTop) }, isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` }),
          labelInfo && React169.createElement(
            React169.Fragment,
            null,
            React169.createElement("div", { className: css(form_default.formGroupLabelMain) }, labelContent),
            React169.createElement("div", { className: css(form_default.formGroupLabelInfo) }, labelInfo)
          ),
          !labelInfo && labelContent
        ),
        React169.createElement("div", { className: css(form_default.formGroupControl, isInline && form_default.modifiers.inline, isStack && form_default.modifiers.stack) }, children)
      ));
    };
    FormGroup.displayName = "FormGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormHelperText.js
var React170, FormHelperText;
var init_FormHelperText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormHelperText.js"() {
    init_tslib_es6();
    React170 = __toESM(require_react());
    init_esm();
    init_form2();
    FormHelperText = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React170.createElement("div", Object.assign({ className: css(form_default.formHelperText, className) }, props), children);
    };
    FormHelperText.displayName = "FormHelperText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormSection.js
var React171, FormSection;
var init_FormSection = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormSection.js"() {
    init_tslib_es6();
    React171 = __toESM(require_react());
    init_form2();
    init_esm();
    init_GenerateId();
    FormSection = (_a) => {
      var { className = "", children, title = "", titleElement: TitleElement = "div" } = _a, props = __rest(_a, ["className", "children", "title", "titleElement"]);
      return React171.createElement(GenerateId, { prefix: "pf-form-section-title" }, (sectionId) => React171.createElement(
        "section",
        Object.assign({ className: css(form_default.formSection, className), role: "group" }, title && { "aria-labelledby": sectionId }, props),
        title && React171.createElement(TitleElement, { id: sectionId, className: css(form_default.formSectionTitle, className) }, title),
        children
      ));
    };
    FormSection.displayName = "FormSection";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormContext.js
var import_react20, FormContext, FormContextConsumer, FormContextProvider;
var init_FormContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/FormContext.js"() {
    init_tslib_es6();
    import_react20 = __toESM(require_react());
    FormContext = import_react20.default.createContext({});
    FormContextConsumer = FormContext.Consumer;
    FormContextProvider = ({ initialValues, children }) => {
      var _a;
      const [values, setValues] = import_react20.default.useState(initialValues || {});
      const [errors, setErrors] = import_react20.default.useState({});
      const [validators, setValidators] = import_react20.default.useState({});
      const [touched, setTouched] = import_react20.default.useState({});
      const isValid = ((_a = Object.keys(errors)) === null || _a === void 0 ? void 0 : _a.length) === 0;
      const getValue = (fieldId) => Object.entries(values).reduce((acc, [id, value]) => id === fieldId ? value : acc, "");
      const setValue = (fieldId, value, triggerValidation = true) => {
        var _a2;
        if (values[fieldId] !== value) {
          setValues((prevValues) => Object.assign(Object.assign({}, prevValues), { [fieldId]: value }));
          triggerValidation && ((_a2 = validators[fieldId]) === null || _a2 === void 0 ? void 0 : _a2.call(validators, value));
        }
      };
      const getError = (fieldId) => Object.entries(errors).reduce((acc, [id, error]) => id === fieldId ? error : acc, "");
      const setError = (fieldId, error) => errors[fieldId] !== error && setErrors((_a2) => {
        var _b = fieldId, _ = _a2[_b], prevErrors = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
        return Object.assign(Object.assign({}, prevErrors), !!error && { [fieldId]: error });
      });
      const isTouched = (fieldId) => Object.entries(touched).reduce((acc, [id, isTouched2]) => id === fieldId ? isTouched2 : acc, false);
      const setFieldTouched = (fieldId, isTouched2) => touched[fieldId] !== isTouched2 && setTouched((_a2) => {
        var _b = fieldId, _ = _a2[_b], prevTouched = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
        return Object.assign(Object.assign({}, prevTouched), isTouched2 && { [fieldId]: isTouched2 });
      });
      const setValidator = (fieldId, validate2) => validators[fieldId] !== validate2 && setValidators((prevValidators) => Object.assign(Object.assign({}, prevValidators), { [fieldId]: validate2 }));
      const validate = () => {
        var _a2;
        return (_a2 = Object.entries(validators)) === null || _a2 === void 0 ? void 0 : _a2.reduce((acc, [id, validateField]) => {
          const fieldError = validateField(values[id]);
          if (fieldError) {
            acc[id] = fieldError;
          }
          return acc;
        }, {});
      };
      return import_react20.default.createElement(FormContext.Provider, { value: {
        values,
        errors,
        touched,
        isValid,
        setValues,
        setErrors,
        getValue,
        setValue,
        getError,
        setError,
        validate,
        setValidator,
        isTouched,
        setTouched: setFieldTouched
      } }, typeof children === "function" ? import_react20.default.createElement(FormContext.Consumer, null, (formContext) => children(formContext)) : children);
    };
    FormContextProvider.displayName = "FormContextProvider";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Form/index.js
var init_Form2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Form/index.js"() {
    init_ActionGroup();
    init_Form();
    init_FormAlert();
    init_FormFieldGroup();
    init_FormFieldGroupExpandable();
    init_FormFieldGroupHeader();
    init_FormGroup();
    init_FormHelperText();
    init_FormSection();
    init_FormContext();
  }
});

// node_modules/@patternfly/react-styles/css/components/Panel/panel.css
var init_panel = __esm({
  "node_modules/@patternfly/react-styles/css/components/Panel/panel.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Panel/panel.mjs
var panel_default;
var init_panel2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Panel/panel.mjs"() {
    init_panel();
    panel_default = {
      "modifiers": {
        "bordered": "pf-m-bordered",
        "raised": "pf-m-raised",
        "scrollable": "pf-m-scrollable"
      },
      "panel": "pf-v5-c-panel",
      "panelFooter": "pf-v5-c-panel__footer",
      "panelHeader": "pf-v5-c-panel__header",
      "panelMain": "pf-v5-c-panel__main",
      "panelMainBody": "pf-v5-c-panel__main-body",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js
var React173, PanelBase, Panel;
var init_Panel = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js"() {
    init_tslib_es6();
    React173 = __toESM(require_react());
    init_panel2();
    init_esm();
    PanelBase = (_a) => {
      var { className, children, variant, isScrollable, innerRef } = _a, props = __rest(_a, ["className", "children", "variant", "isScrollable", "innerRef"]);
      return React173.createElement("div", Object.assign({ className: css(panel_default.panel, variant === "raised" && panel_default.modifiers.raised, variant === "bordered" && panel_default.modifiers.bordered, isScrollable && panel_default.modifiers.scrollable, className), ref: innerRef }, props), children);
    };
    Panel = React173.forwardRef((props, ref) => React173.createElement(PanelBase, Object.assign({ innerRef: ref }, props)));
    Panel.displayName = "Panel";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_panel__main_MaxHeight.js
var c_panel__main_MaxHeight, c_panel_main_MaxHeight_default;
var init_c_panel_main_MaxHeight = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_panel__main_MaxHeight.js"() {
    c_panel__main_MaxHeight = {
      "name": "--pf-v5-c-panel__main--MaxHeight",
      "value": "18.75rem",
      "var": "var(--pf-v5-c-panel__main--MaxHeight)"
    };
    c_panel_main_MaxHeight_default = c_panel__main_MaxHeight;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMain.js
var React174, PanelMain;
var init_PanelMain = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMain.js"() {
    init_tslib_es6();
    React174 = __toESM(require_react());
    init_panel2();
    init_esm();
    init_c_panel_main_MaxHeight();
    PanelMain = (_a) => {
      var { className, children, maxHeight } = _a, props = __rest(_a, ["className", "children", "maxHeight"]);
      return React174.createElement("div", Object.assign({ className: css(panel_default.panelMain, className), style: { [c_panel_main_MaxHeight_default.name]: maxHeight } }, props), children);
    };
    PanelMain.displayName = "PanelMain";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMainBody.js
var React175, PanelMainBody;
var init_PanelMainBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMainBody.js"() {
    init_tslib_es6();
    React175 = __toESM(require_react());
    init_panel2();
    init_esm();
    PanelMainBody = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React175.createElement("div", Object.assign({ className: css(panel_default.panelMainBody, className) }, props), children);
    };
    PanelMainBody.displayName = "PanelMainBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js
var React176, PanelHeader;
var init_PanelHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js"() {
    init_tslib_es6();
    React176 = __toESM(require_react());
    init_panel2();
    init_esm();
    PanelHeader = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React176.createElement("div", Object.assign({ className: css(panel_default.panelHeader, className) }, props), children);
    };
    PanelHeader.displayName = "PanelHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelFooter.js
var React177, PanelFooter;
var init_PanelFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelFooter.js"() {
    init_tslib_es6();
    React177 = __toESM(require_react());
    init_panel2();
    init_esm();
    PanelFooter = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React177.createElement("div", Object.assign({ className: css(panel_default.panelFooter, className) }, props), children);
    };
    PanelFooter.displayName = "PanelFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Panel/index.js
var init_Panel2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Panel/index.js"() {
    init_Panel();
    init_PanelMain();
    init_PanelMainBody();
    init_PanelHeader();
    init_PanelFooter();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/AdvancedSearchMenu.js
var React178, AdvancedSearchMenu;
var init_AdvancedSearchMenu = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SearchInput/AdvancedSearchMenu.js"() {
    React178 = __toESM(require_react());
    init_Button2();
    init_Form2();
    init_TextInput2();
    init_helpers();
    init_Panel2();
    init_esm();
    AdvancedSearchMenu = ({ className, parentRef, parentInputRef, value = "", attributes = [], formAdditionalItems, hasWordsAttrLabel = "Has words", advancedSearchDelimiter, getAttrValueMap, onChange, onSearch, onClear, resetButtonLabel = "Reset", submitSearchButtonLabel = "Search", isSearchMenuOpen, onToggleAdvancedMenu }) => {
      const firstAttrRef = React178.useRef(null);
      const [putFocusBackOnInput, setPutFocusBackOnInput] = React178.useState(false);
      React178.useEffect(() => {
        if (attributes.length > 0 && !advancedSearchDelimiter) {
          console.error("AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop");
        }
      });
      React178.useEffect(() => {
        if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {
          firstAttrRef.current.focus();
          setPutFocusBackOnInput(true);
        } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {
          parentInputRef.current.focus();
        }
      }, [isSearchMenuOpen]);
      React178.useEffect(() => {
        document.addEventListener("mousedown", onDocClick);
        document.addEventListener("touchstart", onDocClick);
        document.addEventListener("keydown", onEscPress);
        return function cleanup() {
          document.removeEventListener("mousedown", onDocClick);
          document.removeEventListener("touchstart", onDocClick);
          document.removeEventListener("keydown", onEscPress);
        };
      });
      const onDocClick = (event) => {
        const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);
        if (isSearchMenuOpen && !clickedWithinSearchInput) {
          onToggleAdvancedMenu(event);
        }
      };
      const onEscPress = (event) => {
        if (isSearchMenuOpen && event.key === KeyTypes.Escape && parentRef && parentRef.current.contains(event.target)) {
          onToggleAdvancedMenu(event);
          if (parentInputRef) {
            parentInputRef.current.focus();
          }
        }
      };
      const onSearchHandler = (event) => {
        event.preventDefault();
        if (onSearch) {
          onSearch(event, value, getAttrValueMap());
        }
        if (isSearchMenuOpen) {
          onToggleAdvancedMenu(event);
        }
      };
      const handleValueChange = (attribute, newValue, event) => {
        const newMap = getAttrValueMap();
        newMap[attribute] = newValue;
        let updatedValue = "";
        Object.entries(newMap).forEach(([k, v]) => {
          if (v.trim() !== "") {
            const quoteWrappedValue = v.includes(" ") ? `'${v.replace(/(^'|'$)/g, "")}'` : v;
            if (k !== "haswords") {
              updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;
            } else {
              updatedValue = `${updatedValue} ${quoteWrappedValue}`;
            }
          }
        });
        if (onChange) {
          onChange(event, updatedValue.replace(/^\s+/g, ""));
        }
      };
      const getValue = (attribute) => {
        const map = getAttrValueMap();
        return map.hasOwnProperty(attribute) ? map[attribute] : "";
      };
      const buildFormGroups = () => {
        const formGroups = [];
        attributes.forEach((attribute, index) => {
          const display = typeof attribute === "string" ? attribute : attribute.display;
          const queryAttr = typeof attribute === "string" ? attribute : attribute.attr;
          if (index === 0) {
            formGroups.push(React178.createElement(
              FormGroup,
              { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },
              React178.createElement(TextInput, { ref: firstAttrRef, type: "text", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (evt, value2) => handleValueChange(queryAttr, value2, evt) })
            ));
          } else {
            formGroups.push(React178.createElement(
              FormGroup,
              { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },
              React178.createElement(TextInput, { type: "text", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (evt, value2) => handleValueChange(queryAttr, value2, evt) })
            ));
          }
        });
        formGroups.push(React178.createElement(GenerateId, { key: "hasWords" }, (randomId) => React178.createElement(
          FormGroup,
          { label: hasWordsAttrLabel, fieldId: randomId },
          React178.createElement(TextInput, { type: "text", id: randomId, value: getValue("haswords"), onChange: (evt, value2) => handleValueChange("haswords", value2, evt) })
        )));
        return formGroups;
      };
      return isSearchMenuOpen ? React178.createElement(
        Panel,
        { variant: "raised", className: css(className) },
        React178.createElement(
          PanelMain,
          null,
          React178.createElement(
            PanelMainBody,
            null,
            React178.createElement(
              Form,
              null,
              buildFormGroups(),
              formAdditionalItems ? formAdditionalItems : null,
              React178.createElement(
                ActionGroup,
                null,
                React178.createElement(Button, { variant: "primary", type: "submit", onClick: onSearchHandler, isDisabled: !value }, submitSearchButtonLabel),
                !!onClear && React178.createElement(Button, { variant: "link", type: "reset", onClick: onClear }, resetButtonLabel)
              )
            )
          )
        )
      ) : null;
    };
    AdvancedSearchMenu.displayName = "SearchInput";
  }
});

// node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.css
var init_text_input_group = __esm({
  "node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.mjs
var text_input_group_default;
var init_text_input_group2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.mjs"() {
    init_text_input_group();
    text_input_group_default = {
      "button": "pf-v5-c-button",
      "chipGroupMain": "pf-v5-c-chip-group__main",
      "modifiers": {
        "disabled": "pf-m-disabled",
        "plain": "pf-m-plain",
        "icon": "pf-m-icon",
        "hint": "pf-m-hint"
      },
      "textInputGroup": "pf-v5-c-text-input-group",
      "textInputGroupGroup": "pf-v5-c-text-input-group__group",
      "textInputGroupIcon": "pf-v5-c-text-input-group__icon",
      "textInputGroupMain": "pf-v5-c-text-input-group__main",
      "textInputGroupText": "pf-v5-c-text-input-group__text",
      "textInputGroupTextInput": "pf-v5-c-text-input-group__text-input",
      "textInputGroupUtilities": "pf-v5-c-text-input-group__utilities",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroup.js
var React179, TextInputGroupContext, TextInputGroup;
var init_TextInputGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroup.js"() {
    init_tslib_es6();
    React179 = __toESM(require_react());
    init_text_input_group2();
    init_esm();
    TextInputGroupContext = React179.createContext({
      isDisabled: false
    });
    TextInputGroup = (_a) => {
      var { children, className, isDisabled, isPlain, innerRef } = _a, props = __rest(_a, ["children", "className", "isDisabled", "isPlain", "innerRef"]);
      const ref = React179.useRef(null);
      const textInputGroupRef = innerRef || ref;
      return React179.createElement(
        TextInputGroupContext.Provider,
        { value: { isDisabled } },
        React179.createElement("div", Object.assign({ ref: textInputGroupRef, className: css(text_input_group_default.textInputGroup, isDisabled && text_input_group_default.modifiers.disabled, isPlain && text_input_group_default.modifiers.plain, className) }, props), children)
      );
    };
    TextInputGroup.displayName = "TextInputGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupMain.js
var React180, TextInputGroupMainBase, TextInputGroupMain;
var init_TextInputGroupMain = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupMain.js"() {
    init_tslib_es6();
    React180 = __toESM(require_react());
    init_text_input_group2();
    init_esm();
    init_TextInputGroup();
    TextInputGroupMainBase = (_a) => {
      var { children, className, icon, type = "text", hint, onChange = () => void 0, onFocus, onBlur, "aria-label": ariaLabel = "Type to filter", value: inputValue, placeholder: inputPlaceHolder, innerRef, name, "aria-activedescendant": ariaActivedescendant, role, isExpanded, "aria-controls": ariaControls, inputId } = _a, props = __rest(_a, ["children", "className", "icon", "type", "hint", "onChange", "onFocus", "onBlur", "aria-label", "value", "placeholder", "innerRef", "name", "aria-activedescendant", "role", "isExpanded", "aria-controls", "inputId"]);
      const { isDisabled } = React180.useContext(TextInputGroupContext);
      const ref = React180.useRef(null);
      const textInputGroupInputInputRef = innerRef || ref;
      const handleChange = (event) => {
        onChange(event, event.currentTarget.value);
      };
      return React180.createElement(
        "div",
        Object.assign({ className: css(text_input_group_default.textInputGroupMain, icon && text_input_group_default.modifiers.icon, className) }, props),
        children,
        React180.createElement(
          "span",
          { className: css(text_input_group_default.textInputGroupText) },
          hint && React180.createElement("input", { className: css(text_input_group_default.textInputGroupTextInput, text_input_group_default.modifiers.hint), type: "text", disabled: true, "aria-hidden": "true", value: hint, id: inputId }),
          icon && React180.createElement("span", { className: css(text_input_group_default.textInputGroupIcon) }, icon),
          React180.createElement("input", Object.assign({ ref: textInputGroupInputInputRef, type, className: css(text_input_group_default.textInputGroupTextInput), "aria-label": ariaLabel, disabled: isDisabled, onChange: handleChange, onFocus, onBlur, value: inputValue || "", placeholder: inputPlaceHolder, name, "aria-activedescendant": ariaActivedescendant, id: inputId }, role && { role }, isExpanded !== void 0 && { "aria-expanded": isExpanded }, ariaControls && { "aria-controls": ariaControls }))
        )
      );
    };
    TextInputGroupMain = React180.forwardRef((props, ref) => React180.createElement(TextInputGroupMainBase, Object.assign({ innerRef: ref }, props)));
    TextInputGroupMain.displayName = "TextInputGroupMain";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupUtilities.js
var React181, TextInputGroupUtilities;
var init_TextInputGroupUtilities = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupUtilities.js"() {
    init_tslib_es6();
    React181 = __toESM(require_react());
    init_text_input_group2();
    init_esm();
    TextInputGroupUtilities = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React181.createElement("div", Object.assign({ className: css(text_input_group_default.textInputGroupUtilities, className) }, props), children);
    };
    TextInputGroupUtilities.displayName = "TextInputGroupUtilities";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/index.js
var init_TextInputGroup2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/index.js"() {
    init_TextInputGroup();
    init_TextInputGroupMain();
    init_TextInputGroupUtilities();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/SearchInput.js
var React182, SearchInputBase, SearchInput;
var init_SearchInput = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SearchInput/SearchInput.js"() {
    init_tslib_es6();
    React182 = __toESM(require_react());
    init_esm();
    init_Button2();
    init_Badge2();
    init_Icon2();
    init_angle_down_icon();
    init_angle_up_icon();
    init_times_icon();
    init_search_icon();
    init_caret_down_icon();
    init_arrow_right_icon();
    init_AdvancedSearchMenu();
    init_TextInputGroup2();
    init_InputGroup2();
    init_helpers();
    init_text_input_group2();
    SearchInputBase = (_a) => {
      var { className, searchInputId, value = "", attributes = [], formAdditionalItems, hasWordsAttrLabel = "Has words", advancedSearchDelimiter, placeholder, hint, onChange, onSearch, onClear, onToggleAdvancedSearch, isAdvancedSearchOpen, resultsCount, onNextClick, onPreviousClick, innerRef, expandableInput, "aria-label": ariaLabel = "Search input", resetButtonLabel = "Reset", openMenuButtonAriaLabel = "Open advanced search", previousNavigationButtonAriaLabel = "Previous", isPreviousNavigationButtonDisabled = false, isNextNavigationButtonDisabled = false, nextNavigationButtonAriaLabel = "Next", submitSearchButtonLabel = "Search", isDisabled = false, appendTo, zIndex = 9999, name, areUtilitiesDisplayed } = _a, props = __rest(_a, ["className", "searchInputId", "value", "attributes", "formAdditionalItems", "hasWordsAttrLabel", "advancedSearchDelimiter", "placeholder", "hint", "onChange", "onSearch", "onClear", "onToggleAdvancedSearch", "isAdvancedSearchOpen", "resultsCount", "onNextClick", "onPreviousClick", "innerRef", "expandableInput", "aria-label", "resetButtonLabel", "openMenuButtonAriaLabel", "previousNavigationButtonAriaLabel", "isPreviousNavigationButtonDisabled", "isNextNavigationButtonDisabled", "nextNavigationButtonAriaLabel", "submitSearchButtonLabel", "isDisabled", "appendTo", "zIndex", "name", "areUtilitiesDisplayed"]);
      const [isSearchMenuOpen, setIsSearchMenuOpen] = React182.useState(false);
      const [searchValue, setSearchValue] = React182.useState(value);
      const searchInputRef = React182.useRef(null);
      const ref = React182.useRef(null);
      const searchInputInputRef = innerRef || ref;
      const searchInputExpandableToggleRef = React182.useRef(null);
      const triggerRef = React182.useRef(null);
      const popperRef = React182.useRef(null);
      const [focusAfterExpandChange, setFocusAfterExpandChange] = React182.useState(false);
      const { isExpanded, onToggleExpand, toggleAriaLabel } = expandableInput || {};
      React182.useEffect(() => {
        var _a2, _b;
        if (!focusAfterExpandChange) {
          return;
        } else if (isExpanded) {
          (_a2 = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        } else {
          (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
        setFocusAfterExpandChange(false);
      }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);
      React182.useEffect(() => {
        setSearchValue(value);
      }, [value]);
      React182.useEffect(() => {
        if (attributes.length > 0 && !advancedSearchDelimiter) {
          console.error("An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop");
        }
      });
      React182.useEffect(() => {
        setIsSearchMenuOpen(isAdvancedSearchOpen);
      }, [isAdvancedSearchOpen]);
      const onChangeHandler = (event, value2) => {
        if (onChange) {
          onChange(event, value2);
        }
        setSearchValue(value2);
      };
      const onToggle = (e) => {
        const isOpen = !isSearchMenuOpen;
        setIsSearchMenuOpen(isOpen);
        if (onToggleAdvancedSearch) {
          onToggleAdvancedSearch(e, isOpen);
        }
      };
      const onSearchHandler = (event) => {
        event.preventDefault();
        if (onSearch) {
          onSearch(event, value, getAttrValueMap());
        }
        setIsSearchMenuOpen(false);
      };
      const splitStringExceptInQuotes = (str) => {
        let quoteType;
        return str.match(/\\?.|^$/g).reduce((p, c) => {
          if (c === "'" || c === '"') {
            if (!quoteType) {
              quoteType = c;
            }
            if (c === quoteType) {
              p.quote = !p.quote;
            }
          } else if (!p.quote && c === " ") {
            p.a.push("");
          } else {
            p.a[p.a.length - 1] += c.replace(/\\(.)/, "$1");
          }
          return p;
        }, { a: [""] }).a;
      };
      const getAttrValueMap = () => {
        const attrValue = {};
        const pairs = splitStringExceptInQuotes(searchValue);
        pairs.map((pair) => {
          const splitPair = pair.split(advancedSearchDelimiter);
          if (splitPair.length === 2) {
            attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, "");
          } else if (splitPair.length === 1) {
            attrValue.haswords = attrValue.hasOwnProperty("haswords") ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];
          }
        });
        return attrValue;
      };
      const onEnter = (event) => {
        if (event.key === "Enter") {
          onSearchHandler(event);
        }
      };
      const onClearInput = (e) => {
        if (onClear) {
          onClear(e);
        }
        if (searchInputInputRef && searchInputInputRef.current) {
          searchInputInputRef.current.focus();
        }
      };
      const onExpandHandler = (event) => {
        setSearchValue("");
        onToggleExpand(event, isExpanded);
        setFocusAfterExpandChange(true);
      };
      const renderUtilities = value && (resultsCount || !!onNextClick && !!onPreviousClick || !!onClear && !expandableInput);
      const buildTextInputGroup = (_a2 = {}) => {
        var searchInputProps2 = __rest(_a2, []);
        return React182.createElement(
          TextInputGroup,
          Object.assign({ isDisabled }, searchInputProps2),
          React182.createElement(TextInputGroupMain, { hint, icon: React182.createElement(search_icon_default, null), innerRef: searchInputInputRef, value: searchValue, placeholder, "aria-label": ariaLabel, onKeyDown: onEnter, onChange: onChangeHandler, name, inputId: searchInputId }),
          (renderUtilities || areUtilitiesDisplayed) && React182.createElement(
            TextInputGroupUtilities,
            null,
            resultsCount && React182.createElement(Badge, { isRead: true }, resultsCount),
            !!onNextClick && !!onPreviousClick && React182.createElement(
              "div",
              { className: text_input_group_default.textInputGroupGroup },
              React182.createElement(
                Button,
                { variant: ButtonVariant.plain, "aria-label": previousNavigationButtonAriaLabel, isDisabled: isDisabled || isPreviousNavigationButtonDisabled, onClick: onPreviousClick },
                React182.createElement(angle_up_icon_default, null)
              ),
              React182.createElement(
                Button,
                { variant: ButtonVariant.plain, "aria-label": nextNavigationButtonAriaLabel, isDisabled: isDisabled || isNextNavigationButtonDisabled, onClick: onNextClick },
                React182.createElement(angle_down_icon_default, null)
              )
            ),
            !!onClear && !expandableInput && React182.createElement(
              Button,
              { variant: ButtonVariant.plain, isDisabled, "aria-label": resetButtonLabel, onClick: onClearInput },
              React182.createElement(times_icon_default, null)
            )
          )
        );
      };
      const expandableToggle = React182.createElement(Button, { variant: ButtonVariant.plain, "aria-label": toggleAriaLabel, "aria-expanded": isExpanded, icon: isExpanded ? React182.createElement(times_icon_default, null) : React182.createElement(search_icon_default, null), onClick: onExpandHandler, ref: searchInputExpandableToggleRef });
      const buildExpandableSearchInput = (_a2 = {}) => {
        var searchInputProps2 = __rest(_a2, []);
        return React182.createElement(
          InputGroup,
          Object.assign({}, searchInputProps2),
          React182.createElement(
            InputGroupItem,
            { isFill: true },
            buildTextInputGroup(),
            " "
          ),
          React182.createElement(InputGroupItem, { isPlain: true }, expandableToggle)
        );
      };
      const buildSearchTextInputGroup = (_a2 = {}) => {
        var searchInputProps2 = __rest(_a2, []);
        if (expandableInput) {
          return buildExpandableSearchInput(Object.assign({}, searchInputProps2));
        }
        return buildTextInputGroup(Object.assign({}, searchInputProps2));
      };
      const buildSearchTextInputGroupWithExtraButtons = (_a2 = {}) => {
        var searchInputProps2 = __rest(_a2, []);
        return React182.createElement(
          InputGroup,
          Object.assign({ ref: triggerRef }, searchInputProps2),
          React182.createElement(InputGroupItem, { isFill: true }, buildTextInputGroup()),
          (attributes.length > 0 || onToggleAdvancedSearch) && React182.createElement(
            InputGroupItem,
            { isPlain: true },
            React182.createElement(
              Button,
              { className: isSearchMenuOpen && "pf-m-expanded", variant: ButtonVariant.control, "aria-label": openMenuButtonAriaLabel, onClick: onToggle, isDisabled, "aria-expanded": isSearchMenuOpen },
              React182.createElement(caret_down_icon_default, null)
            )
          ),
          !!onSearch && React182.createElement(
            InputGroupItem,
            null,
            React182.createElement(
              Button,
              { type: "submit", variant: ButtonVariant.control, "aria-label": submitSearchButtonLabel, onClick: onSearchHandler, isDisabled },
              React182.createElement(
                Icon,
                { shouldMirrorRTL: true },
                React182.createElement(arrow_right_icon_default, null)
              )
            )
          ),
          expandableInput && React182.createElement(InputGroupItem, null, expandableToggle)
        );
      };
      const searchInputProps = Object.assign(Object.assign({}, props), { className: className && css(className), innerRef: searchInputRef });
      if (!!expandableInput && !isExpanded) {
        return React182.createElement(
          InputGroup,
          Object.assign({}, searchInputProps),
          React182.createElement(InputGroupItem, null, expandableToggle)
        );
      }
      if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {
        if (attributes.length > 0) {
          const AdvancedSearch = React182.createElement(
            "div",
            { ref: popperRef },
            React182.createElement(AdvancedSearchMenu, { value, parentRef: searchInputRef, parentInputRef: searchInputInputRef, onSearch, onClear, onChange, onToggleAdvancedMenu: onToggle, resetButtonLabel, submitSearchButtonLabel, attributes, formAdditionalItems, hasWordsAttrLabel, advancedSearchDelimiter, getAttrValueMap, isSearchMenuOpen })
          );
          const AdvancedSearchWithPopper = React182.createElement(
            "div",
            Object.assign({ className: css(className), ref: searchInputRef }, props),
            React182.createElement(Popper, { trigger: buildSearchTextInputGroupWithExtraButtons(), triggerRef, popper: AdvancedSearch, popperRef, isVisible: isSearchMenuOpen, enableFlip: true, appendTo: () => appendTo || searchInputRef.current, zIndex })
          );
          const AdvancedSearchInline = React182.createElement(
            "div",
            Object.assign({ className: css(className), ref: searchInputRef }, props),
            buildSearchTextInputGroupWithExtraButtons(),
            AdvancedSearch
          );
          return appendTo !== "inline" ? AdvancedSearchWithPopper : AdvancedSearchInline;
        }
        return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));
      }
      return buildSearchTextInputGroup(searchInputProps);
    };
    SearchInputBase.displayName = "SearchInputBase";
    SearchInput = React182.forwardRef((props, ref) => React182.createElement(SearchInputBase, Object.assign({}, props, { innerRef: ref })));
    SearchInput.displayName = "SearchInput";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/index.js
var init_SearchInput2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SearchInput/index.js"() {
    init_SearchInput();
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_dual_list_selector__menu_MinHeight.js
var c_dual_list_selector__menu_MinHeight, c_dual_list_selector_menu_MinHeight_default;
var init_c_dual_list_selector_menu_MinHeight = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_dual_list_selector__menu_MinHeight.js"() {
    c_dual_list_selector__menu_MinHeight = {
      "name": "--pf-v5-c-dual-list-selector__menu--MinHeight",
      "value": "12.5rem",
      "var": "var(--pf-v5-c-dual-list-selector__menu--MinHeight)"
    };
    c_dual_list_selector_menu_MinHeight_default = c_dual_list_selector__menu_MinHeight;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorPane.js
var React183, DualListSelectorPane;
var init_DualListSelectorPane = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorPane.js"() {
    init_tslib_es6();
    React183 = __toESM(require_react());
    init_dual_list_selector2();
    init_esm();
    init_DualListSelectorTree();
    init_helpers();
    init_DualListSelectorListWrapper();
    init_DualListSelectorContext();
    init_DualListSelectorList();
    init_SearchInput2();
    init_c_dual_list_selector_menu_MinHeight();
    DualListSelectorPane = (_a) => {
      var { isChosen = false, className = "", status = "", actions, searchInput, children, onOptionSelect, onOptionCheck, title = "", options = [], selectedOptions = [], isSearchable = false, searchInputAriaLabel = "", onFilterUpdate, onSearchInputChanged, onSearchInputClear, filterOption, id = getUniqueId("dual-list-selector-pane"), isDisabled = false, listMinHeight } = _a, props = __rest(_a, ["isChosen", "className", "status", "actions", "searchInput", "children", "onOptionSelect", "onOptionCheck", "title", "options", "selectedOptions", "isSearchable", "searchInputAriaLabel", "onFilterUpdate", "onSearchInputChanged", "onSearchInputClear", "filterOption", "id", "isDisabled", "listMinHeight"]);
      const [input, setInput] = React183.useState("");
      const { isTree } = React183.useContext(DualListSelectorContext);
      const onChange = (e, newValue) => {
        let filtered;
        if (isTree) {
          filtered = options.map((opt) => Object.assign({}, opt)).filter((item) => filterInput(item, newValue));
        } else {
          filtered = options.filter((option) => {
            if (displayOption(option)) {
              return option;
            }
          });
        }
        onFilterUpdate(filtered, isChosen ? "chosen" : "available", newValue === "");
        if (onSearchInputChanged) {
          onSearchInputChanged(e, newValue);
        }
        setInput(newValue);
      };
      const filterInput = (item, input2) => {
        if (filterOption) {
          return filterOption(item, input2);
        } else {
          if (item.text.toLowerCase().includes(input2.toLowerCase()) || input2 === "") {
            return true;
          }
        }
        if (item.children) {
          return (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child) => filterInput(child, input2))).length > 0;
        }
      };
      const displayOption = (option) => {
        if (filterOption) {
          return filterOption(option, input);
        } else {
          return option.toString().toLowerCase().includes(input.toLowerCase());
        }
      };
      return React183.createElement(
        "div",
        Object.assign({ className: css(dual_list_selector_default.dualListSelectorPane, isChosen ? dual_list_selector_default.modifiers.chosen : "pf-m-available", className) }, props),
        title && React183.createElement(
          "div",
          { className: css(dual_list_selector_default.dualListSelectorHeader) },
          React183.createElement(
            "div",
            { className: `${dual_list_selector_default.dualListSelector}__title` },
            React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorTitleText) }, title)
          )
        ),
        (actions || searchInput || isSearchable) && React183.createElement(
          "div",
          { className: css(dual_list_selector_default.dualListSelectorTools) },
          (isSearchable || searchInput) && React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorToolsFilter) }, searchInput ? searchInput : React183.createElement(SearchInput, { onChange: isDisabled ? void 0 : onChange, onClear: onSearchInputClear ? onSearchInputClear : (e) => onChange(e, ""), isDisabled, "aria-label": searchInputAriaLabel })),
          actions && React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorToolsActions) }, actions)
        ),
        status && React183.createElement(
          "div",
          { className: css(dual_list_selector_default.dualListSelectorStatus) },
          React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorStatusText), id: `${id}-status` }, status)
        ),
        React183.createElement(
          DualListSelectorPaneContext.Provider,
          { value: { isChosen } },
          !isTree && React183.createElement(DualListSelectorListWrapper, Object.assign({ "aria-labelledby": `${id}-status`, options, selectedOptions, onOptionSelect: (e, index, id2) => onOptionSelect(e, index, isChosen, id2), displayOption, id: `${id}-list`, isDisabled }, listMinHeight && {
            style: { [c_dual_list_selector_menu_MinHeight_default.name]: listMinHeight }
          }), children),
          isTree && React183.createElement(DualListSelectorListWrapper, Object.assign({ "aria-labelledby": `${id}-status`, id: `${id}-list` }, listMinHeight && {
            style: { [c_dual_list_selector_menu_MinHeight_default.name]: listMinHeight }
          }), options.length > 0 ? React183.createElement(
            DualListSelectorList,
            null,
            React183.createElement(DualListSelectorTree, { data: isSearchable ? options.map((opt) => Object.assign({}, opt)).filter((item) => filterInput(item, input)) : options, onOptionCheck, id: `${id}-tree`, isDisabled })
          ) : children)
        )
      );
    };
    DualListSelectorPane.displayName = "DualListSelectorPane";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControlsWrapper.js
var React184, DualListSelectorControlsWrapperBase, DualListSelectorControlsWrapper;
var init_DualListSelectorControlsWrapper = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControlsWrapper.js"() {
    init_tslib_es6();
    React184 = __toESM(require_react());
    init_dual_list_selector2();
    init_esm();
    init_helpers();
    DualListSelectorControlsWrapperBase = (_a) => {
      var { innerRef, children = null, className, "aria-label": ariaLabel = "Controls for moving options between lists" } = _a, props = __rest(_a, ["innerRef", "children", "className", "aria-label"]);
      const ref = React184.useRef(null);
      const wrapperRef = innerRef || ref;
      const handleKeys = (event) => {
        if (!wrapperRef.current || wrapperRef.current !== event.target.closest(`.${dual_list_selector_default.dualListSelectorControls}`) && !Array.from(wrapperRef.current.getElementsByClassName(dual_list_selector_default.dualListSelectorControls)).includes(event.target.closest(`.${dual_list_selector_default.dualListSelectorControls}`))) {
          return;
        }
        event.stopImmediatePropagation();
        const controls = Array.from(wrapperRef.current.getElementsByTagName("BUTTON")).filter((el) => !el.classList.contains("pf-m-disabled"));
        const activeElement = document.activeElement;
        handleArrows(event, controls, (element) => activeElement.contains(element), (element) => element, void 0, void 0, true, false);
      };
      React184.useEffect(() => {
        window.addEventListener("keydown", handleKeys);
        return () => {
          window.removeEventListener("keydown", handleKeys);
        };
      }, [wrapperRef.current]);
      return React184.createElement("div", Object.assign({ className: css(dual_list_selector_default.dualListSelectorControls, className), tabIndex: 0, ref: wrapperRef, "aria-label": ariaLabel }, props), children);
    };
    DualListSelectorControlsWrapperBase.displayName = "DualListSelectorControlsWrapperBase";
    DualListSelectorControlsWrapper = React184.forwardRef((props, ref) => React184.createElement(DualListSelectorControlsWrapperBase, Object.assign({ innerRef: ref, role: "group" }, props)));
    DualListSelectorControlsWrapper.displayName = "DualListSelectorControlsWrapper";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControl.js
var React185, DualListSelectorControlBase, DualListSelectorControl;
var init_DualListSelectorControl = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControl.js"() {
    init_tslib_es6();
    React185 = __toESM(require_react());
    init_esm();
    init_Button2();
    init_Tooltip2();
    init_dual_list_selector2();
    DualListSelectorControlBase = (_a) => {
      var { innerRef, children = null, className, "aria-label": ariaLabel, isDisabled = true, onClick = () => {
      }, tooltipContent, tooltipProps = {} } = _a, props = __rest(_a, ["innerRef", "children", "className", "aria-label", "isDisabled", "onClick", "tooltipContent", "tooltipProps"]);
      const privateRef = React185.useRef(null);
      const ref = innerRef || privateRef;
      return React185.createElement(
        "div",
        Object.assign({ className: css(dual_list_selector_default.dualListSelectorControlsItem, className) }, props),
        React185.createElement(Button, { isDisabled, "aria-disabled": isDisabled, variant: ButtonVariant.plain, onClick, "aria-label": ariaLabel, tabIndex: -1, ref }, children),
        tooltipContent && React185.createElement(Tooltip, Object.assign({ content: tooltipContent, position: "left", triggerRef: ref }, tooltipProps))
      );
    };
    DualListSelectorControlBase.displayName = "DualListSelectorControlBase";
    DualListSelectorControl = React185.forwardRef((props, ref) => React185.createElement(DualListSelectorControlBase, Object.assign({ innerRef: ref }, props)));
    DualListSelectorControl.displayName = "DualListSelectorControl";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelector.js
var React186, DualListSelector;
var init_DualListSelector = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelector.js"() {
    init_tslib_es6();
    React186 = __toESM(require_react());
    init_dual_list_selector2();
    init_esm();
    init_angle_double_left_icon();
    init_angle_left_icon();
    init_angle_double_right_icon();
    init_angle_right_icon();
    init_DualListSelectorPane();
    init_helpers();
    init_treeUtils();
    init_DualListSelectorControlsWrapper();
    init_DualListSelectorControl();
    init_DualListSelectorContext();
    DualListSelector = class extends React186.Component {
      constructor(props) {
        super(props);
        this.addAllButtonRef = React186.createRef();
        this.addSelectedButtonRef = React186.createRef();
        this.removeSelectedButtonRef = React186.createRef();
        this.removeAllButtonRef = React186.createRef();
        this.replacer = (key, value) => {
          if (key[0] === "_") {
            return void 0;
          }
          return value;
        };
        this.onFilterUpdate = (newFilteredOptions, paneType, isSearchReset) => {
          const { isTree } = this.props;
          if (paneType === "available") {
            if (isSearchReset) {
              this.setState({
                availableFilteredOptions: null,
                availableTreeFilteredOptions: null
              });
              return;
            }
            if (isTree) {
              this.setState({
                availableTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)
              });
            } else {
              this.setState({
                availableFilteredOptions: newFilteredOptions
              });
            }
          } else if (paneType === "chosen") {
            if (isSearchReset) {
              this.setState({
                chosenFilteredOptions: null,
                chosenTreeFilteredOptions: null
              });
              return;
            }
            if (isTree) {
              this.setState({
                chosenTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)
              });
            } else {
              this.setState({
                chosenFilteredOptions: newFilteredOptions
              });
            }
          }
        };
        this.addAllVisible = (event) => {
          this.setState((prevState) => {
            const itemsToRemove = [];
            const newAvailable = [];
            const movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;
            prevState.availableOptions.forEach((value) => {
              if (movedOptions.indexOf(value) !== -1) {
                itemsToRemove.push(value);
              } else {
                newAvailable.push(value);
              }
            });
            const newChosen = [...prevState.chosenOptions, ...itemsToRemove];
            this.props.addAll && this.props.addAll(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              chosenOptions: newChosen,
              chosenFilteredOptions: newChosen,
              availableOptions: newAvailable,
              availableFilteredOptions: newAvailable,
              chosenOptionsSelected: [],
              availableOptionsSelected: []
            };
          });
        };
        this.addAllTreeVisible = (event) => {
          this.setState((prevState) => {
            const movedOptions = prevState.availableTreeFilteredOptions || flattenTreeWithFolders(prevState.availableOptions);
            const newAvailable = prevState.availableOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, movedOptions));
            const currChosen = flattenTree(prevState.chosenOptions);
            const nextChosenOptions = currChosen.concat(movedOptions);
            const newChosen = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextChosenOptions));
            this.props.addAll && this.props.addAll(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              chosenOptions: newChosen,
              chosenFilteredOptions: newChosen,
              availableOptions: newAvailable,
              availableFilteredOptions: newAvailable,
              availableTreeOptionsChecked: [],
              chosenTreeOptionsChecked: []
            };
          });
        };
        this.addSelected = (event) => {
          this.setState((prevState) => {
            const itemsToRemove = [];
            const newAvailable = [];
            prevState.availableOptions.forEach((value, index) => {
              if (prevState.availableOptionsSelected.indexOf(index) !== -1) {
                itemsToRemove.push(value);
              } else {
                newAvailable.push(value);
              }
            });
            const newChosen = [...prevState.chosenOptions, ...itemsToRemove];
            this.props.addSelected && this.props.addSelected(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              chosenOptionsSelected: [],
              availableOptionsSelected: [],
              chosenOptions: newChosen,
              chosenFilteredOptions: newChosen,
              availableOptions: newAvailable,
              availableFilteredOptions: newAvailable
            };
          });
        };
        this.addTreeSelected = (event) => {
          this.setState((prevState) => {
            const newAvailable = prevState.availableOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, prevState.availableTreeOptionsChecked));
            const currChosen = flattenTree(prevState.chosenOptions);
            const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);
            const newChosen = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextChosenOptions));
            this.props.addSelected && this.props.addSelected(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              availableTreeOptionsChecked: [],
              chosenTreeOptionsChecked: [],
              availableOptions: newAvailable,
              chosenOptions: newChosen
            };
          });
        };
        this.removeAllVisible = (event) => {
          this.setState((prevState) => {
            const itemsToRemove = [];
            const newChosen = [];
            const movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;
            prevState.chosenOptions.forEach((value) => {
              if (movedOptions.indexOf(value) !== -1) {
                itemsToRemove.push(value);
              } else {
                newChosen.push(value);
              }
            });
            const newAvailable = [...prevState.availableOptions, ...itemsToRemove];
            this.props.removeAll && this.props.removeAll(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              chosenOptions: newChosen,
              chosenFilteredOptions: newChosen,
              availableOptions: newAvailable,
              availableFilteredOptions: newAvailable,
              chosenOptionsSelected: [],
              availableOptionsSelected: []
            };
          });
        };
        this.removeAllTreeVisible = (event) => {
          this.setState((prevState) => {
            const movedOptions = prevState.chosenTreeFilteredOptions || flattenTreeWithFolders(prevState.chosenOptions);
            const newChosen = prevState.chosenOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, movedOptions));
            const currAvailable = flattenTree(prevState.availableOptions);
            const nextAvailableOptions = currAvailable.concat(movedOptions);
            const newAvailable = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextAvailableOptions));
            this.props.removeAll && this.props.removeAll(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              chosenOptions: newChosen,
              availableOptions: newAvailable,
              availableTreeOptionsChecked: [],
              chosenTreeOptionsChecked: []
            };
          });
        };
        this.removeSelected = (event) => {
          this.setState((prevState) => {
            const itemsToRemove = [];
            const newChosen = [];
            prevState.chosenOptions.forEach((value, index) => {
              if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {
                itemsToRemove.push(value);
              } else {
                newChosen.push(value);
              }
            });
            const newAvailable = [...prevState.availableOptions, ...itemsToRemove];
            this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              chosenOptionsSelected: [],
              availableOptionsSelected: [],
              chosenOptions: newChosen,
              chosenFilteredOptions: newChosen,
              availableOptions: newAvailable,
              availableFilteredOptions: newAvailable
            };
          });
        };
        this.removeTreeSelected = (event) => {
          this.setState((prevState) => {
            const newChosen = prevState.chosenOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, prevState.chosenTreeOptionsChecked));
            const currAvailable = flattenTree(prevState.availableOptions);
            const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);
            const newAvailable = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextAvailableOptions));
            this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);
            this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
            return {
              availableTreeOptionsChecked: [],
              chosenTreeOptionsChecked: [],
              availableOptions: newAvailable,
              chosenOptions: newChosen
            };
          });
        };
        this.onOptionSelect = (e, index, isChosen, id, itemData, parentData) => {
          this.setState((prevState) => {
            const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;
            let updatedArray = null;
            if (originalArray.indexOf(index) !== -1) {
              updatedArray = originalArray.filter((value) => value !== index);
            } else {
              updatedArray = [...originalArray, index];
            }
            return {
              chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,
              availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray
            };
          });
          this.props.onOptionSelect && this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);
        };
        this.isChecked = (treeItem, isChosen) => isChosen ? this.state.chosenTreeOptionsChecked.includes(treeItem.id) : this.state.availableTreeOptionsChecked.includes(treeItem.id);
        this.areAllDescendantsChecked = (treeItem, isChosen) => treeItem.children ? treeItem.children.every((child) => this.areAllDescendantsChecked(child, isChosen)) : this.isChecked(treeItem, isChosen);
        this.areSomeDescendantsChecked = (treeItem, isChosen) => treeItem.children ? treeItem.children.some((child) => this.areSomeDescendantsChecked(child, isChosen)) : this.isChecked(treeItem, isChosen);
        this.mapChecked = (item, isChosen) => {
          const hasCheck = this.areAllDescendantsChecked(item, isChosen);
          item.isChecked = false;
          if (hasCheck) {
            item.isChecked = true;
          } else {
            const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);
            if (hasPartialCheck) {
              item.isChecked = null;
            }
          }
          if (item.children) {
            return Object.assign(Object.assign({}, item), { children: item.children.map((child) => this.mapChecked(child, isChosen)) });
          }
          return item;
        };
        this.onTreeOptionCheck = (evt, isChecked, itemData, isChosen) => {
          const { availableOptions, availableTreeFilteredOptions, chosenOptions, chosenTreeFilteredOptions } = this.state;
          let panelOptions;
          if (isChosen) {
            if (chosenTreeFilteredOptions) {
              panelOptions = chosenOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, chosenTreeFilteredOptions));
            } else {
              panelOptions = chosenOptions;
            }
          } else {
            if (availableTreeFilteredOptions) {
              panelOptions = availableOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, availableTreeFilteredOptions));
            } else {
              panelOptions = availableOptions;
            }
          }
          const checkedOptionTree = panelOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItems(item, [itemData.id]));
          const flatTree = flattenTreeWithFolders(checkedOptionTree);
          const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;
          let updatedChecked = [];
          if (isChecked) {
            updatedChecked = prevChecked.concat(flatTree.filter((id) => !prevChecked.includes(id)));
          } else {
            updatedChecked = prevChecked.filter((id) => !flatTree.includes(id));
          }
          this.setState((prevState) => ({
            availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,
            chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked
          }), () => {
            this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);
          });
        };
        this.state = {
          availableOptions: [...this.props.availableOptions],
          availableOptionsSelected: [],
          availableFilteredOptions: null,
          availableTreeFilteredOptions: null,
          chosenOptions: [...this.props.chosenOptions],
          chosenOptionsSelected: [],
          chosenFilteredOptions: null,
          chosenTreeFilteredOptions: null,
          availableTreeOptionsChecked: [],
          chosenTreeOptionsChecked: []
        };
      }
      // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs
      createMergedCopy() {
        const copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));
        const copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));
        return this.props.isTree ? Object.values(copyOfAvailable.concat(copyOfChosen).reduce((mapObj, item) => {
          const key = item.id;
          if (mapObj[key]) {
            mapObj[key].children.push(...item.children);
          } else {
            mapObj[key] = Object.assign({}, item);
          }
          return mapObj;
        }, {})) : null;
      }
      componentDidUpdate() {
        if (JSON.stringify(this.props.availableOptions, this.replacer) !== JSON.stringify(this.state.availableOptions, this.replacer) || JSON.stringify(this.props.chosenOptions, this.replacer) !== JSON.stringify(this.state.chosenOptions, this.replacer)) {
          this.setState({
            availableOptions: [...this.props.availableOptions],
            chosenOptions: [...this.props.chosenOptions]
          });
        }
      }
      render() {
        const _a = this.props, {
          availableOptionsTitle,
          availableOptionsActions,
          availableOptionsSearchAriaLabel,
          className,
          children,
          chosenOptionsTitle,
          chosenOptionsActions,
          chosenOptionsSearchAriaLabel,
          filterOption,
          isSearchable,
          chosenOptionsStatus,
          availableOptionsStatus,
          controlsAriaLabel,
          addAllAriaLabel,
          addSelectedAriaLabel,
          removeSelectedAriaLabel,
          removeAllAriaLabel,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          availableOptions: consumerPassedAvailableOptions,
          chosenOptions: consumerPassedChosenOptions,
          removeSelected,
          addAll,
          removeAll,
          addSelected,
          onListChange,
          onAvailableOptionsSearchInputChanged,
          onChosenOptionsSearchInputChanged,
          onOptionSelect,
          onOptionCheck,
          id,
          isTree,
          isDisabled,
          addAllTooltip,
          addAllTooltipProps,
          addSelectedTooltip,
          addSelectedTooltipProps,
          removeAllTooltip,
          removeAllTooltipProps,
          removeSelectedTooltip,
          removeSelectedTooltipProps
        } = _a, props = __rest(_a, ["availableOptionsTitle", "availableOptionsActions", "availableOptionsSearchAriaLabel", "className", "children", "chosenOptionsTitle", "chosenOptionsActions", "chosenOptionsSearchAriaLabel", "filterOption", "isSearchable", "chosenOptionsStatus", "availableOptionsStatus", "controlsAriaLabel", "addAllAriaLabel", "addSelectedAriaLabel", "removeSelectedAriaLabel", "removeAllAriaLabel", "availableOptions", "chosenOptions", "removeSelected", "addAll", "removeAll", "addSelected", "onListChange", "onAvailableOptionsSearchInputChanged", "onChosenOptionsSearchInputChanged", "onOptionSelect", "onOptionCheck", "id", "isTree", "isDisabled", "addAllTooltip", "addAllTooltipProps", "addSelectedTooltip", "addSelectedTooltipProps", "removeAllTooltip", "removeAllTooltipProps", "removeSelectedTooltip", "removeSelectedTooltipProps"]);
        const { availableOptions, chosenOptions, chosenOptionsSelected, availableOptionsSelected, chosenTreeOptionsChecked, availableTreeOptionsChecked } = this.state;
        const availableOptionsStatusToDisplay = availableOptionsStatus || (isTree ? `${filterFolders(availableOptions, availableTreeOptionsChecked).length} of ${flattenTree(availableOptions).length} items selected` : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);
        const chosenOptionsStatusToDisplay = chosenOptionsStatus || (isTree ? `${filterFolders(chosenOptions, chosenTreeOptionsChecked).length} of ${flattenTree(chosenOptions).length} items selected` : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);
        const available = isTree ? availableOptions.map((item) => this.mapChecked(item, false)) : availableOptions;
        const chosen = isTree ? chosenOptions.map((item) => this.mapChecked(item, true)) : chosenOptions;
        return React186.createElement(
          DualListSelectorContext.Provider,
          { value: { isTree } },
          React186.createElement(GenerateId, null, (randomId) => React186.createElement("div", Object.assign({ className: css(dual_list_selector_default.dualListSelector, className), id: id || randomId }, props), children === "" ? React186.createElement(
            React186.Fragment,
            null,
            React186.createElement(DualListSelectorPane, { isSearchable, onFilterUpdate: this.onFilterUpdate, searchInputAriaLabel: availableOptionsSearchAriaLabel, filterOption, onSearchInputChanged: onAvailableOptionsSearchInputChanged, status: availableOptionsStatusToDisplay, title: availableOptionsTitle, options: available, selectedOptions: isTree ? availableTreeOptionsChecked : availableOptionsSelected, onOptionSelect: this.onOptionSelect, onOptionCheck: (e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, false), actions: availableOptionsActions, id: `${id || randomId}-available-pane`, isDisabled }),
            React186.createElement(
              DualListSelectorControlsWrapper,
              { "aria-label": controlsAriaLabel },
              React186.createElement(
                DualListSelectorControl,
                { isDisabled: (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) || isDisabled, onClick: isTree ? this.addTreeSelected : this.addSelected, ref: this.addSelectedButtonRef, "aria-label": addSelectedAriaLabel, tooltipContent: addSelectedTooltip, tooltipProps: addSelectedTooltipProps },
                React186.createElement(angle_right_icon_default, null)
              ),
              React186.createElement(
                DualListSelectorControl,
                { isDisabled: availableOptions.length === 0 || isDisabled, onClick: isTree ? this.addAllTreeVisible : this.addAllVisible, ref: this.addAllButtonRef, "aria-label": addAllAriaLabel, tooltipContent: addAllTooltip, tooltipProps: addAllTooltipProps },
                React186.createElement(angle_double_right_icon_default, null)
              ),
              React186.createElement(
                DualListSelectorControl,
                { isDisabled: chosenOptions.length === 0 || isDisabled, onClick: isTree ? this.removeAllTreeVisible : this.removeAllVisible, "aria-label": removeAllAriaLabel, ref: this.removeAllButtonRef, tooltipContent: removeAllTooltip, tooltipProps: removeAllTooltipProps },
                React186.createElement(angle_double_left_icon_default, null)
              ),
              React186.createElement(
                DualListSelectorControl,
                { onClick: isTree ? this.removeTreeSelected : this.removeSelected, isDisabled: (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled, ref: this.removeSelectedButtonRef, "aria-label": removeSelectedAriaLabel, tooltipContent: removeSelectedTooltip, tooltipProps: removeSelectedTooltipProps },
                React186.createElement(angle_left_icon_default, null)
              )
            ),
            React186.createElement(DualListSelectorPane, { isChosen: true, isSearchable, onFilterUpdate: this.onFilterUpdate, searchInputAriaLabel: chosenOptionsSearchAriaLabel, filterOption, onSearchInputChanged: onChosenOptionsSearchInputChanged, title: chosenOptionsTitle, status: chosenOptionsStatusToDisplay, options: chosen, selectedOptions: isTree ? chosenTreeOptionsChecked : chosenOptionsSelected, onOptionSelect: this.onOptionSelect, onOptionCheck: (e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, true), actions: chosenOptionsActions, id: `${id || randomId}-chosen-pane`, isDisabled })
          ) : children))
        );
      }
    };
    DualListSelector.displayName = "DualListSelector";
    DualListSelector.defaultProps = {
      children: "",
      availableOptions: [],
      availableOptionsTitle: "Available options",
      availableOptionsSearchAriaLabel: "Available search input",
      chosenOptions: [],
      chosenOptionsTitle: "Chosen options",
      chosenOptionsSearchAriaLabel: "Chosen search input",
      controlsAriaLabel: "Selector controls",
      addAllAriaLabel: "Add all",
      addSelectedAriaLabel: "Add selected",
      removeSelectedAriaLabel: "Remove selected",
      removeAllAriaLabel: "Remove all",
      isTree: false,
      isDisabled: false
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/index.js
var init_DualListSelector2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/index.js"() {
    init_DualListSelector();
    init_DualListSelectorContext();
    init_DualListSelectorControl();
    init_DualListSelectorControlsWrapper();
    init_DualListSelectorPane();
    init_DualListSelectorList();
    init_DualListSelectorListItem();
    init_DualListSelectorTree();
    init_DualListSelectorContext();
  }
});

// node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.css
var init_empty_state = __esm({
  "node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.mjs
var empty_state_default;
var init_empty_state2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.mjs"() {
    init_empty_state();
    empty_state_default = {
      "emptyState": "pf-v5-c-empty-state",
      "emptyStateActions": "pf-v5-c-empty-state__actions",
      "emptyStateBody": "pf-v5-c-empty-state__body",
      "emptyStateContent": "pf-v5-c-empty-state__content",
      "emptyStateFooter": "pf-v5-c-empty-state__footer",
      "emptyStateIcon": "pf-v5-c-empty-state__icon",
      "emptyStateTitleText": "pf-v5-c-empty-state__title-text",
      "modifiers": {
        "xs": "pf-m-xs",
        "sm": "pf-m-sm",
        "lg": "pf-m-lg",
        "xl": "pf-m-xl",
        "fullHeight": "pf-m-full-height"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js
var React187, EmptyStateVariant, EmptyState;
var init_EmptyState = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js"() {
    init_tslib_es6();
    React187 = __toESM(require_react());
    init_esm();
    init_empty_state2();
    (function(EmptyStateVariant2) {
      EmptyStateVariant2["xs"] = "xs";
      EmptyStateVariant2["sm"] = "sm";
      EmptyStateVariant2["lg"] = "lg";
      EmptyStateVariant2["xl"] = "xl";
      EmptyStateVariant2["full"] = "full";
    })(EmptyStateVariant || (EmptyStateVariant = {}));
    EmptyState = (_a) => {
      var { children, className, variant = EmptyStateVariant.full, isFullHeight } = _a, props = __rest(_a, ["children", "className", "variant", "isFullHeight"]);
      return React187.createElement(
        "div",
        Object.assign({ className: css(empty_state_default.emptyState, variant === "xs" && empty_state_default.modifiers.xs, variant === "sm" && empty_state_default.modifiers.sm, variant === "lg" && empty_state_default.modifiers.lg, variant === "xl" && empty_state_default.modifiers.xl, isFullHeight && empty_state_default.modifiers.fullHeight, className) }, props),
        React187.createElement("div", { className: css(empty_state_default.emptyStateContent) }, children)
      );
    };
    EmptyState.displayName = "EmptyState";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateHeader.js
var React188, EmptyStateHeader;
var init_EmptyStateHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateHeader.js"() {
    init_tslib_es6();
    React188 = __toESM(require_react());
    init_esm();
    init_empty_state2();
    EmptyStateHeader = (_a) => {
      var { children, className, titleClassName, titleText, headingLevel: HeadingLevel = "h1", icon } = _a, props = __rest(_a, ["children", "className", "titleClassName", "titleText", "headingLevel", "icon"]);
      return React188.createElement(
        "div",
        Object.assign({ className: css(`${empty_state_default.emptyState}__header`, className) }, props),
        icon,
        (titleText || children) && React188.createElement(
          "div",
          { className: css(`${empty_state_default.emptyState}__title`) },
          titleText && React188.createElement(HeadingLevel, { className: css(empty_state_default.emptyStateTitleText, titleClassName) }, titleText),
          children
        )
      );
    };
    EmptyStateHeader.displayName = "EmptyStateHeader";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_empty_state__icon_Color.js
var c_empty_state__icon_Color, c_empty_state_icon_Color_default;
var init_c_empty_state_icon_Color = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_empty_state__icon_Color.js"() {
    c_empty_state__icon_Color = {
      "name": "--pf-v5-c-empty-state__icon--Color",
      "value": "#6a6e73",
      "var": "var(--pf-v5-c-empty-state__icon--Color)"
    };
    c_empty_state_icon_Color_default = c_empty_state__icon_Color;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js
var React189, isSpinner, EmptyStateIcon;
var init_EmptyStateIcon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js"() {
    init_tslib_es6();
    React189 = __toESM(require_react());
    init_esm();
    init_empty_state2();
    init_Spinner2();
    init_c_empty_state_icon_Color();
    isSpinner = (icon) => icon.type === Spinner;
    EmptyStateIcon = (_a) => {
      var { className, icon: IconComponent, color } = _a, props = __rest(_a, ["className", "icon", "color"]);
      const iconIsSpinner = isSpinner(React189.createElement(IconComponent, null));
      return React189.createElement(
        "div",
        Object.assign({ className: css(empty_state_default.emptyStateIcon) }, color && !iconIsSpinner && { style: { [c_empty_state_icon_Color_default.name]: color } }),
        React189.createElement(IconComponent, Object.assign({ className, "aria-hidden": !iconIsSpinner }, props))
      );
    };
    EmptyStateIcon.displayName = "EmptyStateIcon";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js
var React190, EmptyStateBody;
var init_EmptyStateBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js"() {
    init_tslib_es6();
    React190 = __toESM(require_react());
    init_esm();
    init_empty_state2();
    EmptyStateBody = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React190.createElement("div", Object.assign({ className: css(empty_state_default.emptyStateBody, className) }, props), children);
    };
    EmptyStateBody.displayName = "EmptyStateBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateFooter.js
var React191, EmptyStateFooter;
var init_EmptyStateFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateFooter.js"() {
    init_tslib_es6();
    React191 = __toESM(require_react());
    init_esm();
    init_empty_state2();
    EmptyStateFooter = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React191.createElement("div", Object.assign({ className: css(empty_state_default.emptyStateFooter, className) }, props), children);
    };
    EmptyStateFooter.displayName = "EmptyStateFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateActions.js
var React192, EmptyStateActions;
var init_EmptyStateActions = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateActions.js"() {
    init_tslib_es6();
    React192 = __toESM(require_react());
    init_esm();
    init_empty_state2();
    EmptyStateActions = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React192.createElement("div", Object.assign({ className: css(empty_state_default.emptyStateActions, className) }, props), children);
    };
    EmptyStateActions.displayName = "EmptyStateActions";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/index.js
var init_EmptyState2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/EmptyState/index.js"() {
    init_EmptyState();
    init_EmptyStateHeader();
    init_EmptyStateIcon();
    init_EmptyStateBody();
    init_EmptyStateFooter();
    init_EmptyStateActions();
  }
});

// node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.css
var init_expandable_section = __esm({
  "node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.mjs
var expandable_section_default;
var init_expandable_section2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.mjs"() {
    init_expandable_section();
    expandable_section_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "expandableSection": "pf-v5-c-expandable-section",
      "expandableSectionContent": "pf-v5-c-expandable-section__content",
      "expandableSectionToggle": "pf-v5-c-expandable-section__toggle",
      "expandableSectionToggleIcon": "pf-v5-c-expandable-section__toggle-icon",
      "expandableSectionToggleText": "pf-v5-c-expandable-section__toggle-text",
      "modifiers": {
        "expanded": "pf-m-expanded",
        "detached": "pf-m-detached",
        "truncate": "pf-m-truncate",
        "limitWidth": "pf-m-limit-width",
        "displayLg": "pf-m-display-lg",
        "indented": "pf-m-indented",
        "active": "pf-m-active",
        "expandTop": "pf-m-expand-top"
      }
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp.js
var c_expandable_section_m_truncate__content_LineClamp, c_expandable_section_m_truncate_content_LineClamp_default;
var init_c_expandable_section_m_truncate_content_LineClamp = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp.js"() {
    c_expandable_section_m_truncate__content_LineClamp = {
      "name": "--pf-v5-c-expandable-section--m-truncate__content--LineClamp",
      "value": "3",
      "var": "var(--pf-v5-c-expandable-section--m-truncate__content--LineClamp)"
    };
    c_expandable_section_m_truncate_content_LineClamp_default = c_expandable_section_m_truncate__content_LineClamp;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js
var React193, ExpandableSectionVariant, setLineClamp, ExpandableSection;
var init_ExpandableSection = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js"() {
    init_tslib_es6();
    React193 = __toESM(require_react());
    init_expandable_section2();
    init_esm();
    init_c_expandable_section_m_truncate_content_LineClamp();
    init_angle_right_icon();
    init_util();
    init_resizeObserver();
    (function(ExpandableSectionVariant2) {
      ExpandableSectionVariant2["default"] = "default";
      ExpandableSectionVariant2["truncate"] = "truncate";
    })(ExpandableSectionVariant || (ExpandableSectionVariant = {}));
    setLineClamp = (lines, element) => {
      if (!element || lines < 1) {
        return;
      }
      element.style.setProperty(c_expandable_section_m_truncate_content_LineClamp_default.name, lines.toString());
    };
    ExpandableSection = class extends React193.Component {
      constructor(props) {
        super(props);
        this.expandableContentRef = React193.createRef();
        this.observer = () => {
        };
        this.checkToggleVisibility = () => {
          var _a;
          if ((_a = this.expandableContentRef) === null || _a === void 0 ? void 0 : _a.current) {
            const maxLines = this.props.truncateMaxLines || parseInt(c_expandable_section_m_truncate_content_LineClamp_default.value);
            const totalLines = this.expandableContentRef.current.scrollHeight / parseInt(getComputedStyle(this.expandableContentRef.current).lineHeight);
            this.setState({
              hasToggle: totalLines > maxLines
            });
          }
        };
        this.resize = () => {
          const { offsetWidth } = this.expandableContentRef.current;
          if (this.state.previousWidth !== offsetWidth) {
            this.setState({ previousWidth: offsetWidth });
            this.checkToggleVisibility();
          }
        };
        this.handleResize = debounce(this.resize, 250);
        this.state = {
          isExpanded: props.isExpanded,
          hasToggle: true,
          previousWidth: void 0
        };
      }
      calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {
        if (propOrStateIsExpanded && toggleTextExpanded !== "") {
          return toggleTextExpanded;
        }
        if (!propOrStateIsExpanded && toggleTextCollapsed !== "") {
          return toggleTextCollapsed;
        }
        return toggleText;
      }
      componentDidMount() {
        if (this.props.variant === ExpandableSectionVariant.truncate) {
          const expandableContent = this.expandableContentRef.current;
          this.setState({ previousWidth: expandableContent.offsetWidth });
          this.observer = getResizeObserver(expandableContent, this.handleResize, false);
          if (this.props.truncateMaxLines) {
            setLineClamp(this.props.truncateMaxLines, expandableContent);
          }
          this.checkToggleVisibility();
        }
      }
      componentDidUpdate(prevProps) {
        if (this.props.variant === ExpandableSectionVariant.truncate && (prevProps.truncateMaxLines !== this.props.truncateMaxLines || prevProps.children !== this.props.children)) {
          const expandableContent = this.expandableContentRef.current;
          setLineClamp(this.props.truncateMaxLines, expandableContent);
          this.checkToggleVisibility();
        }
      }
      componentWillUnmount() {
        if (this.props.variant === ExpandableSectionVariant.truncate) {
          this.observer();
        }
      }
      render() {
        const _a = this.props, {
          onToggle: onToggleProp,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          isActive,
          className,
          toggleText,
          toggleTextExpanded,
          toggleTextCollapsed,
          toggleContent,
          children,
          isExpanded,
          isDetached,
          displaySize,
          isWidthLimited,
          isIndented,
          contentId,
          toggleId,
          variant,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          truncateMaxLines
        } = _a, props = __rest(_a, ["onToggle", "isActive", "className", "toggleText", "toggleTextExpanded", "toggleTextCollapsed", "toggleContent", "children", "isExpanded", "isDetached", "displaySize", "isWidthLimited", "isIndented", "contentId", "toggleId", "variant", "truncateMaxLines"]);
        if (isDetached && !toggleId) {
          console.warn("ExpandableSection: The toggleId value must be passed in and must match the toggleId of the ExpandableSectionToggle.");
        }
        let onToggle = onToggleProp;
        let propOrStateIsExpanded = isExpanded;
        const uniqueContentId = contentId || getUniqueId("expandable-section-content");
        const uniqueToggleId = toggleId || getUniqueId("expandable-section-toggle");
        if (isExpanded === void 0) {
          propOrStateIsExpanded = this.state.isExpanded;
          onToggle = (event, isOpen) => {
            this.setState({ isExpanded: isOpen }, () => onToggleProp(event, this.state.isExpanded));
          };
        }
        const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);
        const expandableToggle = !isDetached && React193.createElement(
          "button",
          { className: css(expandable_section_default.expandableSectionToggle), type: "button", "aria-expanded": propOrStateIsExpanded, "aria-controls": uniqueContentId, id: uniqueToggleId, onClick: (event) => onToggle(event, !propOrStateIsExpanded) },
          variant !== ExpandableSectionVariant.truncate && React193.createElement(
            "span",
            { className: css(expandable_section_default.expandableSectionToggleIcon) },
            React193.createElement(angle_right_icon_default, { "aria-hidden": true })
          ),
          React193.createElement("span", { className: css(expandable_section_default.expandableSectionToggleText) }, toggleContent || computedToggleText)
        );
        return React193.createElement(
          "div",
          Object.assign({ className: css(expandable_section_default.expandableSection, propOrStateIsExpanded && expandable_section_default.modifiers.expanded, isActive && expandable_section_default.modifiers.active, isDetached && expandable_section_default.modifiers.detached, displaySize === "lg" && expandable_section_default.modifiers.displayLg, isWidthLimited && expandable_section_default.modifiers.limitWidth, isIndented && expandable_section_default.modifiers.indented, variant === ExpandableSectionVariant.truncate && expandable_section_default.modifiers.truncate, className) }, props),
          variant === ExpandableSectionVariant.default && expandableToggle,
          React193.createElement("div", { ref: this.expandableContentRef, className: css(expandable_section_default.expandableSectionContent), hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded, id: uniqueContentId, "aria-labelledby": uniqueToggleId, role: "region" }, children),
          variant === ExpandableSectionVariant.truncate && this.state.hasToggle && expandableToggle
        );
      }
    };
    ExpandableSection.displayName = "ExpandableSection";
    ExpandableSection.defaultProps = {
      className: "",
      toggleText: "",
      toggleTextExpanded: "",
      toggleTextCollapsed: "",
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onToggle: (event, isExpanded) => void 0,
      isActive: false,
      isDetached: false,
      displaySize: "default",
      isWidthLimited: false,
      isIndented: false,
      variant: "default"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSectionToggle.js
var React194, ExpandableSectionToggle;
var init_ExpandableSectionToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSectionToggle.js"() {
    init_tslib_es6();
    React194 = __toESM(require_react());
    init_expandable_section2();
    init_esm();
    init_angle_right_icon();
    ExpandableSectionToggle = (_a) => {
      var { children, className = "", isExpanded = false, onToggle, contentId, toggleId, direction = "down", hasTruncatedContent = false } = _a, props = __rest(_a, ["children", "className", "isExpanded", "onToggle", "contentId", "toggleId", "direction", "hasTruncatedContent"]);
      return React194.createElement(
        "div",
        Object.assign({ className: css(expandable_section_default.expandableSection, isExpanded && expandable_section_default.modifiers.expanded, expandable_section_default.modifiers.detached, hasTruncatedContent && expandable_section_default.modifiers.truncate, className) }, props),
        React194.createElement(
          "button",
          { className: css(expandable_section_default.expandableSectionToggle), type: "button", "aria-expanded": isExpanded, "aria-controls": contentId, onClick: () => onToggle(!isExpanded), id: toggleId },
          !hasTruncatedContent && React194.createElement(
            "span",
            { className: css(expandable_section_default.expandableSectionToggleIcon, isExpanded && direction === "up" && expandable_section_default.modifiers.expandTop) },
            React194.createElement(angle_right_icon_default, { "aria-hidden": true })
          ),
          React194.createElement("span", { className: css(expandable_section_default.expandableSectionToggleText) }, children)
        )
      );
    };
    ExpandableSectionToggle.displayName = "ExpandableSectionToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/index.js
var init_ExpandableSection2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/index.js"() {
    init_ExpandableSection();
    init_ExpandableSectionToggle();
  }
});

// node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.css
var init_file_upload = __esm({
  "node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.mjs
var file_upload_default;
var init_file_upload2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.mjs"() {
    init_file_upload();
    file_upload_default = {
      "button": "pf-v5-c-button",
      "fileUpload": "pf-v5-c-file-upload",
      "fileUploadFileDetails": "pf-v5-c-file-upload__file-details",
      "fileUploadFileDetailsSpinner": "pf-v5-c-file-upload__file-details-spinner",
      "fileUploadFileSelect": "pf-v5-c-file-upload__file-select",
      "formControl": "pf-v5-c-form-control",
      "modifiers": {
        "dragHover": "pf-m-drag-hover",
        "loading": "pf-m-loading",
        "control": "pf-m-control"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js
var React195, TextAreResizeOrientation, TextAreaReadOnlyVariant, TextAreaBase, TextArea;
var init_TextArea = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js"() {
    init_tslib_es6();
    React195 = __toESM(require_react());
    init_form_control2();
    init_esm();
    init_helpers();
    init_FormControlIcon();
    (function(TextAreResizeOrientation2) {
      TextAreResizeOrientation2["horizontal"] = "horizontal";
      TextAreResizeOrientation2["vertical"] = "vertical";
      TextAreResizeOrientation2["both"] = "both";
    })(TextAreResizeOrientation || (TextAreResizeOrientation = {}));
    (function(TextAreaReadOnlyVariant2) {
      TextAreaReadOnlyVariant2["default"] = "default";
      TextAreaReadOnlyVariant2["plain"] = "plain";
    })(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));
    TextAreaBase = class extends React195.Component {
      constructor(props) {
        super(props);
        this.inputRef = React195.createRef();
        this.setAutoHeight = (field) => {
          const parent = field.parentElement;
          parent.style.setProperty("height", "inherit");
          const computed = window.getComputedStyle(field);
          const height = parseInt(computed.getPropertyValue("border-top-width")) + parseInt(computed.getPropertyValue("padding-top")) + field.scrollHeight + parseInt(computed.getPropertyValue("padding-bottom")) + parseInt(computed.getPropertyValue("border-bottom-width"));
          parent.style.setProperty("height", `${height}px`);
        };
        this.handleChange = (event) => {
          const field = event.currentTarget;
          if (this.props.autoResize && canUseDOM) {
            this.setAutoHeight(field);
          }
          if (this.props.onChange) {
            this.props.onChange(event, field.value);
          }
        };
        if (!props.id && !props["aria-label"]) {
          console.error("TextArea: TextArea requires either an id or aria-label to be specified");
        }
      }
      componentDidMount() {
        const inputRef = this.props.innerRef || this.inputRef;
        if (this.props.autoResize && canUseDOM) {
          const field = inputRef.current;
          this.setAutoHeight(field);
        }
      }
      render() {
        const _a = this.props, {
          className,
          value,
          validated,
          isRequired,
          isDisabled,
          readOnlyVariant,
          resizeOrientation,
          innerRef,
          disabled,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          autoResize,
          onChange,
          /* eslint-enable @typescript-eslint/no-unused-vars */
          onBlur,
          onFocus
        } = _a, props = __rest(_a, ["className", "value", "validated", "isRequired", "isDisabled", "readOnlyVariant", "resizeOrientation", "innerRef", "disabled", "autoResize", "onChange", "onBlur", "onFocus"]);
        const orientation = `resize${capitalize(resizeOrientation)}`;
        const hasStatusIcon = ["success", "error", "warning"].includes(validated);
        return React195.createElement(
          "span",
          { className: css(form_control_default.formControl, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, resizeOrientation && form_control_default.modifiers[orientation], isDisabled && form_control_default.modifiers.disabled, hasStatusIcon && form_control_default.modifiers[validated], className) },
          React195.createElement("textarea", Object.assign({ onChange: this.handleChange, onFocus, onBlur }, typeof this.props.defaultValue !== "string" && { value }, { "aria-invalid": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)),
          hasStatusIcon && React195.createElement(
            "span",
            { className: css(form_control_default.formControlUtilities) },
            React195.createElement(FormControlIcon, { status: validated })
          )
        );
      }
    };
    TextAreaBase.displayName = "TextArea";
    TextAreaBase.defaultProps = {
      innerRef: React195.createRef(),
      className: "",
      isRequired: false,
      isDisabled: false,
      validated: "default",
      resizeOrientation: "both",
      "aria-label": null
    };
    TextArea = React195.forwardRef((props, ref) => React195.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref })));
    TextArea.displayName = "TextArea";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TextArea/index.js
var init_TextArea2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TextArea/index.js"() {
    init_TextArea();
  }
});

// node_modules/@patternfly/react-core/dist/esm/helpers/fileUtils.js
function readFile(fileHandle, type) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = () => reject(reader.error);
    if (type === fileReaderType.text) {
      reader.readAsText(fileHandle);
    } else if (type === fileReaderType.dataURL) {
      reader.readAsDataURL(fileHandle);
    } else {
      reject("unknown type");
    }
  });
}
var fileReaderType;
var init_fileUtils = __esm({
  "node_modules/@patternfly/react-core/dist/esm/helpers/fileUtils.js"() {
    (function(fileReaderType2) {
      fileReaderType2["text"] = "text";
      fileReaderType2["dataURL"] = "dataURL";
    })(fileReaderType || (fileReaderType = {}));
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadField.js
var React196, FileUploadField;
var init_FileUploadField = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadField.js"() {
    init_tslib_es6();
    React196 = __toESM(require_react());
    init_file_upload2();
    init_esm();
    init_InputGroup2();
    init_TextInput2();
    init_Button2();
    init_TextArea2();
    init_Spinner2();
    init_fileUtils();
    FileUploadField = (_a) => {
      var { id, name, type, value = "", filename = "", onBrowseButtonClick = () => {
      }, onClearButtonClick = () => {
      }, onTextAreaClick, onTextChange, onTextAreaBlur, textAreaPlaceholder = "", className = "", isDisabled = false, isReadOnly = false, isLoading = false, spinnerAriaValueText, isRequired = false, isDragActive = false, validated = "default", "aria-label": ariaLabel = "File upload", filenamePlaceholder = "Drag a file here or browse to upload", filenameAriaLabel = filename ? "Read only filename" : filenamePlaceholder, browseButtonText = "Browse...", clearButtonText = "Clear", isClearButtonDisabled = !filename && !value, containerRef = null, allowEditingUploadedText = false, hideDefaultPreview = false, children = null } = _a, props = __rest(_a, ["id", "name", "type", "value", "filename", "onBrowseButtonClick", "onClearButtonClick", "onTextAreaClick", "onTextChange", "onTextAreaBlur", "textAreaPlaceholder", "className", "isDisabled", "isReadOnly", "isLoading", "spinnerAriaValueText", "isRequired", "isDragActive", "validated", "aria-label", "filenamePlaceholder", "filenameAriaLabel", "browseButtonText", "clearButtonText", "isClearButtonDisabled", "containerRef", "allowEditingUploadedText", "hideDefaultPreview", "children"]);
      const onTextAreaChange = (event, newValue) => {
        onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(event, newValue);
      };
      return React196.createElement(
        "div",
        Object.assign({ className: css(file_upload_default.fileUpload, isDragActive && file_upload_default.modifiers.dragHover, isLoading && file_upload_default.modifiers.loading, className), ref: containerRef }, props),
        React196.createElement(
          "div",
          { className: file_upload_default.fileUploadFileSelect },
          React196.createElement(
            InputGroup,
            null,
            React196.createElement(
              InputGroupItem,
              { isFill: true },
              React196.createElement(TextInput, {
                readOnlyVariant: "default",
                isDisabled,
                id: `${id}-filename`,
                name: name || `${id}-filename`,
                "aria-label": filenameAriaLabel,
                placeholder: filenamePlaceholder,
                "aria-describedby": `${id}-browse-button`,
                value: filename
              })
            ),
            React196.createElement(
              InputGroupItem,
              null,
              React196.createElement(Button, { id: `${id}-browse-button`, variant: ButtonVariant.control, onClick: onBrowseButtonClick, isDisabled }, browseButtonText)
            ),
            React196.createElement(
              InputGroupItem,
              null,
              React196.createElement(Button, { variant: ButtonVariant.control, isDisabled: isDisabled || isClearButtonDisabled, onClick: onClearButtonClick }, clearButtonText)
            )
          )
        ),
        React196.createElement(
          "div",
          { className: file_upload_default.fileUploadFileDetails },
          !hideDefaultPreview && type === fileReaderType.text && React196.createElement(TextArea, { readOnly: isReadOnly || !!filename && !allowEditingUploadedText, disabled: isDisabled, isRequired, resizeOrientation: TextAreResizeOrientation.vertical, validated, id, "aria-label": ariaLabel, value, onChange: onTextAreaChange, onClick: onTextAreaClick, onBlur: onTextAreaBlur, placeholder: textAreaPlaceholder }),
          isLoading && React196.createElement(
            "div",
            { className: file_upload_default.fileUploadFileDetailsSpinner },
            React196.createElement(Spinner, { size: spinnerSize.lg, "aria-valuetext": spinnerAriaValueText })
          )
        ),
        children
      );
    };
    FileUploadField.displayName = "FileUploadField";
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment37 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment37;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement11, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement11(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement11(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/file-selector/dist/es5/file.js
function toFileWithPath(file, path) {
  var f = withMimeType(file);
  if (typeof f.path !== "string") {
    var webkitRelativePath = file.webkitRelativePath;
    Object.defineProperty(f, "path", {
      value: typeof path === "string" ? path : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : file.name,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  return f;
}
function withMimeType(file) {
  var name = file.name;
  var hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    var ext = name.split(".").pop().toLowerCase();
    var type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}
var COMMON_MIME_TYPES;
var init_file = __esm({
  "node_modules/file-selector/dist/es5/file.js"() {
    COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
      ["aac", "audio/aac"],
      ["abw", "application/x-abiword"],
      ["arc", "application/x-freearc"],
      ["avif", "image/avif"],
      ["avi", "video/x-msvideo"],
      ["azw", "application/vnd.amazon.ebook"],
      ["bin", "application/octet-stream"],
      ["bmp", "image/bmp"],
      ["bz", "application/x-bzip"],
      ["bz2", "application/x-bzip2"],
      ["cda", "application/x-cdf"],
      ["csh", "application/x-csh"],
      ["css", "text/css"],
      ["csv", "text/csv"],
      ["doc", "application/msword"],
      ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
      ["eot", "application/vnd.ms-fontobject"],
      ["epub", "application/epub+zip"],
      ["gz", "application/gzip"],
      ["gif", "image/gif"],
      ["heic", "image/heic"],
      ["heif", "image/heif"],
      ["htm", "text/html"],
      ["html", "text/html"],
      ["ico", "image/vnd.microsoft.icon"],
      ["ics", "text/calendar"],
      ["jar", "application/java-archive"],
      ["jpeg", "image/jpeg"],
      ["jpg", "image/jpeg"],
      ["js", "text/javascript"],
      ["json", "application/json"],
      ["jsonld", "application/ld+json"],
      ["mid", "audio/midi"],
      ["midi", "audio/midi"],
      ["mjs", "text/javascript"],
      ["mp3", "audio/mpeg"],
      ["mp4", "video/mp4"],
      ["mpeg", "video/mpeg"],
      ["mpkg", "application/vnd.apple.installer+xml"],
      ["odp", "application/vnd.oasis.opendocument.presentation"],
      ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
      ["odt", "application/vnd.oasis.opendocument.text"],
      ["oga", "audio/ogg"],
      ["ogv", "video/ogg"],
      ["ogx", "application/ogg"],
      ["opus", "audio/opus"],
      ["otf", "font/otf"],
      ["png", "image/png"],
      ["pdf", "application/pdf"],
      ["php", "application/x-httpd-php"],
      ["ppt", "application/vnd.ms-powerpoint"],
      ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
      ["rar", "application/vnd.rar"],
      ["rtf", "application/rtf"],
      ["sh", "application/x-sh"],
      ["svg", "image/svg+xml"],
      ["swf", "application/x-shockwave-flash"],
      ["tar", "application/x-tar"],
      ["tif", "image/tiff"],
      ["tiff", "image/tiff"],
      ["ts", "video/mp2t"],
      ["ttf", "font/ttf"],
      ["txt", "text/plain"],
      ["vsd", "application/vnd.visio"],
      ["wav", "audio/wav"],
      ["weba", "audio/webm"],
      ["webm", "video/webm"],
      ["webp", "image/webp"],
      ["woff", "font/woff"],
      ["woff2", "font/woff2"],
      ["xhtml", "application/xhtml+xml"],
      ["xls", "application/vnd.ms-excel"],
      ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
      ["xml", "application/xml"],
      ["xul", "application/vnd.mozilla.xul+xml"],
      ["zip", "application/zip"],
      ["7z", "application/x-7z-compressed"],
      // Others
      ["mkv", "video/x-matroska"],
      ["mov", "video/quicktime"],
      ["msg", "application/vnd.ms-outlook"]
    ]);
  }
});

// node_modules/file-selector/dist/es5/file-selector.js
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
        return [2, getDataTransferFiles(evt.dataTransfer, evt.type)];
      } else if (isChangeEvt(evt)) {
        return [2, getInputFiles(evt)];
      } else if (Array.isArray(evt) && evt.every(function(item) {
        return "getFile" in item && typeof item.getFile === "function";
      })) {
        return [2, getFsHandleFiles(evt)];
      }
      return [2, []];
    });
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map(function(file) {
    return toFileWithPath(file);
  });
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function() {
    var files;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, Promise.all(handles.map(function(h) {
            return h.getFile();
          }))];
        case 1:
          files = _a.sent();
          return [2, files.map(function(file) {
            return toFileWithPath(file);
          })];
      }
    });
  });
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function() {
    var items, files;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!dt.items) return [3, 2];
          items = fromList(dt.items).filter(function(item) {
            return item.kind === "file";
          });
          if (type !== "drop") {
            return [2, items];
          }
          return [4, Promise.all(items.map(toFilePromises))];
        case 1:
          files = _a.sent();
          return [2, noIgnoredFiles(flatten(files))];
        case 2:
          return [2, noIgnoredFiles(fromList(dt.files).map(function(file) {
            return toFileWithPath(file);
          }))];
      }
    });
  });
}
function noIgnoredFiles(files) {
  return files.filter(function(file) {
    return FILES_TO_IGNORE.indexOf(file.name) === -1;
  });
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  var files = [];
  for (var i = 0; i < items.length; i++) {
    var file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  var entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item);
}
function flatten(items) {
  return items.reduce(function(acc, files) {
    return __spreadArray(__spreadArray([], __read(acc), false), __read(Array.isArray(files) ? flatten(files) : [files]), false);
  }, []);
}
function fromDataTransferItem(item) {
  var file = item.getAsFile();
  if (!file) {
    return Promise.reject("".concat(item, " is not a File"));
  }
  var fwp = toFileWithPath(file);
  return Promise.resolve(fwp);
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];
    });
  });
}
function fromDirEntry(entry) {
  var reader = entry.createReader();
  return new Promise(function(resolve, reject) {
    var entries = [];
    function readEntries() {
      var _this = this;
      reader.readEntries(function(batch) {
        return __awaiter(_this, void 0, void 0, function() {
          var files, err_1, items;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (!!batch.length) return [3, 5];
                _a.label = 1;
              case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, Promise.all(entries)];
              case 2:
                files = _a.sent();
                resolve(files);
                return [3, 4];
              case 3:
                err_1 = _a.sent();
                reject(err_1);
                return [3, 4];
              case 4:
                return [3, 6];
              case 5:
                items = Promise.all(batch.map(fromEntry));
                entries.push(items);
                readEntries();
                _a.label = 6;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, function(err) {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, new Promise(function(resolve, reject) {
        entry.file(function(file) {
          var fwp = toFileWithPath(file, entry.fullPath);
          resolve(fwp);
        }, function(err) {
          reject(err);
        });
      })];
    });
  });
}
var FILES_TO_IGNORE;
var init_file_selector = __esm({
  "node_modules/file-selector/dist/es5/file-selector.js"() {
    init_tslib_es6();
    init_file();
    FILES_TO_IGNORE = [
      // Thumbnail cache files for macOS and Windows
      ".DS_Store",
      "Thumbs.db"
      // Windows
    ];
  }
});

// node_modules/file-selector/dist/es5/index.js
var init_es5 = __esm({
  "node_modules/file-selector/dist/es5/index.js"() {
    init_file_selector();
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/react-dropzone/dist/es/utils/index.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || (0, import_attr_accept.default)(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn) {
      if (!isPropagationStopped(event) && fn) {
        fn.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok = false;
      }
      return ok;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread(_objectSpread({}, agg), {}, _defineProperty2({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v) {
      return isMIMEType(v) || isExt(v);
    }).join(",");
  }
  return void 0;
}
function isAbort(v) {
  return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
}
function isSecurityError(v) {
  return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}
var import_attr_accept, FILE_INVALID_TYPE, FILE_TOO_LARGE, FILE_TOO_SMALL, TOO_MANY_FILES, getInvalidTypeRejectionErr, getTooLargeRejectionErr, getTooSmallRejectionErr, TOO_MANY_FILES_REJECTION;
var init_utils = __esm({
  "node_modules/react-dropzone/dist/es/utils/index.js"() {
    import_attr_accept = __toESM(require_es());
    FILE_INVALID_TYPE = "file-invalid-type";
    FILE_TOO_LARGE = "file-too-large";
    FILE_TOO_SMALL = "file-too-small";
    TOO_MANY_FILES = "too-many-files";
    getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2(accept) {
      accept = Array.isArray(accept) && accept.length === 1 ? accept[0] : accept;
      var messageSuffix = Array.isArray(accept) ? "one of ".concat(accept.join(", ")) : accept;
      return {
        code: FILE_INVALID_TYPE,
        message: "File type must be ".concat(messageSuffix)
      };
    };
    getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
      return {
        code: FILE_TOO_LARGE,
        message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
      };
    };
    getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
      return {
        code: FILE_TOO_SMALL,
        message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
      };
    };
    TOO_MANY_FILES_REJECTION = {
      code: TOO_MANY_FILES,
      message: "Too many files"
    };
  }
});

// node_modules/react-dropzone/dist/es/index.js
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread3(_objectSpread3({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react21.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react21.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react21.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react21.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react21.useRef)(null);
  var inputRef = (0, import_react21.useRef)(null);
  var _useReducer = (0, import_react21.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react21.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react21.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react21.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react21.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react21.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react21.useCallback)(function(e) {
    if (onError) {
      onError(e);
    } else {
      console.error(e);
    }
  }, [onError]);
  var onDragEnterCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react21.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react21.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react21.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react21.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react21.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react21.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn) {
    return disabled ? null : fn;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn) {
    return noKeyboard ? null : composeHandler(fn);
  };
  var composeDragHandler = function composeDragHandler2(fn) {
    return noDrag ? null : composeHandler(fn);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react21.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
      return _objectSpread3(_objectSpread3(_defineProperty3({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react21.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react21.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty3({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          display: "none"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread3(_objectSpread3({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread3(_objectSpread3({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread3(_objectSpread3({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections
      });
    case "reset":
      return _objectSpread3({}, initialState);
    default:
      return state;
  }
}
function noop() {
}
var import_react21, import_prop_types, _excluded, _excluded2, _excluded3, _excluded4, Dropzone, defaultProps, initialState;
var init_es = __esm({
  "node_modules/react-dropzone/dist/es/index.js"() {
    import_react21 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_es5();
    init_utils();
    _excluded = ["children"];
    _excluded2 = ["open"];
    _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
    _excluded4 = ["refKey", "onChange", "onClick"];
    Dropzone = /* @__PURE__ */ (0, import_react21.forwardRef)(function(_ref, ref) {
      var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
      var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
      (0, import_react21.useImperativeHandle)(ref, function() {
        return {
          open
        };
      }, [open]);
      return /* @__PURE__ */ import_react21.default.createElement(import_react21.Fragment, null, children(_objectSpread3(_objectSpread3({}, props), {}, {
        open
      })));
    });
    Dropzone.displayName = "Dropzone";
    defaultProps = {
      disabled: false,
      getFilesFromEvent: fromEvent,
      maxSize: Infinity,
      minSize: 0,
      multiple: true,
      maxFiles: 0,
      preventDropOnDocument: true,
      noClick: false,
      noKeyboard: false,
      noDrag: false,
      noDragEventsBubbling: false,
      validator: null,
      useFsAccessApi: true,
      autoFocus: false
    };
    Dropzone.defaultProps = defaultProps;
    Dropzone.propTypes = {
      /**
       * Render function that exposes the dropzone state and prop getter fns
       *
       * @param {object} params
       * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
       * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
       * @param {Function} params.open Open the native file selection dialog
       * @param {boolean} params.isFocused Dropzone area is in focus
       * @param {boolean} params.isFileDialogActive File dialog is opened
       * @param {boolean} params.isDragActive Active drag is in progress
       * @param {boolean} params.isDragAccept Dragged files are accepted
       * @param {boolean} params.isDragReject Some dragged files are rejected
       * @param {File[]} params.acceptedFiles Accepted files
       * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
       */
      children: import_prop_types.default.func,
      /**
       * Set accepted file types.
       * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
       * Keep in mind that mime type determination is not reliable across platforms. CSV files,
       * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
       * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
       */
      accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
      /**
       * Allow drag 'n' drop (or selection from the file dialog) of multiple files
       */
      multiple: import_prop_types.default.bool,
      /**
       * If false, allow dropped items to take over the current browser window
       */
      preventDropOnDocument: import_prop_types.default.bool,
      /**
       * If true, disables click to open the native file selection dialog
       */
      noClick: import_prop_types.default.bool,
      /**
       * If true, disables SPACE/ENTER to open the native file selection dialog.
       * Note that it also stops tracking the focus state.
       */
      noKeyboard: import_prop_types.default.bool,
      /**
       * If true, disables drag 'n' drop
       */
      noDrag: import_prop_types.default.bool,
      /**
       * If true, stops drag event propagation to parents
       */
      noDragEventsBubbling: import_prop_types.default.bool,
      /**
       * Minimum file size (in bytes)
       */
      minSize: import_prop_types.default.number,
      /**
       * Maximum file size (in bytes)
       */
      maxSize: import_prop_types.default.number,
      /**
       * Maximum accepted number of files
       * The default value is 0 which means there is no limitation to how many files are accepted.
       */
      maxFiles: import_prop_types.default.number,
      /**
       * Enable/disable the dropzone
       */
      disabled: import_prop_types.default.bool,
      /**
       * Use this to provide a custom file aggregator
       *
       * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
       */
      getFilesFromEvent: import_prop_types.default.func,
      /**
       * Cb for when closing the file dialog with no selection
       */
      onFileDialogCancel: import_prop_types.default.func,
      /**
       * Cb for when opening the file dialog
       */
      onFileDialogOpen: import_prop_types.default.func,
      /**
       * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
       * to open the file picker instead of using an `<input type="file">` click event.
       */
      useFsAccessApi: import_prop_types.default.bool,
      /**
       * Set to true to focus the root element on render
       */
      autoFocus: import_prop_types.default.bool,
      /**
       * Cb for when the `dragenter` event occurs.
       *
       * @param {DragEvent} event
       */
      onDragEnter: import_prop_types.default.func,
      /**
       * Cb for when the `dragleave` event occurs
       *
       * @param {DragEvent} event
       */
      onDragLeave: import_prop_types.default.func,
      /**
       * Cb for when the `dragover` event occurs
       *
       * @param {DragEvent} event
       */
      onDragOver: import_prop_types.default.func,
      /**
       * Cb for when the `drop` event occurs.
       * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
       *
       * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
       * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
       * If `multiple` is set to false and additional files are dropped,
       * all files besides the first will be rejected.
       * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
       *
       * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
       * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
       *
       * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
       * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
       *
       * ```js
       * function onDrop(acceptedFiles) {
       *   const req = request.post('/upload')
       *   acceptedFiles.forEach(file => {
       *     req.attach(file.name, file)
       *   })
       *   req.end(callback)
       * }
       * ```
       *
       * @param {File[]} acceptedFiles
       * @param {FileRejection[]} fileRejections
       * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
       */
      onDrop: import_prop_types.default.func,
      /**
       * Cb for when the `drop` event occurs.
       * Note that if no files are accepted, this callback is not invoked.
       *
       * @param {File[]} files
       * @param {(DragEvent|Event)} event
       */
      onDropAccepted: import_prop_types.default.func,
      /**
       * Cb for when the `drop` event occurs.
       * Note that if no files are rejected, this callback is not invoked.
       *
       * @param {FileRejection[]} fileRejections
       * @param {(DragEvent|Event)} event
       */
      onDropRejected: import_prop_types.default.func,
      /**
       * Cb for when there's some error from any of the promises.
       *
       * @param {Error} error
       */
      onError: import_prop_types.default.func,
      /**
       * Custom validation function. It must return null if there's no errors.
       * @param {File} file
       * @returns {FileError|FileError[]|null}
       */
      validator: import_prop_types.default.func
    };
    initialState = {
      isFocused: false,
      isFileDialogActive: false,
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false,
      acceptedFiles: [],
      fileRejections: []
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUpload.js
var React198, FileUpload;
var init_FileUpload = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUpload.js"() {
    init_tslib_es6();
    React198 = __toESM(require_react());
    init_es();
    init_FileUploadField();
    init_fileUtils();
    init_es5();
    FileUpload = (_a) => {
      var { id, type, value = type === fileReaderType.text || type === fileReaderType.dataURL ? "" : null, filename = "", children = null, onFileInputChange = null, onReadStarted = () => {
      }, onReadFinished = () => {
      }, onReadFailed = () => {
      }, onClearClick, onClick = (event) => event.preventDefault(), onTextChange, onDataChange, dropzoneProps = {} } = _a, props = __rest(_a, ["id", "type", "value", "filename", "children", "onFileInputChange", "onReadStarted", "onReadFinished", "onReadFailed", "onClearClick", "onClick", "onTextChange", "onDataChange", "dropzoneProps"]);
      const onDropAccepted = (acceptedFiles, event) => {
        if (acceptedFiles.length > 0) {
          const fileHandle = acceptedFiles[0];
          onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);
          if (type === fileReaderType.text || type === fileReaderType.dataURL) {
            onReadStarted(event, fileHandle);
            readFile(fileHandle, type).then((data) => {
              onReadFinished(event, fileHandle);
              onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(event, data);
            }).catch((error) => {
              onReadFailed(event, error, fileHandle);
              onReadFinished(event, fileHandle);
              onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(event, "");
            });
          }
        }
        dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);
      };
      const onDropRejected = (rejectedFiles, event) => {
        dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);
      };
      const onClearButtonClick = (event) => {
        onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);
        setFileValue(null);
      };
      const { getRootProps, getInputProps, isDragActive, open, inputRef } = useDropzone(Object.assign(Object.assign({ noClick: true, multiple: false }, dropzoneProps), {
        onDropAccepted,
        onDropRejected
      }));
      const setFileValue = (filename2) => {
        inputRef.current.value = filename2;
      };
      const oldInputProps = getInputProps();
      const inputProps = Object.assign(Object.assign({}, oldInputProps), { onChange: (e) => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        (_b = oldInputProps.onChange) === null || _b === void 0 ? void 0 : _b.call(oldInputProps, e);
        const files = yield fromEvent(e.nativeEvent);
        if (files.length === 1) {
          onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);
        }
      }) });
      const rootProps = getRootProps(Object.assign(Object.assign({}, props), {
        tabIndex: null,
        // Omit the unwanted tabIndex from react-dropzone's getRootProps
        id,
        type,
        filename,
        value,
        isDragActive,
        onBrowseButtonClick: open,
        onClearButtonClick,
        onTextAreaClick: onClick,
        onTextChange,
        onClick,
        refKey: "containerRef"
      }));
      return React198.createElement(
        FileUploadField,
        Object.assign({}, rootProps),
        React198.createElement("input", Object.assign({}, inputProps)),
        children
      );
    };
    FileUpload.displayName = "FileUpload";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/index.js
var init_FileUpload2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FileUpload/index.js"() {
    init_FileUploadField();
    init_FileUpload();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelect.js
var React199, FormSelect;
var init_FormSelect = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelect.js"() {
    init_tslib_es6();
    React199 = __toESM(require_react());
    init_form_control2();
    init_esm();
    init_constants();
    init_FormControlIcon();
    init_helpers();
    init_caret_down_icon();
    FormSelect = class _FormSelect extends React199.Component {
      constructor(props) {
        super(props);
        this.handleChange = (event) => {
          this.props.onChange(event, event.currentTarget.value);
        };
        if (!props.id && !props["aria-label"]) {
          console.error("FormSelect requires either an id or aria-label to be specified");
        }
        this.state = {
          ouiaStateId: getDefaultOUIAId(_FormSelect.displayName, props.validated)
        };
      }
      render() {
        const _a = this.props, { children, className, value, validated, isDisabled, isRequired, ouiaId, ouiaSafe } = _a, props = __rest(_a, ["children", "className", "value", "validated", "isDisabled", "isRequired", "ouiaId", "ouiaSafe"]);
        const selectedOption = React199.Children.toArray(children).find((option) => option.props.value === value);
        const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;
        const hasStatusIcon = ["success", "error", "warning"].includes(validated);
        return React199.createElement(
          "span",
          { className: css(form_control_default.formControl, isDisabled && form_control_default.modifiers.disabled, isSelectedPlaceholder && form_control_default.modifiers.placeholder, hasStatusIcon && form_control_default.modifiers[validated], className) },
          React199.createElement("select", Object.assign({}, props, { "aria-invalid": validated === ValidatedOptions.error }, getOUIAProps(_FormSelect.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { onChange: this.handleChange, disabled: isDisabled, required: isRequired, value }), children),
          React199.createElement(
            "span",
            { className: css(form_control_default.formControlUtilities) },
            hasStatusIcon && React199.createElement(FormControlIcon, { status: validated }),
            React199.createElement(
              "span",
              { className: css(form_control_default.formControlToggleIcon) },
              React199.createElement(caret_down_icon_default, null)
            )
          )
        );
      }
    };
    FormSelect.displayName = "FormSelect";
    FormSelect.defaultProps = {
      className: "",
      value: "",
      validated: "default",
      isDisabled: false,
      isRequired: false,
      onBlur: () => void 0,
      onFocus: () => void 0,
      onChange: () => void 0,
      ouiaSafe: true
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOption.js
var React200, FormSelectOption;
var init_FormSelectOption = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOption.js"() {
    init_tslib_es6();
    React200 = __toESM(require_react());
    FormSelectOption = (_a) => {
      var {
        className = "",
        value = "",
        isDisabled = false,
        label,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        isPlaceholder = false
      } = _a, props = __rest(_a, ["className", "value", "isDisabled", "label", "isPlaceholder"]);
      return React200.createElement("option", Object.assign({}, props, { className, value, disabled: isDisabled }), label);
    };
    FormSelectOption.displayName = "FormSelectOption";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOptionGroup.js
var React201, FormSelectOptionGroup;
var init_FormSelectOptionGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOptionGroup.js"() {
    init_tslib_es6();
    React201 = __toESM(require_react());
    FormSelectOptionGroup = (_a) => {
      var { children = null, className = "", isDisabled = false, label } = _a, props = __rest(_a, ["children", "className", "isDisabled", "label"]);
      return React201.createElement("optgroup", Object.assign({}, props, { disabled: !!isDisabled, className, label }), children);
    };
    FormSelectOptionGroup.displayName = "FormSelectOptionGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/index.js
var init_FormSelect2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/FormSelect/index.js"() {
    init_FormSelect();
    init_FormSelectOption();
    init_FormSelectOptionGroup();
  }
});

// node_modules/@patternfly/react-styles/css/components/Hint/hint.css
var init_hint = __esm({
  "node_modules/@patternfly/react-styles/css/components/Hint/hint.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Hint/hint.mjs
var hint_default;
var init_hint2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Hint/hint.mjs"() {
    init_hint();
    hint_default = {
      "button": "pf-v5-c-button",
      "dropdown": "pf-v5-c-dropdown",
      "dropdownToggle": "pf-v5-c-dropdown__toggle",
      "hint": "pf-v5-c-hint",
      "hintActions": "pf-v5-c-hint__actions",
      "hintBody": "pf-v5-c-hint__body",
      "hintFooter": "pf-v5-c-hint__footer",
      "hintTitle": "pf-v5-c-hint__title",
      "modifiers": {
        "link": "pf-m-link",
        "inline": "pf-m-inline",
        "plain": "pf-m-plain"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Hint/Hint.js
var React202, Hint;
var init_Hint = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Hint/Hint.js"() {
    init_tslib_es6();
    React202 = __toESM(require_react());
    init_hint2();
    init_esm();
    Hint = (_a) => {
      var { children, className, actions } = _a, props = __rest(_a, ["children", "className", "actions"]);
      return React202.createElement(
        "div",
        Object.assign({ className: css(hint_default.hint, className) }, props),
        React202.createElement("div", { className: css(hint_default.hintActions) }, actions),
        children
      );
    };
    Hint.displayName = "Hint";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintBody.js
var React203, HintBody;
var init_HintBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Hint/HintBody.js"() {
    init_tslib_es6();
    React203 = __toESM(require_react());
    init_hint2();
    init_esm();
    HintBody = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React203.createElement("div", Object.assign({ className: css(hint_default.hintBody, className) }, props), children);
    };
    HintBody.displayName = "HintBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintFooter.js
var React204, HintFooter;
var init_HintFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Hint/HintFooter.js"() {
    init_tslib_es6();
    React204 = __toESM(require_react());
    init_hint2();
    init_esm();
    HintFooter = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React204.createElement("div", Object.assign({ className: css(hint_default.hintFooter, className) }, props), children);
    };
    HintFooter.displayName = "HintFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintTitle.js
var React205, HintTitle;
var init_HintTitle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Hint/HintTitle.js"() {
    init_tslib_es6();
    React205 = __toESM(require_react());
    init_hint2();
    init_esm();
    HintTitle = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React205.createElement("div", Object.assign({ className: css(hint_default.hintTitle, className) }, props), children);
    };
    HintTitle.displayName = "HintTitle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Hint/index.js
var init_Hint2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Hint/index.js"() {
    init_Hint();
    init_HintBody();
    init_HintFooter();
    init_HintTitle();
  }
});

// node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.css
var init_jump_links = __esm({
  "node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.mjs
var jump_links_default;
var init_jump_links2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.mjs"() {
    init_jump_links();
    jump_links_default = {
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "jumpLinks": "pf-v5-c-jump-links",
      "jumpLinksItem": "pf-v5-c-jump-links__item",
      "jumpLinksLabel": "pf-v5-c-jump-links__label",
      "jumpLinksLink": "pf-v5-c-jump-links__link",
      "jumpLinksLinkText": "pf-v5-c-jump-links__link-text",
      "jumpLinksList": "pf-v5-c-jump-links__list",
      "jumpLinksMain": "pf-v5-c-jump-links__main",
      "jumpLinksToggle": "pf-v5-c-jump-links__toggle",
      "jumpLinksToggleIcon": "pf-v5-c-jump-links__toggle-icon",
      "jumpLinksToggleText": "pf-v5-c-jump-links__toggle-text",
      "modifiers": {
        "center": "pf-m-center",
        "vertical": "pf-m-vertical",
        "expandable": "pf-m-expandable",
        "nonExpandable": "pf-m-non-expandable",
        "expandableOnSm": "pf-m-expandable-on-sm",
        "nonExpandableOnSm": "pf-m-non-expandable-on-sm",
        "expandableOnMd": "pf-m-expandable-on-md",
        "nonExpandableOnMd": "pf-m-non-expandable-on-md",
        "expandableOnLg": "pf-m-expandable-on-lg",
        "nonExpandableOnLg": "pf-m-non-expandable-on-lg",
        "expandableOnXl": "pf-m-expandable-on-xl",
        "nonExpandableOnXl": "pf-m-non-expandable-on-xl",
        "expandableOn_2xl": "pf-m-expandable-on-2xl",
        "nonExpandableOn_2xl": "pf-m-non-expandable-on-2xl",
        "expanded": "pf-m-expanded",
        "current": "pf-m-current"
      }
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.css
var init_sidebar = __esm({
  "node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.mjs
var sidebar_default;
var init_sidebar2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.mjs"() {
    init_sidebar();
    sidebar_default = {
      "modifiers": {
        "gutter": "pf-m-gutter",
        "panelRight": "pf-m-panel-right",
        "stack": "pf-m-stack",
        "split": "pf-m-split",
        "border": "pf-m-border",
        "padding": "pf-m-padding",
        "sticky": "pf-m-sticky",
        "static": "pf-m-static",
        "noBackground": "pf-m-no-background",
        "widthDefault": "pf-m-width-default",
        "width_25": "pf-m-width-25",
        "width_33": "pf-m-width-33",
        "width_50": "pf-m-width-50",
        "width_66": "pf-m-width-66",
        "width_75": "pf-m-width-75",
        "width_100": "pf-m-width-100",
        "widthDefaultOnSm": "pf-m-width-default-on-sm",
        "width_25OnSm": "pf-m-width-25-on-sm",
        "width_33OnSm": "pf-m-width-33-on-sm",
        "width_50OnSm": "pf-m-width-50-on-sm",
        "width_66OnSm": "pf-m-width-66-on-sm",
        "width_75OnSm": "pf-m-width-75-on-sm",
        "width_100OnSm": "pf-m-width-100-on-sm",
        "widthDefaultOnMd": "pf-m-width-default-on-md",
        "width_25OnMd": "pf-m-width-25-on-md",
        "width_33OnMd": "pf-m-width-33-on-md",
        "width_50OnMd": "pf-m-width-50-on-md",
        "width_66OnMd": "pf-m-width-66-on-md",
        "width_75OnMd": "pf-m-width-75-on-md",
        "width_100OnMd": "pf-m-width-100-on-md",
        "widthDefaultOnLg": "pf-m-width-default-on-lg",
        "width_25OnLg": "pf-m-width-25-on-lg",
        "width_33OnLg": "pf-m-width-33-on-lg",
        "width_50OnLg": "pf-m-width-50-on-lg",
        "width_66OnLg": "pf-m-width-66-on-lg",
        "width_75OnLg": "pf-m-width-75-on-lg",
        "width_100OnLg": "pf-m-width-100-on-lg",
        "widthDefaultOnXl": "pf-m-width-default-on-xl",
        "width_25OnXl": "pf-m-width-25-on-xl",
        "width_33OnXl": "pf-m-width-33-on-xl",
        "width_50OnXl": "pf-m-width-50-on-xl",
        "width_66OnXl": "pf-m-width-66-on-xl",
        "width_75OnXl": "pf-m-width-75-on-xl",
        "width_100OnXl": "pf-m-width-100-on-xl",
        "widthDefaultOn_2xl": "pf-m-width-default-on-2xl",
        "width_25On_2xl": "pf-m-width-25-on-2xl",
        "width_33On_2xl": "pf-m-width-33-on-2xl",
        "width_50On_2xl": "pf-m-width-50-on-2xl",
        "width_66On_2xl": "pf-m-width-66-on-2xl",
        "width_75On_2xl": "pf-m-width-75-on-2xl",
        "width_100On_2xl": "pf-m-width-100-on-2xl"
      },
      "sidebar": "pf-v5-c-sidebar",
      "sidebarContent": "pf-v5-c-sidebar__content",
      "sidebarMain": "pf-v5-c-sidebar__main",
      "sidebarPanel": "pf-v5-c-sidebar__panel"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksList.js
var React206, JumpLinksList;
var init_JumpLinksList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksList.js"() {
    init_tslib_es6();
    React206 = __toESM(require_react());
    init_esm();
    init_jump_links2();
    JumpLinksList = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React206.createElement("ul", Object.assign({ className: css(jump_links_default.jumpLinksList, className), role: "list" }, props), children);
    };
    JumpLinksList.displayName = "JumpLinksList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksItem.js
var React207, JumpLinksItem;
var init_JumpLinksItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksItem.js"() {
    init_tslib_es6();
    React207 = __toESM(require_react());
    init_esm();
    init_jump_links2();
    init_JumpLinksList();
    JumpLinksItem = (_a) => {
      var {
        isActive,
        href,
        // eslint-disable-next-line
        node,
        children,
        onClick,
        className
      } = _a, props = __rest(_a, ["isActive", "href", "node", "children", "onClick", "className"]);
      const childrenArr = React207.Children.toArray(children);
      const sublists = childrenArr.filter((child) => child.type === JumpLinksList);
      children = childrenArr.filter((child) => child.type !== JumpLinksList);
      return React207.createElement(
        "li",
        Object.assign({ className: css(jump_links_default.jumpLinksItem, isActive && jump_links_default.modifiers.current, className) }, isActive && { "aria-current": "location" }, props),
        React207.createElement(
          "a",
          { className: jump_links_default.jumpLinksLink, href, onClick },
          React207.createElement("span", { className: jump_links_default.jumpLinksLinkText }, children)
        ),
        sublists
      );
    };
    JumpLinksItem.displayName = "JumpLinksItem";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display.js
var c_jump_links__toggle_Display, c_jump_links_toggle_Display_default;
var init_c_jump_links_toggle_Display = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display.js"() {
    c_jump_links__toggle_Display = {
      "name": "--pf-v5-c-jump-links__toggle--Display",
      "value": "none",
      "var": "var(--pf-v5-c-jump-links__toggle--Display)"
    };
    c_jump_links_toggle_Display_default = c_jump_links__toggle_Display;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinks.js
function isResponsive(jumpLinks) {
  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(c_jump_links_toggle_Display_default.name).includes("block");
}
var React208, getScrollItems, JumpLinks;
var init_JumpLinks = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinks.js"() {
    init_tslib_es6();
    React208 = __toESM(require_react());
    init_esm();
    init_jump_links2();
    init_sidebar2();
    init_JumpLinksItem();
    init_JumpLinksList();
    init_util();
    init_Button2();
    init_angle_right_icon();
    init_c_jump_links_toggle_Display();
    init_util();
    getScrollItems = (children, res) => {
      React208.Children.forEach(children, (child) => {
        if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {
          const scrollNode = child.props.node || child.props.href;
          if (typeof scrollNode === "string") {
            if (scrollNode.startsWith("#")) {
              res.push(document.getElementById(scrollNode.substr(1)));
            } else {
              res.push(document.querySelector(scrollNode));
            }
          } else if (scrollNode instanceof HTMLElement) {
            res.push(scrollNode);
          }
        }
        if ([React208.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {
          getScrollItems(child.props.children, res);
        }
      });
      return res;
    };
    JumpLinks = (_a) => {
      var { isCentered, isVertical, children, label, "aria-label": ariaLabel = typeof label === "string" ? label : null, scrollableRef, scrollableSelector, activeIndex: activeIndexProp = 0, offset: offset2 = 0, expandable, isExpanded: isExpandedProp = false, alwaysShowLabel = true, toggleAriaLabel = "Toggle jump links", className } = _a, props = __rest(_a, ["isCentered", "isVertical", "children", "label", "aria-label", "scrollableRef", "scrollableSelector", "activeIndex", "offset", "expandable", "isExpanded", "alwaysShowLabel", "toggleAriaLabel", "className"]);
      const hasScrollSpy = Boolean(scrollableRef || scrollableSelector);
      const [scrollItems, setScrollItems] = React208.useState(hasScrollSpy ? getScrollItems(children, []) : []);
      const [activeIndex, setActiveIndex] = React208.useState(activeIndexProp);
      const [isExpanded, setIsExpanded] = React208.useState(isExpandedProp);
      const isLinkClicked = React208.useRef(false);
      const navRef = React208.useRef();
      let scrollableElement;
      const getScrollableElement = () => {
        if (scrollableRef) {
          if (scrollableRef instanceof HTMLElement) {
            return scrollableRef;
          } else if (typeof scrollableRef === "function") {
            return scrollableRef();
          }
          return scrollableRef.current;
        } else if (scrollableSelector) {
          return document.querySelector(scrollableSelector);
        }
      };
      const scrollSpy = React208.useCallback(() => {
        if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {
          return;
        }
        if (isLinkClicked.current) {
          isLinkClicked.current = false;
          return;
        }
        const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset2);
        window.requestAnimationFrame(() => {
          let newScrollItems = scrollItems;
          const requiresRefresh = newScrollItems.every((e) => !(e === null || e === void 0 ? void 0 : e.offsetTop)) || !newScrollItems[0] || newScrollItems.includes(null);
          if (requiresRefresh) {
            newScrollItems = getScrollItems(children, []);
            setScrollItems(newScrollItems);
          }
          const scrollElements = newScrollItems.map((e, index) => ({
            y: e ? e.offsetTop : null,
            index
          })).filter(({ y }) => y !== null).sort((e1, e2) => e2.y - e1.y);
          for (const { y, index } of scrollElements) {
            if (scrollPosition >= y) {
              return setActiveIndex(index);
            }
          }
        });
      }, [scrollItems, hasScrollSpy, scrollableElement, offset2]);
      React208.useEffect(() => {
        scrollableElement = getScrollableElement();
        if (!(scrollableElement instanceof HTMLElement)) {
          return;
        }
        scrollableElement.addEventListener("scroll", scrollSpy);
        return () => scrollableElement.removeEventListener("scroll", scrollSpy);
      }, [scrollableElement, scrollSpy, getScrollableElement]);
      React208.useEffect(() => {
        scrollSpy();
      }, []);
      let jumpLinkIndex = 0;
      const cloneChildren = (children2) => !hasScrollSpy ? children2 : React208.Children.map(children2, (child) => {
        if (child.type === JumpLinksItem) {
          const { onClick: onClickProp, isActive: isActiveProp } = child.props;
          const itemIndex = jumpLinkIndex++;
          const scrollItem = scrollItems[itemIndex];
          return React208.cloneElement(child, {
            onClick(ev) {
              isLinkClicked.current = true;
              let newScrollItems;
              if (!scrollItem) {
                newScrollItems = getScrollItems(children2, []);
                setScrollItems(newScrollItems);
              }
              const newScrollItem = scrollItem || newScrollItems[itemIndex];
              if (newScrollItem) {
                const scrollableElement2 = getScrollableElement();
                if (scrollableElement2 instanceof HTMLElement) {
                  if (isResponsive(navRef.current)) {
                    if (navRef.current) {
                      navRef.current.classList.remove(jump_links_default.modifiers.expanded);
                    }
                    let stickyParent = navRef.current && navRef.current.parentElement;
                    while (stickyParent && !stickyParent.classList.contains(sidebar_default.modifiers.sticky)) {
                      stickyParent = stickyParent.parentElement;
                    }
                    setIsExpanded(false);
                    if (stickyParent) {
                      offset2 += stickyParent.scrollHeight;
                    }
                  }
                  scrollableElement2.scrollTo(0, newScrollItem.offsetTop - offset2);
                }
                newScrollItem.focus();
                window.history.pushState("", "", ev.currentTarget.href);
                ev.preventDefault();
                setActiveIndex(itemIndex);
              }
              if (onClickProp) {
                onClickProp(ev);
              }
            },
            isActive: isActiveProp || activeIndex === itemIndex,
            children: cloneChildren(child.props.children)
          });
        } else if (child.type === React208.Fragment) {
          return cloneChildren(child.props.children);
        } else if (child.type === JumpLinksList) {
          return React208.cloneElement(child, { children: cloneChildren(child.props.children) });
        }
        return child;
      });
      return React208.createElement(
        "nav",
        Object.assign({ className: css(jump_links_default.jumpLinks, isCentered && jump_links_default.modifiers.center, isVertical && jump_links_default.modifiers.vertical, formatBreakpointMods(expandable, jump_links_default), isExpanded && jump_links_default.modifiers.expanded, className), "aria-label": ariaLabel, ref: navRef }, props),
        React208.createElement(
          "div",
          { className: jump_links_default.jumpLinksMain },
          React208.createElement(
            "div",
            { className: css(`${jump_links_default.jumpLinks}__header`) },
            expandable && React208.createElement(
              "div",
              { className: jump_links_default.jumpLinksToggle },
              React208.createElement(
                Button,
                { variant: "plain", onClick: () => setIsExpanded(!isExpanded), "aria-label": toggleAriaLabel, "aria-expanded": isExpanded },
                React208.createElement(
                  "span",
                  { className: jump_links_default.jumpLinksToggleIcon },
                  React208.createElement(angle_right_icon_default, null)
                ),
                label && React208.createElement(
                  "span",
                  { className: css(jump_links_default.jumpLinksToggleText) },
                  " ",
                  label,
                  " "
                )
              )
            ),
            label && alwaysShowLabel && React208.createElement("div", { className: css(jump_links_default.jumpLinksLabel) }, label)
          ),
          React208.createElement("ul", { className: jump_links_default.jumpLinksList, role: "list" }, cloneChildren(children))
        )
      );
    };
    JumpLinks.displayName = "JumpLinks";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/index.js
var init_JumpLinks2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/index.js"() {
    init_JumpLinks();
    init_JumpLinksItem();
    init_JumpLinksList();
  }
});

// node_modules/@patternfly/react-styles/css/components/Label/label.css
var init_label = __esm({
  "node_modules/@patternfly/react-styles/css/components/Label/label.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Label/label.mjs
var label_default;
var init_label2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Label/label.mjs"() {
    init_label();
    label_default = {
      "button": "pf-v5-c-button",
      "label": "pf-v5-c-label",
      "labelActions": "pf-v5-c-label__actions",
      "labelContent": "pf-v5-c-label__content",
      "labelIcon": "pf-v5-c-label__icon",
      "labelText": "pf-v5-c-label__text",
      "modifiers": {
        "compact": "pf-m-compact",
        "blue": "pf-m-blue",
        "green": "pf-m-green",
        "orange": "pf-m-orange",
        "red": "pf-m-red",
        "purple": "pf-m-purple",
        "cyan": "pf-m-cyan",
        "gold": "pf-m-gold",
        "outline": "pf-m-outline",
        "overflow": "pf-m-overflow",
        "add": "pf-m-add",
        "editable": "pf-m-editable",
        "editableActive": "pf-m-editable-active",
        "disabled": "pf-m-disabled"
      },
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Label/label-group.css
var init_label_group = __esm({
  "node_modules/@patternfly/react-styles/css/components/Label/label-group.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Label/label-group.mjs
var label_group_default;
var init_label_group2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Label/label-group.mjs"() {
    init_label_group();
    label_group_default = {
      "button": "pf-v5-c-button",
      "labelGroup": "pf-v5-c-label-group",
      "labelGroupClose": "pf-v5-c-label-group__close",
      "labelGroupLabel": "pf-v5-c-label-group__label",
      "labelGroupList": "pf-v5-c-label-group__list",
      "labelGroupListItem": "pf-v5-c-label-group__list-item",
      "labelGroupMain": "pf-v5-c-label-group__main",
      "labelGroupTextarea": "pf-v5-c-label-group__textarea",
      "modifiers": {
        "category": "pf-m-category",
        "vertical": "pf-m-vertical",
        "editable": "pf-m-editable",
        "textarea": "pf-m-textarea"
      }
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_label__text_MaxWidth.js
var c_label__text_MaxWidth, c_label_text_MaxWidth_default;
var init_c_label_text_MaxWidth = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_label__text_MaxWidth.js"() {
    c_label__text_MaxWidth = {
      "name": "--pf-v5-c-label__text--MaxWidth",
      "value": "100%",
      "var": "var(--pf-v5-c-label__text--MaxWidth)"
    };
    c_label_text_MaxWidth_default = c_label__text_MaxWidth;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Label/Label.js
var React209, import_react22, colorStyles, Label;
var init_Label = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Label/Label.js"() {
    init_tslib_es6();
    React209 = __toESM(require_react());
    import_react22 = __toESM(require_react());
    init_label2();
    init_label_group2();
    init_Button2();
    init_Tooltip2();
    init_esm();
    init_times_icon();
    init_helpers();
    init_c_label_text_MaxWidth();
    colorStyles = {
      blue: label_default.modifiers.blue,
      cyan: label_default.modifiers.cyan,
      green: label_default.modifiers.green,
      orange: label_default.modifiers.orange,
      purple: label_default.modifiers.purple,
      red: label_default.modifiers.red,
      gold: label_default.modifiers.gold,
      grey: ""
    };
    Label = (_a) => {
      var { children, className = "", color = "grey", variant = "filled", isCompact = false, isDisabled = false, isEditable = false, editableProps, textMaxWidth, tooltipPosition, icon, onClose, onClick: onLabelClick, onEditCancel, onEditComplete, closeBtn, closeBtnAriaLabel, closeBtnProps, href, isOverflowLabel, render } = _a, props = __rest(_a, ["children", "className", "color", "variant", "isCompact", "isDisabled", "isEditable", "editableProps", "textMaxWidth", "tooltipPosition", "icon", "onClose", "onClick", "onEditCancel", "onEditComplete", "closeBtn", "closeBtnAriaLabel", "closeBtnProps", "href", "isOverflowLabel", "render"]);
      const [isEditableActive, setIsEditableActive] = (0, import_react22.useState)(false);
      const [currValue, setCurrValue] = (0, import_react22.useState)(children);
      const editableButtonRef = React209.useRef();
      const editableInputRef = React209.useRef();
      React209.useEffect(() => {
        document.addEventListener("mousedown", onDocMouseDown);
        document.addEventListener("keydown", onKeyDown);
        return () => {
          document.removeEventListener("mousedown", onDocMouseDown);
          document.removeEventListener("keydown", onKeyDown);
        };
      });
      React209.useEffect(() => {
        if (onLabelClick && href) {
          console.warn("Link labels cannot have onClick passed, this results in invalid HTML. Please remove either the href or onClick prop.");
        } else if (onLabelClick && isEditable) {
          console.warn("Editable labels cannot have onClick passed, clicking starts the label edit process. Please remove either the isEditable or onClick prop.");
        }
      }, [onLabelClick, href, isEditable]);
      const onDocMouseDown = (event) => {
        if (isEditableActive && editableInputRef && editableInputRef.current && !editableInputRef.current.contains(event.target)) {
          if (editableInputRef.current.value) {
            onEditComplete && onEditComplete(event, editableInputRef.current.value);
          }
          setIsEditableActive(false);
        }
      };
      const onKeyDown = (event) => {
        var _a2, _b;
        const key = event.key;
        if (!isEditableActive && (!editableButtonRef || !editableButtonRef.current || !editableButtonRef.current.contains(event.target)) || isEditableActive && (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target))) {
          return;
        }
        if (isEditableActive && (key === "Enter" || key === "Tab")) {
          event.preventDefault();
          event.stopImmediatePropagation();
          if (editableInputRef.current.value) {
            onEditComplete && onEditComplete(event, editableInputRef.current.value);
          }
          setIsEditableActive(false);
          (_a2 = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        }
        if (isEditableActive && key === "Escape") {
          event.preventDefault();
          event.stopImmediatePropagation();
          if (editableInputRef.current.value) {
            editableInputRef.current.value = children;
            onEditCancel && onEditCancel(event, children);
          }
          setIsEditableActive(false);
          (_b = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
        if (!isEditableActive && key === "Enter") {
          event.preventDefault();
          event.stopImmediatePropagation();
          setIsEditableActive(true);
          const el = event.target;
          const range = document.createRange();
          const sel = window.getSelection();
          range.selectNodeContents(el);
          range.collapse(false);
          sel.removeAllRanges();
          sel.addRange(range);
        }
      };
      const isClickableDisabled = (href || onLabelClick) && isDisabled;
      const defaultCloseButton = React209.createElement(
        Button,
        Object.assign({ type: "button", variant: "plain", onClick: onClose, "aria-label": closeBtnAriaLabel || `Close ${children}` }, isClickableDisabled && { isDisabled: true }, closeBtnProps),
        React209.createElement(times_icon_default, null)
      );
      const closeButton = React209.createElement("span", { className: css(label_default.labelActions) }, closeBtn || defaultCloseButton);
      const textRef = React209.createRef();
      const componentRef = React209.useRef();
      const [isTooltipVisible, setIsTooltipVisible] = React209.useState(false);
      useIsomorphicLayoutEffect(() => {
        const currTextRef = isEditable ? editableButtonRef : textRef;
        if (!isEditableActive) {
          setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);
        }
      }, [isEditableActive]);
      const content = React209.createElement(
        React209.Fragment,
        null,
        icon && React209.createElement("span", { className: css(label_default.labelIcon) }, icon),
        React209.createElement("span", Object.assign({ ref: textRef, className: css(label_default.labelText) }, textMaxWidth && {
          style: {
            [c_label_text_MaxWidth_default.name]: textMaxWidth
          }
        }), children)
      );
      React209.useEffect(() => {
        if (isEditableActive && editableInputRef) {
          editableInputRef.current && editableInputRef.current.focus();
        }
      }, [editableInputRef, isEditableActive]);
      const updateVal = () => {
        setCurrValue(editableInputRef.current.value);
      };
      let LabelComponentChildElement = "span";
      if (href) {
        LabelComponentChildElement = "a";
      } else if (isEditable || onLabelClick && !isOverflowLabel) {
        LabelComponentChildElement = "button";
      }
      const clickableLabelProps = {
        type: "button",
        onClick: onLabelClick
      };
      const isButton = LabelComponentChildElement === "button";
      const labelComponentChildProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ className: css(label_default.labelContent) }, isTooltipVisible && { tabIndex: 0 }), href && { href }), href && isDisabled && { onClick: (event) => event.preventDefault() }), isButton && clickableLabelProps), isEditable && Object.assign({ ref: editableButtonRef, onClick: (e) => {
        setIsEditableActive(true);
        e.stopPropagation();
      } }, editableProps)), isClickableDisabled && isButton && { disabled: true }), isClickableDisabled && href && { tabindex: -1, "aria-disabled": true });
      let labelComponentChild = React209.createElement(LabelComponentChildElement, Object.assign({}, labelComponentChildProps), content);
      if (render) {
        labelComponentChild = React209.createElement(
          React209.Fragment,
          null,
          isTooltipVisible && React209.createElement(Tooltip, { triggerRef: componentRef, content: children, position: tooltipPosition }),
          render({
            className: label_default.labelContent,
            content,
            componentRef
          })
        );
      } else if (isTooltipVisible) {
        labelComponentChild = React209.createElement(Tooltip, { content: children, position: tooltipPosition }, labelComponentChild);
      }
      const LabelComponent = isOverflowLabel ? "button" : "span";
      return React209.createElement(
        LabelComponent,
        Object.assign({}, props, { className: css(label_default.label, isClickableDisabled && label_default.modifiers.disabled, colorStyles[color], variant === "outline" && label_default.modifiers.outline, isOverflowLabel && label_default.modifiers.overflow, isCompact && label_default.modifiers.compact, isEditable && label_group_default.modifiers.editable, isEditableActive && label_default.modifiers.editableActive, className), onClick: isOverflowLabel ? onLabelClick : void 0 }),
        !isEditableActive && labelComponentChild,
        !isEditableActive && onClose && closeButton,
        isEditableActive && React209.createElement("input", Object.assign({ className: css(label_default.labelContent), type: "text", id: "editable-input", ref: editableInputRef, value: currValue, onChange: updateVal }, editableProps))
      );
    };
    Label.displayName = "Label";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Label/LabelGroup.js
var React210, LabelGroup;
var init_LabelGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Label/LabelGroup.js"() {
    init_tslib_es6();
    React210 = __toESM(require_react());
    init_label_group2();
    init_label2();
    init_esm();
    init_Button2();
    init_Label();
    init_Tooltip2();
    init_times_circle_icon();
    init_helpers();
    init_GenerateId();
    LabelGroup = class extends React210.Component {
      constructor(props) {
        super(props);
        this.headingRef = React210.createRef();
        this.toggleCollapse = () => {
          this.setState((prevState) => ({
            isOpen: !prevState.isOpen,
            isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
          }));
        };
        this.state = {
          isOpen: this.props.defaultIsOpen,
          isTooltipVisible: false
        };
      }
      componentDidMount() {
        this.setState({
          isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
        });
      }
      renderLabel(id) {
        const { categoryName, tooltipPosition } = this.props;
        const { isTooltipVisible } = this.state;
        return isTooltipVisible ? React210.createElement(
          Tooltip,
          { position: tooltipPosition, content: categoryName },
          React210.createElement(
            "span",
            { tabIndex: 0, ref: this.headingRef, className: css(label_group_default.labelGroupLabel) },
            React210.createElement("span", { "aria-hidden": "true", id }, categoryName)
          )
        ) : React210.createElement("span", { ref: this.headingRef, className: css(label_group_default.labelGroupLabel), "aria-hidden": "true", id }, categoryName);
      }
      render() {
        const _a = this.props, {
          categoryName,
          children,
          className,
          isClosable,
          isCompact,
          closeBtnAriaLabel,
          "aria-label": ariaLabel,
          onClick,
          numLabels,
          expandedText,
          collapsedText,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          defaultIsOpen,
          tooltipPosition,
          isVertical,
          isEditable,
          hasEditableTextArea,
          editableTextAreaProps,
          addLabelControl
        } = _a, rest = __rest(_a, ["categoryName", "children", "className", "isClosable", "isCompact", "closeBtnAriaLabel", "aria-label", "onClick", "numLabels", "expandedText", "collapsedText", "defaultIsOpen", "tooltipPosition", "isVertical", "isEditable", "hasEditableTextArea", "editableTextAreaProps", "addLabelControl"]);
        const { isOpen } = this.state;
        const renderedChildren = React210.Children.toArray(children);
        const numChildren = renderedChildren.length;
        const collapsedTextResult = fillTemplate(collapsedText, {
          remaining: numChildren - numLabels
        });
        const renderLabelGroup = (id) => {
          const labelArray = !isOpen ? renderedChildren.slice(0, numLabels) : renderedChildren;
          const content = React210.createElement(
            React210.Fragment,
            null,
            categoryName && this.renderLabel(id),
            React210.createElement(
              "ul",
              Object.assign({ className: css(label_group_default.labelGroupList) }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, { role: "list" }, rest),
              labelArray.map((child, i) => React210.createElement("li", { className: css(label_group_default.labelGroupListItem), key: i }, child)),
              numChildren > numLabels && React210.createElement(
                "li",
                { className: css(label_group_default.labelGroupListItem) },
                React210.createElement(Label, { isOverflowLabel: true, onClick: this.toggleCollapse, className: css(isCompact && label_default.modifiers.compact) }, isOpen ? expandedText : collapsedTextResult)
              ),
              addLabelControl && React210.createElement("li", { className: css(label_group_default.labelGroupListItem) }, addLabelControl),
              isEditable && hasEditableTextArea && React210.createElement(
                "li",
                { className: css(label_group_default.labelGroupListItem, label_group_default.modifiers.textarea) },
                React210.createElement("textarea", Object.assign({ className: css(label_group_default.labelGroupTextarea), rows: 1, tabIndex: 0 }, editableTextAreaProps))
              )
            )
          );
          const close = React210.createElement(
            "div",
            { className: css(label_group_default.labelGroupClose) },
            React210.createElement(
              Button,
              { variant: "plain", "aria-label": closeBtnAriaLabel, onClick, id: `remove_group_${id}`, "aria-labelledby": `remove_group_${id} ${id}` },
              React210.createElement(times_circle_icon_default, { "aria-hidden": "true" })
            )
          );
          return React210.createElement(
            "div",
            { className: css(label_group_default.labelGroup, className, categoryName && label_group_default.modifiers.category, isVertical && label_group_default.modifiers.vertical, isEditable && label_group_default.modifiers.editable) },
            React210.createElement("div", { className: css(label_group_default.labelGroupMain) }, content),
            isClosable && close
          );
        };
        return numChildren === 0 && addLabelControl === void 0 ? null : React210.createElement(GenerateId, null, (randomId) => renderLabelGroup(this.props.id || randomId));
      }
    };
    LabelGroup.displayName = "LabelGroup";
    LabelGroup.defaultProps = {
      expandedText: "Show Less",
      collapsedText: "${remaining} more",
      categoryName: "",
      defaultIsOpen: false,
      numLabels: 3,
      isClosable: false,
      isCompact: false,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onClick: (_e) => void 0,
      closeBtnAriaLabel: "Close label group",
      tooltipPosition: "top",
      "aria-label": "Label group category",
      isVertical: false,
      isEditable: false,
      hasEditableTextArea: false
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Label/index.js
var init_Label2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Label/index.js"() {
    init_Label();
    init_LabelGroup();
  }
});

// node_modules/@patternfly/react-styles/css/components/List/list.css
var init_list = __esm({
  "node_modules/@patternfly/react-styles/css/components/List/list.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/List/list.mjs
var list_default;
var init_list2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/List/list.mjs"() {
    init_list();
    list_default = {
      "list": "pf-v5-c-list",
      "listItem": "pf-v5-c-list__item",
      "listItemIcon": "pf-v5-c-list__item-icon",
      "modifiers": {
        "iconLg": "pf-m-icon-lg",
        "plain": "pf-m-plain",
        "inline": "pf-m-inline",
        "bordered": "pf-m-bordered"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/List/List.js
var React211, OrderType, ListVariant, ListComponent, List;
var init_List = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/List/List.js"() {
    init_tslib_es6();
    React211 = __toESM(require_react());
    init_list2();
    init_esm();
    (function(OrderType2) {
      OrderType2["number"] = "1";
      OrderType2["lowercaseLetter"] = "a";
      OrderType2["uppercaseLetter"] = "A";
      OrderType2["lowercaseRomanNumber"] = "i";
      OrderType2["uppercaseRomanNumber"] = "I";
    })(OrderType || (OrderType = {}));
    (function(ListVariant2) {
      ListVariant2["inline"] = "inline";
    })(ListVariant || (ListVariant = {}));
    (function(ListComponent2) {
      ListComponent2["ol"] = "ol";
      ListComponent2["ul"] = "ul";
    })(ListComponent || (ListComponent = {}));
    List = (_a) => {
      var { className = "", children = null, variant = null, isBordered = false, isPlain = false, iconSize = "default", type = OrderType.number, ref = null, component = ListComponent.ul } = _a, props = __rest(_a, ["className", "children", "variant", "isBordered", "isPlain", "iconSize", "type", "ref", "component"]);
      return component === ListComponent.ol ? React211.createElement("ol", Object.assign({ ref, type }, isPlain && { role: "list" }, props, { className: css(list_default.list, variant && list_default.modifiers[variant], isBordered && list_default.modifiers.bordered, isPlain && list_default.modifiers.plain, iconSize && iconSize === "large" && list_default.modifiers.iconLg, className) }), children) : React211.createElement("ul", Object.assign({ ref }, isPlain && { role: "list" }, props, { className: css(list_default.list, variant && list_default.modifiers[variant], isBordered && list_default.modifiers.bordered, isPlain && list_default.modifiers.plain, iconSize && iconSize === "large" && list_default.modifiers.iconLg, className) }), children);
    };
    List.displayName = "List";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/List/ListItem.js
var React212, ListItem;
var init_ListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/List/ListItem.js"() {
    init_tslib_es6();
    React212 = __toESM(require_react());
    init_list2();
    init_esm();
    ListItem = (_a) => {
      var { icon = null, children = null } = _a, props = __rest(_a, ["icon", "children"]);
      return React212.createElement(
        "li",
        Object.assign({ className: css(icon && list_default.listItem) }, props),
        icon && React212.createElement("span", { className: css(list_default.listItemIcon) }, icon),
        children
      );
    };
    ListItem.displayName = "ListItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/List/index.js
var init_List2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/List/index.js"() {
    init_List();
    init_ListItem();
  }
});

// node_modules/@patternfly/react-styles/css/components/Login/login.css
var init_login = __esm({
  "node_modules/@patternfly/react-styles/css/components/Login/login.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Login/login.mjs
var login_default;
var init_login2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Login/login.mjs"() {
    init_login();
    login_default = {
      "brand": "pf-v5-c-brand",
      "button": "pf-v5-c-button",
      "dropdown": "pf-v5-c-dropdown",
      "list": "pf-v5-c-list",
      "login": "pf-v5-c-login",
      "loginContainer": "pf-v5-c-login__container",
      "loginFooter": "pf-v5-c-login__footer",
      "loginHeader": "pf-v5-c-login__header",
      "loginMain": "pf-v5-c-login__main",
      "loginMainBody": "pf-v5-c-login__main-body",
      "loginMainFooter": "pf-v5-c-login__main-footer",
      "loginMainFooterBand": "pf-v5-c-login__main-footer-band",
      "loginMainFooterLinks": "pf-v5-c-login__main-footer-links",
      "loginMainFooterLinksItem": "pf-v5-c-login__main-footer-links-item",
      "loginMainFooterLinksItemLink": "pf-v5-c-login__main-footer-links-item-link",
      "loginMainHeader": "pf-v5-c-login__main-header",
      "loginMainHeaderDesc": "pf-v5-c-login__main-header-desc",
      "loginMainHeaderUtilities": "pf-v5-c-login__main-header-utilities",
      "themeDark": "pf-v5-theme-dark",
      "title": "pf-v5-c-title"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/Login.js
var React213, Login;
var init_Login = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/Login.js"() {
    init_tslib_es6();
    React213 = __toESM(require_react());
    init_login2();
    init_esm();
    Login = (_a) => {
      var { className = "", children = null, footer = null, header = null } = _a, props = __rest(_a, ["className", "children", "footer", "header"]);
      return React213.createElement(
        "div",
        Object.assign({}, props, { className: css(login_default.login, className) }),
        React213.createElement(
          "div",
          { className: css(login_default.loginContainer) },
          header,
          React213.createElement("main", { className: css(login_default.loginMain) }, children),
          footer
        )
      );
    };
    Login.displayName = "Login";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginHeader.js
var React214, LoginHeader;
var init_LoginHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginHeader.js"() {
    init_tslib_es6();
    React214 = __toESM(require_react());
    init_login2();
    init_esm();
    LoginHeader = (_a) => {
      var { className = "", children = null, headerBrand = null } = _a, props = __rest(_a, ["className", "children", "headerBrand"]);
      return React214.createElement(
        "header",
        Object.assign({ className: css(login_default.loginHeader, className) }, props),
        headerBrand,
        children
      );
    };
    LoginHeader.displayName = "LoginHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooter.js
var React215, LoginFooter;
var init_LoginFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooter.js"() {
    init_tslib_es6();
    React215 = __toESM(require_react());
    init_login2();
    init_esm();
    LoginFooter = (_a) => {
      var { className = "", children = null } = _a, props = __rest(_a, ["className", "children"]);
      return React215.createElement("footer", Object.assign({ className: css(login_default.loginFooter, className) }, props), children);
    };
    LoginFooter.displayName = "LoginFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainHeader.js
var React216, LoginMainHeader;
var init_LoginMainHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainHeader.js"() {
    init_tslib_es6();
    React216 = __toESM(require_react());
    init_Title2();
    init_esm();
    init_login2();
    LoginMainHeader = (_a) => {
      var { children = null, className = "", title = "", subtitle = "", headerUtilities = null } = _a, props = __rest(_a, ["children", "className", "title", "subtitle", "headerUtilities"]);
      return React216.createElement(
        "header",
        Object.assign({ className: css(login_default.loginMainHeader, className) }, props),
        title && React216.createElement(Title, { headingLevel: "h2", size: TitleSizes["3xl"] }, title),
        subtitle && React216.createElement("p", { className: css(login_default.loginMainHeaderDesc) }, subtitle),
        headerUtilities && React216.createElement("div", { className: css(login_default.loginMainHeaderUtilities) }, headerUtilities),
        children
      );
    };
    LoginMainHeader.displayName = "LoginMainHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainBody.js
var React217, LoginMainBody;
var init_LoginMainBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainBody.js"() {
    init_tslib_es6();
    React217 = __toESM(require_react());
    init_esm();
    init_login2();
    LoginMainBody = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React217.createElement("div", Object.assign({ className: css(login_default.loginMainBody, className) }, props), children);
    };
    LoginMainBody.displayName = "LoginMainBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooter.js
var React218, LoginMainFooter;
var init_LoginMainFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooter.js"() {
    init_tslib_es6();
    React218 = __toESM(require_react());
    init_esm();
    init_login2();
    LoginMainFooter = (_a) => {
      var { children = null, socialMediaLoginContent = null, signUpForAccountMessage = null, forgotCredentials = null, className = "", socialMediaLoginAriaLabel } = _a, props = __rest(_a, ["children", "socialMediaLoginContent", "signUpForAccountMessage", "forgotCredentials", "className", "socialMediaLoginAriaLabel"]);
      return React218.createElement(
        "div",
        Object.assign({ className: css(login_default.loginMainFooter, className) }, props),
        children,
        socialMediaLoginContent && React218.createElement("ul", { className: css(login_default.loginMainFooterLinks), "aria-label": socialMediaLoginAriaLabel, role: "list" }, socialMediaLoginContent),
        (signUpForAccountMessage || forgotCredentials) && React218.createElement(
          "div",
          { className: css(login_default.loginMainFooterBand) },
          signUpForAccountMessage,
          forgotCredentials
        )
      );
    };
    LoginMainFooter.displayName = "LoginMainFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginPage.js
var React219, LoginPage;
var init_LoginPage = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginPage.js"() {
    init_tslib_es6();
    React219 = __toESM(require_react());
    init_esm();
    init_BackgroundImage2();
    init_Brand2();
    init_List2();
    init_Login();
    init_LoginHeader();
    init_LoginFooter();
    init_LoginMainHeader();
    init_LoginMainBody();
    init_LoginMainFooter();
    LoginPage = (_a) => {
      var { children = null, className = "", brandImgSrc = "", brandImgAlt = "", backgroundImgSrc = "", footerListItems = null, textContent = "", footerListVariants, loginTitle, loginSubtitle, headerUtilities, signUpForAccountMessage = null, forgotCredentials = null, socialMediaLoginContent = null, socialMediaLoginAriaLabel } = _a, props = __rest(_a, ["children", "className", "brandImgSrc", "brandImgAlt", "backgroundImgSrc", "footerListItems", "textContent", "footerListVariants", "loginTitle", "loginSubtitle", "headerUtilities", "signUpForAccountMessage", "forgotCredentials", "socialMediaLoginContent", "socialMediaLoginAriaLabel"]);
      const HeaderBrand = React219.createElement(
        React219.Fragment,
        null,
        React219.createElement(Brand, { src: brandImgSrc, alt: brandImgAlt })
      );
      const Header = React219.createElement(LoginHeader, { headerBrand: HeaderBrand });
      const Footer = React219.createElement(
        LoginFooter,
        null,
        React219.createElement("p", null, textContent),
        React219.createElement(List, { variant: footerListVariants }, footerListItems)
      );
      return React219.createElement(
        React219.Fragment,
        null,
        backgroundImgSrc && React219.createElement(BackgroundImage, { src: backgroundImgSrc }),
        React219.createElement(
          Login,
          Object.assign({ header: Header, footer: Footer, className: css(className) }, props),
          React219.createElement(LoginMainHeader, { title: loginTitle, subtitle: loginSubtitle, headerUtilities }),
          React219.createElement(LoginMainBody, null, children),
          (socialMediaLoginContent || forgotCredentials || signUpForAccountMessage) && React219.createElement(LoginMainFooter, { socialMediaLoginContent, socialMediaLoginAriaLabel, forgotCredentials, signUpForAccountMessage })
        )
      );
    };
    LoginPage.displayName = "LoginPage";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/eye-slash-icon.js
var EyeSlashIconConfig, EyeSlashIcon, eye_slash_icon_default;
var init_eye_slash_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/eye-slash-icon.js"() {
    init_createIcon();
    EyeSlashIconConfig = {
      name: "EyeSlashIcon",
      height: 512,
      width: 640,
      svgPath: "M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z",
      yOffset: 0,
      xOffset: 0
    };
    EyeSlashIcon = createIcon(EyeSlashIconConfig);
    eye_slash_icon_default = EyeSlashIcon;
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/eye-icon.js
var EyeIconConfig, EyeIcon, eye_icon_default;
var init_eye_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/eye-icon.js"() {
    init_createIcon();
    EyeIconConfig = {
      name: "EyeIcon",
      height: 512,
      width: 576,
      svgPath: "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z",
      yOffset: 0,
      xOffset: 0
    };
    EyeIcon = createIcon(EyeIconConfig);
    eye_icon_default = EyeIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginForm.js
var React220, LoginForm;
var init_LoginForm = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginForm.js"() {
    init_tslib_es6();
    React220 = __toESM(require_react());
    init_Form2();
    init_TextInput2();
    init_Button2();
    init_Checkbox2();
    init_constants();
    init_InputGroup2();
    init_eye_slash_icon();
    init_eye_icon();
    init_HelperText2();
    LoginForm = (_a) => {
      var { noAutoFocus = false, className = "", showHelperText = false, helperText = null, helperTextIcon = null, usernameLabel = "Username", usernameValue = "", onChangeUsername = () => void 0, isValidUsername = true, passwordLabel = "Password", passwordValue = "", onChangePassword = () => void 0, isShowPasswordEnabled = false, hidePasswordAriaLabel = "Hide password", showPasswordAriaLabel = "Show password", isValidPassword = true, loginButtonLabel = "Log In", isLoginButtonDisabled = false, onLoginButtonClick = () => void 0, rememberMeLabel = "", isRememberMeChecked = false, onChangeRememberMe = () => void 0 } = _a, props = __rest(_a, ["noAutoFocus", "className", "showHelperText", "helperText", "helperTextIcon", "usernameLabel", "usernameValue", "onChangeUsername", "isValidUsername", "passwordLabel", "passwordValue", "onChangePassword", "isShowPasswordEnabled", "hidePasswordAriaLabel", "showPasswordAriaLabel", "isValidPassword", "loginButtonLabel", "isLoginButtonDisabled", "onLoginButtonClick", "rememberMeLabel", "isRememberMeChecked", "onChangeRememberMe"]);
      const [passwordHidden, setPasswordHidden] = React220.useState(true);
      const passwordInput = React220.createElement(TextInput, { isRequired: true, type: passwordHidden ? "password" : "text", id: "pf-login-password-id", name: "pf-login-password-id", validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, value: passwordValue, onChange: onChangePassword });
      return React220.createElement(
        Form,
        Object.assign({ className }, props),
        showHelperText && React220.createElement(
          FormHelperText,
          null,
          React220.createElement(
            HelperText,
            null,
            React220.createElement(HelperTextItem, { variant: !isValidUsername || !isValidPassword ? "error" : "default", icon: helperTextIcon }, helperText)
          )
        ),
        React220.createElement(
          FormGroup,
          { label: usernameLabel, isRequired: true, fieldId: "pf-login-username-id" },
          React220.createElement(TextInput, { autoFocus: !noAutoFocus, id: "pf-login-username-id", isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, type: "text", name: "pf-login-username-id", value: usernameValue, onChange: onChangeUsername })
        ),
        React220.createElement(
          FormGroup,
          { label: passwordLabel, isRequired: true, fieldId: "pf-login-password-id" },
          isShowPasswordEnabled && React220.createElement(
            InputGroup,
            null,
            React220.createElement(InputGroupItem, { isFill: true }, passwordInput),
            React220.createElement(
              InputGroupItem,
              null,
              React220.createElement(Button, { variant: "control", onClick: () => setPasswordHidden(!passwordHidden), "aria-label": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel }, passwordHidden ? React220.createElement(eye_icon_default, null) : React220.createElement(eye_slash_icon_default, null))
            )
          ),
          !isShowPasswordEnabled && passwordInput
        ),
        rememberMeLabel.length > 0 && React220.createElement(
          FormGroup,
          { fieldId: "pf-login-remember-me-id" },
          React220.createElement(Checkbox, { id: "pf-login-remember-me-id", label: rememberMeLabel, isChecked: isRememberMeChecked, onChange: onChangeRememberMe })
        ),
        React220.createElement(
          ActionGroup,
          null,
          React220.createElement(Button, { variant: "primary", type: "submit", onClick: onLoginButtonClick, isBlock: true, isDisabled: isLoginButtonDisabled }, loginButtonLabel)
        )
      );
    };
    LoginForm.displayName = "LoginForm";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooterItem.js
var React221, LoginFooterItem;
var init_LoginFooterItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooterItem.js"() {
    init_tslib_es6();
    React221 = __toESM(require_react());
    LoginFooterItem = (_a) => {
      var { children = null, href = "#", target = "_blank" } = _a, props = __rest(_a, ["children", "href", "target"]);
      return React221.isValidElement(children) ? children : React221.createElement("a", Object.assign({ target, href }, props), children);
    };
    LoginFooterItem.displayName = "LoginFooterItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterBandItem.js
var React222, LoginMainFooterBandItem;
var init_LoginMainFooterBandItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterBandItem.js"() {
    init_tslib_es6();
    React222 = __toESM(require_react());
    init_login2();
    init_esm();
    LoginMainFooterBandItem = (_a) => {
      var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React222.createElement("p", Object.assign({ className: css(`${login_default.loginMainFooterBand}-item`, className) }, props), children);
    };
    LoginMainFooterBandItem.displayName = "LoginMainFooterBandItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterLinksItem.js
var React223, LoginMainFooterLinksItem;
var init_LoginMainFooterLinksItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterLinksItem.js"() {
    init_tslib_es6();
    React223 = __toESM(require_react());
    init_login2();
    init_esm();
    LoginMainFooterLinksItem = (_a) => {
      var { children = null, href = "", target, className = "", linkComponent = "a", linkComponentProps } = _a, props = __rest(_a, ["children", "href", "target", "className", "linkComponent", "linkComponentProps"]);
      const LinkComponent = linkComponent;
      return React223.createElement(
        "li",
        Object.assign({ className: css(login_default.loginMainFooterLinksItem, className) }, props),
        React223.createElement(LinkComponent, Object.assign({ className: css(login_default.loginMainFooterLinksItemLink), href, target }, linkComponentProps), children)
      );
    };
    LoginMainFooterLinksItem.displayName = "LoginMainFooterLinksItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/index.js
var init_LoginPage2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/LoginPage/index.js"() {
    init_LoginPage();
    init_Login();
    init_LoginForm();
    init_LoginMainBody();
    init_LoginMainHeader();
    init_LoginHeader();
    init_LoginFooter();
    init_LoginMainFooter();
    init_LoginFooterItem();
    init_LoginMainFooterBandItem();
    init_LoginMainFooterLinksItem();
  }
});

// node_modules/@patternfly/react-styles/css/components/Masthead/masthead.css
var init_masthead = __esm({
  "node_modules/@patternfly/react-styles/css/components/Masthead/masthead.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Masthead/masthead.mjs
var masthead_default;
var init_masthead2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Masthead/masthead.mjs"() {
    init_masthead();
    masthead_default = {
      "button": "pf-v5-c-button",
      "contextSelector": "pf-v5-c-context-selector",
      "dropdown": "pf-v5-c-dropdown",
      "masthead": "pf-v5-c-masthead",
      "mastheadBrand": "pf-v5-c-masthead__brand",
      "mastheadContent": "pf-v5-c-masthead__content",
      "mastheadMain": "pf-v5-c-masthead__main",
      "mastheadToggle": "pf-v5-c-masthead__toggle",
      "menuToggle": "pf-v5-c-menu-toggle",
      "modifiers": {
        "light_200": "pf-m-light-200",
        "light": "pf-m-light",
        "plain": "pf-m-plain",
        "resizeObserver": "pf-m-resize-observer",
        "fullHeight": "pf-m-full-height",
        "horizontal": "pf-m-horizontal",
        "displayStack": "pf-m-display-stack",
        "displayInline": "pf-m-display-inline",
        "insetNone": "pf-m-inset-none",
        "insetSm": "pf-m-inset-sm",
        "insetMd": "pf-m-inset-md",
        "insetLg": "pf-m-inset-lg",
        "insetXl": "pf-m-inset-xl",
        "inset_2xl": "pf-m-inset-2xl",
        "displayStackOnSm": "pf-m-display-stack-on-sm",
        "displayInlineOnSm": "pf-m-display-inline-on-sm",
        "insetNoneOnSm": "pf-m-inset-none-on-sm",
        "insetSmOnSm": "pf-m-inset-sm-on-sm",
        "insetMdOnSm": "pf-m-inset-md-on-sm",
        "insetLgOnSm": "pf-m-inset-lg-on-sm",
        "insetXlOnSm": "pf-m-inset-xl-on-sm",
        "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
        "displayStackOnMd": "pf-m-display-stack-on-md",
        "displayInlineOnMd": "pf-m-display-inline-on-md",
        "insetNoneOnMd": "pf-m-inset-none-on-md",
        "insetSmOnMd": "pf-m-inset-sm-on-md",
        "insetMdOnMd": "pf-m-inset-md-on-md",
        "insetLgOnMd": "pf-m-inset-lg-on-md",
        "insetXlOnMd": "pf-m-inset-xl-on-md",
        "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
        "displayStackOnLg": "pf-m-display-stack-on-lg",
        "displayInlineOnLg": "pf-m-display-inline-on-lg",
        "insetNoneOnLg": "pf-m-inset-none-on-lg",
        "insetSmOnLg": "pf-m-inset-sm-on-lg",
        "insetMdOnLg": "pf-m-inset-md-on-lg",
        "insetLgOnLg": "pf-m-inset-lg-on-lg",
        "insetXlOnLg": "pf-m-inset-xl-on-lg",
        "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
        "displayStackOnXl": "pf-m-display-stack-on-xl",
        "displayInlineOnXl": "pf-m-display-inline-on-xl",
        "insetNoneOnXl": "pf-m-inset-none-on-xl",
        "insetSmOnXl": "pf-m-inset-sm-on-xl",
        "insetMdOnXl": "pf-m-inset-md-on-xl",
        "insetLgOnXl": "pf-m-inset-lg-on-xl",
        "insetXlOnXl": "pf-m-inset-xl-on-xl",
        "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
        "displayStackOn_2xl": "pf-m-display-stack-on-2xl",
        "displayInlineOn_2xl": "pf-m-display-inline-on-2xl",
        "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
        "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
        "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
        "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
        "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
        "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
      },
      "nav": "pf-v5-c-nav",
      "page": "pf-v5-c-page",
      "themeDark": "pf-v5-theme-dark",
      "toolbar": "pf-v5-c-toolbar",
      "toolbarContentSection": "pf-v5-c-toolbar__content-section",
      "toolbarExpandableContent": "pf-v5-c-toolbar__expandable-content"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageContext.js
var React224, pageContextDefaults, PageContext, PageContextProvider, PageContextConsumer;
var init_PageContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageContext.js"() {
    React224 = __toESM(require_react());
    init_util();
    pageContextDefaults = {
      isManagedSidebar: false,
      isSidebarOpen: false,
      onSidebarToggle: () => null,
      width: null,
      height: null,
      getBreakpoint,
      getVerticalBreakpoint
    };
    PageContext = React224.createContext(pageContextDefaults);
    PageContextProvider = PageContext.Provider;
    PageContextConsumer = PageContext.Consumer;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
var React225, Masthead;
var init_Masthead = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js"() {
    init_tslib_es6();
    React225 = __toESM(require_react());
    init_masthead2();
    init_esm();
    init_util();
    init_PageContext();
    Masthead = (_a) => {
      var { children, className, backgroundColor = "dark", display = {
        md: "inline"
      }, inset } = _a, props = __rest(_a, ["children", "className", "backgroundColor", "display", "inset"]);
      const { width, getBreakpoint: getBreakpoint2 } = React225.useContext(PageContext);
      return React225.createElement("header", Object.assign({ className: css(masthead_default.masthead, formatBreakpointMods(display, masthead_default, "display-", getBreakpoint2(width)), formatBreakpointMods(inset, masthead_default, "", getBreakpoint2(width)), backgroundColor === "light" && masthead_default.modifiers.light, backgroundColor === "light200" && masthead_default.modifiers.light_200, className) }, props), children);
    };
    Masthead.displayName = "Masthead";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadBrand.js
var React226, MastheadBrand;
var init_MastheadBrand = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadBrand.js"() {
    init_tslib_es6();
    React226 = __toESM(require_react());
    init_masthead2();
    init_esm();
    MastheadBrand = (_a) => {
      var { children, className, component } = _a, props = __rest(_a, ["children", "className", "component"]);
      let Component44 = component;
      if (!component) {
        if ((props === null || props === void 0 ? void 0 : props.href) !== void 0) {
          Component44 = "a";
        } else {
          Component44 = "span";
        }
      }
      return React226.createElement(Component44, Object.assign({ className: css(masthead_default.mastheadBrand, className) }, Component44 === "a" && { tabIndex: 0 }, props), children);
    };
    MastheadBrand.displayName = "MastheadBrand";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadContent.js
var React227, MastheadContent;
var init_MastheadContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadContent.js"() {
    init_tslib_es6();
    React227 = __toESM(require_react());
    init_masthead2();
    init_esm();
    MastheadContent = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React227.createElement("div", Object.assign({ className: css(masthead_default.mastheadContent, className) }, props), children);
    };
    MastheadContent.displayName = "MastheadContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadMain.js
var React228, MastheadMain;
var init_MastheadMain = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadMain.js"() {
    init_tslib_es6();
    React228 = __toESM(require_react());
    init_masthead2();
    init_esm();
    MastheadMain = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React228.createElement("div", Object.assign({ className: css(masthead_default.mastheadMain, className) }, props), children);
    };
    MastheadMain.displayName = "MastheadMain";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadToggle.js
var React229, MastheadToggle;
var init_MastheadToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadToggle.js"() {
    init_tslib_es6();
    React229 = __toESM(require_react());
    init_masthead2();
    init_esm();
    MastheadToggle = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React229.createElement("span", Object.assign({ className: css(masthead_default.mastheadToggle, className) }, props), children);
    };
    MastheadToggle.displayName = "MastheadToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/index.js
var init_Masthead2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Masthead/index.js"() {
    init_Masthead();
    init_MastheadBrand();
    init_MastheadContent();
    init_MastheadMain();
    init_MastheadToggle();
  }
});

// node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.css
var init_multiple_file_upload = __esm({
  "node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.mjs
var multiple_file_upload_default;
var init_multiple_file_upload2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.mjs"() {
    init_multiple_file_upload();
    multiple_file_upload_default = {
      "modifiers": {
        "horizontal": "pf-m-horizontal",
        "dragOver": "pf-m-drag-over"
      },
      "multipleFileUpload": "pf-v5-c-multiple-file-upload",
      "multipleFileUploadInfo": "pf-v5-c-multiple-file-upload__info",
      "multipleFileUploadMain": "pf-v5-c-multiple-file-upload__main",
      "multipleFileUploadStatus": "pf-v5-c-multiple-file-upload__status",
      "multipleFileUploadStatusItem": "pf-v5-c-multiple-file-upload__status-item",
      "multipleFileUploadStatusItemClose": "pf-v5-c-multiple-file-upload__status-item-close",
      "multipleFileUploadStatusItemIcon": "pf-v5-c-multiple-file-upload__status-item-icon",
      "multipleFileUploadStatusItemMain": "pf-v5-c-multiple-file-upload__status-item-main",
      "multipleFileUploadStatusItemProgress": "pf-v5-c-multiple-file-upload__status-item-progress",
      "multipleFileUploadStatusItemProgressSize": "pf-v5-c-multiple-file-upload__status-item-progress-size",
      "multipleFileUploadStatusItemProgressText": "pf-v5-c-multiple-file-upload__status-item-progress-text",
      "multipleFileUploadStatusProgress": "pf-v5-c-multiple-file-upload__status-progress",
      "multipleFileUploadStatusProgressIcon": "pf-v5-c-multiple-file-upload__status-progress-icon",
      "multipleFileUploadTitle": "pf-v5-c-multiple-file-upload__title",
      "multipleFileUploadTitleIcon": "pf-v5-c-multiple-file-upload__title-icon",
      "multipleFileUploadTitleText": "pf-v5-c-multiple-file-upload__title-text",
      "multipleFileUploadTitleTextSeparator": "pf-v5-c-multiple-file-upload__title-text-separator",
      "multipleFileUploadUpload": "pf-v5-c-multiple-file-upload__upload"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUpload.js
var React230, MultipleFileUploadContext, MultipleFileUpload;
var init_MultipleFileUpload = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUpload.js"() {
    init_tslib_es6();
    React230 = __toESM(require_react());
    init_es();
    init_multiple_file_upload2();
    init_esm();
    MultipleFileUploadContext = React230.createContext({
      open: () => {
      }
    });
    MultipleFileUpload = (_a) => {
      var { className, children, dropzoneProps = {}, isHorizontal, onFileDrop = () => {
      } } = _a, props = __rest(_a, ["className", "children", "dropzoneProps", "isHorizontal", "onFileDrop"]);
      const onDropAccepted = (acceptedFiles, event) => {
        onFileDrop(event, acceptedFiles);
        dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);
      };
      const { getRootProps, getInputProps, isDragActive, open } = useDropzone(Object.assign(Object.assign({ multiple: true }, dropzoneProps), { onDropAccepted }));
      const rootProps = getRootProps(Object.assign(Object.assign({}, props), {
        onClick: (event) => event.stopPropagation()
        // Prevents clicking TextArea from opening file dialog
      }));
      return React230.createElement(
        MultipleFileUploadContext.Provider,
        { value: { open } },
        React230.createElement(
          "div",
          Object.assign({ className: css(multiple_file_upload_default.multipleFileUpload, isDragActive && multiple_file_upload_default.modifiers.dragOver, isHorizontal && multiple_file_upload_default.modifiers.horizontal, className) }, rootProps, props),
          React230.createElement("input", Object.assign({}, getInputProps())),
          children
        )
      );
    };
    MultipleFileUpload.displayName = "MultipleFileUpload";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleIcon.js
var React231, MultipleFileUploadTitleIcon;
var init_MultipleFileUploadTitleIcon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleIcon.js"() {
    init_tslib_es6();
    React231 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    MultipleFileUploadTitleIcon = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React231.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleIcon, className) }, props), children);
    };
    MultipleFileUploadTitleIcon.displayName = "MultipleFileUploadTitleIcon";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleText.js
var React232, MultipleFileUploadTitleText;
var init_MultipleFileUploadTitleText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleText.js"() {
    init_tslib_es6();
    React232 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    MultipleFileUploadTitleText = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React232.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleText, className) }, props), children);
    };
    MultipleFileUploadTitleText.displayName = "MultipleFileUploadTitleText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleTextSeparator.js
var React233, MultipleFileUploadTitleTextSeparator;
var init_MultipleFileUploadTitleTextSeparator = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleTextSeparator.js"() {
    init_tslib_es6();
    React233 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    MultipleFileUploadTitleTextSeparator = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React233.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleTextSeparator, className) }, props), children);
    };
    MultipleFileUploadTitleTextSeparator.displayName = "MultipleFileUploadTitleTextSeparator";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitle.js
var React234, MultipleFileUploadTitle;
var init_MultipleFileUploadTitle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitle.js"() {
    init_tslib_es6();
    React234 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    init_MultipleFileUploadTitleIcon();
    init_MultipleFileUploadTitleText();
    init_MultipleFileUploadTitleTextSeparator();
    MultipleFileUploadTitle = (_a) => {
      var { className, icon, text = "", textSeparator = "" } = _a, props = __rest(_a, ["className", "icon", "text", "textSeparator"]);
      return React234.createElement(
        "div",
        Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitle, className) }, props),
        icon && React234.createElement(MultipleFileUploadTitleIcon, null, icon),
        text && React234.createElement(
          MultipleFileUploadTitleText,
          null,
          `${text} `,
          textSeparator && React234.createElement(MultipleFileUploadTitleTextSeparator, null, textSeparator)
        )
      );
    };
    MultipleFileUploadTitle.displayName = "MultipleFileUploadTitle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadButton.js
var React235, MultipleFileUploadButton;
var init_MultipleFileUploadButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadButton.js"() {
    init_tslib_es6();
    React235 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    init_MultipleFileUpload();
    init_Button2();
    MultipleFileUploadButton = (_a) => {
      var { className, "aria-label": ariaLabel, browseButtonText = "Upload" } = _a, props = __rest(_a, ["className", "aria-label", "browseButtonText"]);
      if (!ariaLabel && !browseButtonText) {
        console.warn("For accessibility reasons an aria-label should be specified on MultipleFileUploadButton if a browseButtonText isn't");
      }
      const { open } = React235.useContext(MultipleFileUploadContext);
      return React235.createElement(
        "div",
        Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadUpload, className) }, props),
        React235.createElement(Button, { variant: "secondary", "aria-label": ariaLabel, onClick: open }, browseButtonText)
      );
    };
    MultipleFileUploadButton.displayName = "MultipleFileUploadButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadInfo.js
var React236, MultipleFileUploadInfo;
var init_MultipleFileUploadInfo = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadInfo.js"() {
    init_tslib_es6();
    React236 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    MultipleFileUploadInfo = (_a) => {
      var { className, children } = _a, props = __rest(_a, ["className", "children"]);
      return React236.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadInfo, className) }, props), children);
    };
    MultipleFileUploadInfo.displayName = "MultipleFileUploadInfo";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadMain.js
var React237, MultipleFileUploadMain;
var init_MultipleFileUploadMain = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadMain.js"() {
    init_tslib_es6();
    React237 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    init_MultipleFileUploadTitle();
    init_MultipleFileUploadButton();
    init_MultipleFileUploadInfo();
    MultipleFileUploadMain = (_a) => {
      var { className, titleIcon, titleText, titleTextSeparator, infoText, isUploadButtonHidden, browseButtonText = "Upload" } = _a, props = __rest(_a, ["className", "titleIcon", "titleText", "titleTextSeparator", "infoText", "isUploadButtonHidden", "browseButtonText"]);
      const showTitle = !!titleIcon || !!titleText || !!titleTextSeparator;
      return React237.createElement(
        "div",
        Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadMain, className) }, props),
        showTitle && React237.createElement(MultipleFileUploadTitle, { icon: titleIcon, text: titleText, textSeparator: titleTextSeparator }),
        isUploadButtonHidden || React237.createElement(MultipleFileUploadButton, { browseButtonText }),
        !!infoText && React237.createElement(MultipleFileUploadInfo, null, infoText)
      );
    };
    MultipleFileUploadMain.displayName = "MultipleFileUploadMain";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/in-progress-icon.js
var InProgressIconConfig, InProgressIcon, in_progress_icon_default;
var init_in_progress_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/in-progress-icon.js"() {
    init_createIcon();
    InProgressIconConfig = {
      name: "InProgressIcon",
      height: 1024,
      width: 1024,
      svgPath: "M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663",
      yOffset: 0,
      xOffset: 0
    };
    InProgressIcon = createIcon(InProgressIconConfig);
    in_progress_icon_default = InProgressIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatus.js
var React238, MultipleFileUploadStatus;
var init_MultipleFileUploadStatus = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatus.js"() {
    init_tslib_es6();
    React238 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    init_ExpandableSection2();
    init_GenerateId();
    init_in_progress_icon();
    init_check_circle_icon();
    init_times_circle_icon();
    MultipleFileUploadStatus = (_a) => {
      var { children, className, statusToggleText, statusToggleIcon, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "statusToggleText", "statusToggleIcon", "aria-label"]);
      const [icon, setIcon] = React238.useState();
      const [isOpen, setIsOpen] = React238.useState(true);
      React238.useEffect(() => {
        switch (statusToggleIcon) {
          case "danger":
            setIcon(React238.createElement(times_circle_icon_default, null));
            break;
          case "success":
            setIcon(React238.createElement(check_circle_icon_default, null));
            break;
          case "inProgress":
            setIcon(React238.createElement(in_progress_icon_default, null));
            break;
          default:
            setIcon(statusToggleIcon);
        }
      }, [statusToggleIcon]);
      const toggle = React238.createElement(
        "div",
        { className: multiple_file_upload_default.multipleFileUploadStatusProgress },
        React238.createElement("div", { className: multiple_file_upload_default.multipleFileUploadStatusProgressIcon }, icon),
        React238.createElement("div", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressText }, statusToggleText)
      );
      const toggleExpandableSection = () => {
        setIsOpen(!isOpen);
      };
      return React238.createElement(
        "div",
        Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadStatus, className) }, props),
        React238.createElement(GenerateId, { prefix: "pf-expandable-section-" }, (expandableSectionId) => React238.createElement(
          ExpandableSection,
          { contentId: `${expandableSectionId}-content`, toggleId: `${expandableSectionId}-toggle`, toggleContent: toggle, isExpanded: isOpen, onToggle: toggleExpandableSection },
          React238.createElement("ul", { className: `${multiple_file_upload_default.multipleFileUploadStatus}-list`, role: "list", "aria-label": ariaLabel }, children)
        ))
      );
    };
    MultipleFileUploadStatus.displayName = "MultipleFileUploadStatus";
  }
});

// node_modules/@patternfly/react-styles/css/components/Progress/progress.css
var init_progress = __esm({
  "node_modules/@patternfly/react-styles/css/components/Progress/progress.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Progress/progress.mjs
var progress_default;
var init_progress2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Progress/progress.mjs"() {
    init_progress();
    progress_default = {
      "modifiers": {
        "sm": "pf-m-sm",
        "lg": "pf-m-lg",
        "inside": "pf-m-inside",
        "outside": "pf-m-outside",
        "staticWidth": "pf-m-static-width",
        "singleline": "pf-m-singleline",
        "success": "pf-m-success",
        "warning": "pf-m-warning",
        "danger": "pf-m-danger",
        "truncate": "pf-m-truncate"
      },
      "progress": "pf-v5-c-progress",
      "progressBar": "pf-v5-c-progress__bar",
      "progressDescription": "pf-v5-c-progress__description",
      "progressHelperText": "pf-v5-c-progress__helper-text",
      "progressIndicator": "pf-v5-c-progress__indicator",
      "progressMeasure": "pf-v5-c-progress__measure",
      "progressStatus": "pf-v5-c-progress__status",
      "progressStatusIcon": "pf-v5-c-progress__status-icon",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressBar.js
var React239, ProgressBar;
var init_ProgressBar = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressBar.js"() {
    init_tslib_es6();
    React239 = __toESM(require_react());
    init_progress2();
    init_esm();
    ProgressBar = (_a) => {
      var { progressBarAriaProps, className = "", children = null, value } = _a, props = __rest(_a, ["progressBarAriaProps", "className", "children", "value"]);
      return React239.createElement(
        "div",
        Object.assign({}, props, { className: css(progress_default.progressBar, className) }, progressBarAriaProps),
        React239.createElement(
          "div",
          { className: css(progress_default.progressIndicator), style: { width: `${value}%` } },
          React239.createElement("span", { className: css(progress_default.progressMeasure) }, children)
        )
      );
    };
    ProgressBar.displayName = "ProgressBar";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressHelperText.js
var React240, ProgressHelperText;
var init_ProgressHelperText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressHelperText.js"() {
    init_tslib_es6();
    React240 = __toESM(require_react());
    init_progress2();
    ProgressHelperText = (_a) => {
      var { children } = _a, props = __rest(_a, ["children"]);
      return React240.createElement("div", Object.assign({ className: progress_default.progressHelperText }, props), children);
    };
    ProgressHelperText.displayName = "ProgressHelperText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressContainer.js
var React241, ProgressMeasureLocation, ProgressVariant, variantToIcon, ProgressContainer;
var init_ProgressContainer = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressContainer.js"() {
    React241 = __toESM(require_react());
    init_progress2();
    init_esm();
    init_Tooltip2();
    init_check_circle_icon();
    init_times_circle_icon();
    init_exclamation_triangle_icon();
    init_ProgressBar();
    init_ProgressHelperText();
    (function(ProgressMeasureLocation2) {
      ProgressMeasureLocation2["outside"] = "outside";
      ProgressMeasureLocation2["inside"] = "inside";
      ProgressMeasureLocation2["top"] = "top";
      ProgressMeasureLocation2["none"] = "none";
    })(ProgressMeasureLocation || (ProgressMeasureLocation = {}));
    (function(ProgressVariant2) {
      ProgressVariant2["danger"] = "danger";
      ProgressVariant2["success"] = "success";
      ProgressVariant2["warning"] = "warning";
    })(ProgressVariant || (ProgressVariant = {}));
    variantToIcon = {
      danger: times_circle_icon_default,
      success: check_circle_icon_default,
      warning: exclamation_triangle_icon_default
    };
    ProgressContainer = ({ progressBarAriaProps, value, title = "", parentId, label = null, variant = null, measureLocation = ProgressMeasureLocation.top, isTitleTruncated = false, tooltipPosition, helperText }) => {
      const StatusIcon = variantToIcon.hasOwnProperty(variant) && variantToIcon[variant];
      const [tooltip, setTooltip] = React241.useState("");
      const onMouseEnter = (event) => {
        if (event.target.offsetWidth < event.target.scrollWidth) {
          setTooltip(title || event.target.innerHTML);
        } else {
          setTooltip("");
        }
      };
      const Title2 = React241.createElement("div", { className: css(progress_default.progressDescription, isTitleTruncated && typeof title === "string" && progress_default.modifiers.truncate), id: `${parentId}-description`, "aria-hidden": "true", onMouseEnter: isTitleTruncated && typeof title === "string" ? onMouseEnter : null }, title);
      return React241.createElement(
        React241.Fragment,
        null,
        title && (tooltip ? React241.createElement(Tooltip, { position: tooltipPosition, content: tooltip, isVisible: true }, Title2) : Title2),
        (measureLocation !== ProgressMeasureLocation.none || StatusIcon) && React241.createElement(
          "div",
          { className: css(progress_default.progressStatus), "aria-hidden": "true" },
          (measureLocation === ProgressMeasureLocation.top || measureLocation === ProgressMeasureLocation.outside) && React241.createElement("span", { className: css(progress_default.progressMeasure) }, label || `${value}%`),
          StatusIcon && React241.createElement(
            "span",
            { className: css(progress_default.progressStatusIcon) },
            React241.createElement(StatusIcon, null)
          )
        ),
        React241.createElement(ProgressBar, { role: "progressbar", progressBarAriaProps, value }, measureLocation === ProgressMeasureLocation.inside && `${value}%`),
        helperText && React241.createElement(ProgressHelperText, null, helperText)
      );
    };
    ProgressContainer.displayName = "ProgressContainer";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Progress/Progress.js
var React242, ProgressSize, Progress;
var init_Progress = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Progress/Progress.js"() {
    init_tslib_es6();
    React242 = __toESM(require_react());
    init_progress2();
    init_esm();
    init_ProgressContainer();
    init_util();
    (function(ProgressSize2) {
      ProgressSize2["sm"] = "sm";
      ProgressSize2["md"] = "md";
      ProgressSize2["lg"] = "lg";
    })(ProgressSize || (ProgressSize = {}));
    Progress = class extends React242.Component {
      constructor() {
        super(...arguments);
        this.id = this.props.id || getUniqueId();
      }
      render() {
        const _a = this.props, {
          /* eslint-disable @typescript-eslint/no-unused-vars */
          id,
          size,
          /* eslint-enable @typescript-eslint/no-unused-vars */
          className,
          value,
          title,
          label,
          variant,
          measureLocation,
          min,
          max,
          valueText,
          isTitleTruncated,
          tooltipPosition,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledBy,
          helperText
        } = _a, props = __rest(_a, ["id", "size", "className", "value", "title", "label", "variant", "measureLocation", "min", "max", "valueText", "isTitleTruncated", "tooltipPosition", "aria-label", "aria-labelledby", "helperText"]);
        const progressBarAriaProps = {
          "aria-valuemin": min,
          "aria-valuenow": value,
          "aria-valuemax": max
        };
        if (title || ariaLabelledBy) {
          progressBarAriaProps["aria-labelledby"] = title ? `${this.id}-description` : ariaLabelledBy;
        }
        if (ariaLabel) {
          progressBarAriaProps["aria-label"] = ariaLabel;
        }
        if (valueText) {
          progressBarAriaProps["aria-valuetext"] = valueText;
        }
        if (!title && !ariaLabelledBy && !ariaLabel) {
          console.warn("One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.");
        }
        const scaledValue = Math.min(100, Math.max(0, Math.floor((value - min) / (max - min) * 100))) || 0;
        return React242.createElement(
          "div",
          Object.assign({}, props, { className: css(progress_default.progress, progress_default.modifiers[variant], ["inside", "outside"].includes(measureLocation) && progress_default.modifiers[measureLocation], measureLocation === "inside" ? progress_default.modifiers[ProgressSize.lg] : progress_default.modifiers[size], !title && progress_default.modifiers.singleline, className), id: this.id }),
          React242.createElement(ProgressContainer, { parentId: this.id, value: scaledValue, title, label, variant, measureLocation, progressBarAriaProps, isTitleTruncated, tooltipPosition, helperText })
        );
      }
    };
    Progress.displayName = "Progress";
    Progress.defaultProps = {
      className: "",
      measureLocation: ProgressMeasureLocation.top,
      variant: null,
      id: "",
      title: "",
      min: 0,
      max: 100,
      size: null,
      label: null,
      value: 0,
      valueText: null,
      isTitleTruncated: false,
      tooltipPosition: "top",
      "aria-label": null,
      "aria-labelledby": null
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Progress/index.js
var init_Progress2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Progress/index.js"() {
    init_Progress();
    init_ProgressBar();
    init_ProgressContainer();
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/file-icon.js
var FileIconConfig, FileIcon, file_icon_default;
var init_file_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/file-icon.js"() {
    init_createIcon();
    FileIconConfig = {
      name: "FileIcon",
      height: 512,
      width: 384,
      svgPath: "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z",
      yOffset: 0,
      xOffset: 0
    };
    FileIcon = createIcon(FileIconConfig);
    file_icon_default = FileIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatusItem.js
var React243, MultipleFileUploadStatusItem;
var init_MultipleFileUploadStatusItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatusItem.js"() {
    init_tslib_es6();
    React243 = __toESM(require_react());
    init_multiple_file_upload2();
    init_esm();
    init_Progress2();
    init_Button2();
    init_file_icon();
    init_times_circle_icon();
    MultipleFileUploadStatusItem = (_a) => {
      var { className, file, fileIcon, onReadStarted = () => {
      }, onReadFinished = () => {
      }, onReadSuccess = () => {
      }, onReadFail = () => {
      }, onClearClick = () => {
      }, customFileHandler, fileName, fileSize, progressValue, progressVariant, progressAriaLabel, progressAriaLabelledBy, progressId, progressAriaLiveMessage, buttonAriaLabel = "Remove from list", progressHelperText } = _a, props = __rest(_a, ["className", "file", "fileIcon", "onReadStarted", "onReadFinished", "onReadSuccess", "onReadFail", "onClearClick", "customFileHandler", "fileName", "fileSize", "progressValue", "progressVariant", "progressAriaLabel", "progressAriaLabelledBy", "progressId", "progressAriaLiveMessage", "buttonAriaLabel", "progressHelperText"]);
      const [loadPercentage, setLoadPercentage] = React243.useState(0);
      const [loadResult, setLoadResult] = React243.useState();
      function readFile2(file2) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = () => reject(reader.error);
          reader.onprogress = (data) => {
            if (data.lengthComputable) {
              setLoadPercentage(data.loaded / data.total * 100);
            }
          };
          reader.readAsDataURL(file2);
        });
      }
      React243.useEffect(() => {
        if (customFileHandler) {
          customFileHandler(file);
        } else {
          onReadStarted(file);
          readFile2(file).then((data) => {
            setLoadResult("success");
            setLoadPercentage(100);
            onReadFinished(file);
            onReadSuccess(data, file);
          }).catch((error) => {
            onReadFinished(file);
            onReadFail(error, file);
            setLoadResult("danger");
          });
        }
      }, []);
      const getHumanReadableFileSize = (size) => {
        const prefixes = ["", "K", "M", "G", "T"];
        let prefixUnit = 0;
        while (size >= 1e3) {
          prefixUnit += 1;
          size = size / 1e3;
        }
        if (prefixUnit >= prefixes.length) {
          return "File size too large";
        }
        return `${Math.round(size)}${prefixes[prefixUnit]}B`;
      };
      const value = progressValue || loadPercentage;
      const variant = progressVariant || loadResult;
      const title = React243.createElement(
        "span",
        { className: multiple_file_upload_default.multipleFileUploadStatusItemProgress },
        React243.createElement("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressText }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ""),
        React243.createElement("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressSize }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0))
      );
      return React243.createElement(
        "li",
        Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadStatusItem, className) }, props),
        React243.createElement("div", { className: multiple_file_upload_default.multipleFileUploadStatusItemIcon }, fileIcon || React243.createElement(file_icon_default, null)),
        React243.createElement(
          "div",
          { className: multiple_file_upload_default.multipleFileUploadStatusItemMain },
          React243.createElement(
            "div",
            { className: "pf-v5-screen-reader", "aria-live": "polite" },
            progressAriaLiveMessage && typeof progressAriaLiveMessage === "function" && progressAriaLiveMessage(+loadPercentage.toFixed(2)),
            progressAriaLiveMessage && typeof progressAriaLiveMessage === "string" && progressAriaLiveMessage,
            !progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`
          ),
          React243.createElement(Progress, { title, value, variant, "aria-label": progressAriaLabel, "aria-labelledby": progressAriaLabelledBy, id: progressId, helperText: progressHelperText })
        ),
        React243.createElement(
          "div",
          { className: multiple_file_upload_default.multipleFileUploadStatusItemClose },
          React243.createElement(
            Button,
            { variant: "plain", "aria-label": buttonAriaLabel, onClick: onClearClick },
            React243.createElement(times_circle_icon_default, null)
          )
        )
      );
    };
    MultipleFileUploadStatusItem.displayName = "MultipleFileUploadStatusItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/index.js
var init_MultipleFileUpload2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/index.js"() {
    init_MultipleFileUpload();
    init_MultipleFileUploadMain();
    init_MultipleFileUploadStatus();
    init_MultipleFileUploadStatusItem();
  }
});

// node_modules/@patternfly/react-styles/css/components/Nav/nav.css
var init_nav = __esm({
  "node_modules/@patternfly/react-styles/css/components/Nav/nav.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Nav/nav.mjs
var nav_default;
var init_nav2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Nav/nav.mjs"() {
    init_nav();
    nav_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "divider": "pf-v5-c-divider",
      "menu": "pf-v5-c-menu",
      "menuContent": "pf-v5-c-menu__content",
      "menuItem": "pf-v5-c-menu__item",
      "menuItemToggleIcon": "pf-v5-c-menu__item-toggle-icon",
      "menuListItem": "pf-v5-c-menu__list-item",
      "modifiers": {
        "flyout": "pf-m-flyout",
        "top": "pf-m-top",
        "left": "pf-m-left",
        "current": "pf-m-current",
        "drillUp": "pf-m-drill-up",
        "horizontal": "pf-m-horizontal",
        "tertiary": "pf-m-tertiary",
        "horizontalSubnav": "pf-m-horizontal-subnav",
        "light": "pf-m-light",
        "scrollable": "pf-m-scrollable",
        "overflowHidden": "pf-m-overflow-hidden",
        "expandable": "pf-m-expandable",
        "expanded": "pf-m-expanded",
        "drilldown": "pf-m-drilldown",
        "hover": "pf-m-hover",
        "start": "pf-m-start"
      },
      "nav": "pf-v5-c-nav",
      "navItem": "pf-v5-c-nav__item",
      "navLink": "pf-v5-c-nav__link",
      "navList": "pf-v5-c-nav__list",
      "navScrollButton": "pf-v5-c-nav__scroll-button",
      "navSection": "pf-v5-c-nav__section",
      "navSectionTitle": "pf-v5-c-nav__section-title",
      "navSubnav": "pf-v5-c-nav__subnav",
      "navToggle": "pf-v5-c-nav__toggle",
      "navToggleIcon": "pf-v5-c-nav__toggle-icon",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
var React244, navContextDefaults, NavContext, Nav;
var init_Nav = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js"() {
    init_tslib_es6();
    React244 = __toESM(require_react());
    init_nav2();
    init_esm();
    init_helpers();
    navContextDefaults = {};
    NavContext = React244.createContext(navContextDefaults);
    Nav = class _Nav extends React244.Component {
      constructor() {
        super(...arguments);
        this.state = {
          isScrollable: false,
          ouiaStateId: getDefaultOUIAId(_Nav.displayName, this.props.variant),
          flyoutRef: null
        };
        this.navRef = React244.createRef();
      }
      // Callback from NavItem
      onSelect(event, groupId, itemId, to, preventDefault, onClick) {
        if (preventDefault) {
          event.preventDefault();
        }
        this.props.onSelect(event, { groupId, itemId, to });
        if (onClick) {
          onClick(event, itemId, groupId, to);
        }
      }
      // Callback from NavExpandable
      onToggle(event, groupId, toggleValue) {
        this.props.onToggle(event, {
          groupId,
          isExpanded: toggleValue
        });
      }
      render() {
        const _a = this.props, {
          "aria-label": ariaLabel,
          children,
          className,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onSelect,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onToggle,
          theme,
          ouiaId,
          ouiaSafe,
          variant
        } = _a, props = __rest(_a, ["aria-label", "children", "className", "onSelect", "onToggle", "theme", "ouiaId", "ouiaSafe", "variant"]);
        const isHorizontal = ["horizontal", "tertiary"].includes(variant);
        return React244.createElement(
          NavContext.Provider,
          { value: {
            onSelect: (event, groupId, itemId, to, preventDefault, onClick) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),
            onToggle: (event, groupId, expanded) => this.onToggle(event, groupId, expanded),
            updateIsScrollable: (isScrollable) => this.setState({ isScrollable }),
            isHorizontal: ["horizontal", "tertiary", "horizontal-subnav"].includes(variant),
            flyoutRef: this.state.flyoutRef,
            setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
            navRef: this.navRef
          } },
          React244.createElement("nav", Object.assign({ className: css(nav_default.nav, theme === "light" && nav_default.modifiers.light, isHorizontal && nav_default.modifiers.horizontal, variant === "tertiary" && nav_default.modifiers.tertiary, variant === "horizontal-subnav" && nav_default.modifiers.horizontalSubnav, this.state.isScrollable && nav_default.modifiers.scrollable, className), "aria-label": ariaLabel || (["tertiary", "horizontal-subnav"].includes(variant) ? "Local" : "Global"), ref: this.navRef }, getOUIAProps(_Nav.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
        );
      }
    };
    Nav.displayName = "Nav";
    Nav.defaultProps = {
      onSelect: () => void 0,
      onToggle: () => void 0,
      theme: "dark",
      ouiaSafe: true
    };
  }
});

// node_modules/@patternfly/react-styles/css/components/Page/page.css
var init_page = __esm({
  "node_modules/@patternfly/react-styles/css/components/Page/page.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Page/page.mjs
var page_default;
var init_page2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Page/page.mjs"() {
    init_page();
    page_default = {
      "avatar": "pf-v5-c-avatar",
      "brand": "pf-v5-c-brand",
      "button": "pf-v5-c-button",
      "contextSelector": "pf-v5-c-context-selector",
      "dirRtl": "pf-v5-m-dir-rtl",
      "drawer": "pf-v5-c-drawer",
      "masthead": "pf-v5-c-masthead",
      "modifiers": {
        "light": "pf-m-light",
        "menu": "pf-m-menu",
        "hidden": "pf-m-hidden",
        "hiddenOnSm": "pf-m-hidden-on-sm",
        "visibleOnSm": "pf-m-visible-on-sm",
        "hiddenOnMd": "pf-m-hidden-on-md",
        "visibleOnMd": "pf-m-visible-on-md",
        "hiddenOnLg": "pf-m-hidden-on-lg",
        "visibleOnLg": "pf-m-visible-on-lg",
        "hiddenOnXl": "pf-m-hidden-on-xl",
        "visibleOnXl": "pf-m-visible-on-xl",
        "hiddenOn_2xl": "pf-m-hidden-on-2xl",
        "visibleOn_2xl": "pf-m-visible-on-2xl",
        "read": "pf-m-read",
        "selected": "pf-m-selected",
        "unread": "pf-m-unread",
        "attention": "pf-m-attention",
        "expanded": "pf-m-expanded",
        "collapsed": "pf-m-collapsed",
        "pageInsets": "pf-m-page-insets",
        "insetNone": "pf-m-inset-none",
        "fill": "pf-m-fill",
        "noFill": "pf-m-no-fill",
        "limitWidth": "pf-m-limit-width",
        "alignCenter": "pf-m-align-center",
        "overflowScroll": "pf-m-overflow-scroll",
        "shadowBottom": "pf-m-shadow-bottom",
        "shadowTop": "pf-m-shadow-top",
        "stickyTop": "pf-m-sticky-top",
        "stickyBottom": "pf-m-sticky-bottom",
        "stickyTopOnSmHeight": "pf-m-sticky-top-on-sm-height",
        "stickyBottomOnSmHeight": "pf-m-sticky-bottom-on-sm-height",
        "stickyTopOnMdHeight": "pf-m-sticky-top-on-md-height",
        "stickyBottomOnMdHeight": "pf-m-sticky-bottom-on-md-height",
        "stickyTopOnLgHeight": "pf-m-sticky-top-on-lg-height",
        "stickyBottomOnLgHeight": "pf-m-sticky-bottom-on-lg-height",
        "stickyTopOnXlHeight": "pf-m-sticky-top-on-xl-height",
        "stickyBottomOnXlHeight": "pf-m-sticky-bottom-on-xl-height",
        "stickyTopOn_2xlHeight": "pf-m-sticky-top-on-2xl-height",
        "stickyBottomOn_2xlHeight": "pf-m-sticky-bottom-on-2xl-height",
        "light_100": "pf-m-light-100",
        "dark_100": "pf-m-dark-100",
        "dark_200": "pf-m-dark-200",
        "padding": "pf-m-padding",
        "noPadding": "pf-m-no-padding",
        "paddingOnSm": "pf-m-padding-on-sm",
        "noPaddingOnSm": "pf-m-no-padding-on-sm",
        "paddingOnMd": "pf-m-padding-on-md",
        "noPaddingOnMd": "pf-m-no-padding-on-md",
        "paddingOnLg": "pf-m-padding-on-lg",
        "noPaddingOnLg": "pf-m-no-padding-on-lg",
        "paddingOnXl": "pf-m-padding-on-xl",
        "noPaddingOnXl": "pf-m-no-padding-on-xl",
        "paddingOn_2xl": "pf-m-padding-on-2xl",
        "noPaddingOn_2xl": "pf-m-no-padding-on-2xl",
        "light_200": "pf-m-light-200"
      },
      "nav": "pf-v5-c-nav",
      "notificationBadge": "pf-v5-c-notification-badge",
      "page": "pf-v5-c-page",
      "pageDrawer": "pf-v5-c-page__drawer",
      "pageHeader": "pf-v5-c-page__header",
      "pageHeaderBrand": "pf-v5-c-page__header-brand",
      "pageHeaderBrandLink": "pf-v5-c-page__header-brand-link",
      "pageHeaderBrandToggle": "pf-v5-c-page__header-brand-toggle",
      "pageHeaderNav": "pf-v5-c-page__header-nav",
      "pageHeaderTools": "pf-v5-c-page__header-tools",
      "pageHeaderToolsGroup": "pf-v5-c-page__header-tools-group",
      "pageHeaderToolsItem": "pf-v5-c-page__header-tools-item",
      "pageMain": "pf-v5-c-page__main",
      "pageMainBody": "pf-v5-c-page__main-body",
      "pageMainBreadcrumb": "pf-v5-c-page__main-breadcrumb",
      "pageMainDrawer": "pf-v5-c-page__main-drawer",
      "pageMainGroup": "pf-v5-c-page__main-group",
      "pageMainNav": "pf-v5-c-page__main-nav",
      "pageMainSection": "pf-v5-c-page__main-section",
      "pageMainSubnav": "pf-v5-c-page__main-subnav",
      "pageMainTabs": "pf-v5-c-page__main-tabs",
      "pageMainWizard": "pf-v5-c-page__main-wizard",
      "pageSidebar": "pf-v5-c-page__sidebar",
      "pageSidebarBody": "pf-v5-c-page__sidebar-body",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
var React245, pageSidebarContextDefaults, PageSidebarContext, PageSidebar;
var init_PageSidebar = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js"() {
    init_tslib_es6();
    React245 = __toESM(require_react());
    init_page2();
    init_esm();
    init_PageContext();
    pageSidebarContextDefaults = {
      isSidebarOpen: true
    };
    PageSidebarContext = React245.createContext(pageSidebarContextDefaults);
    PageSidebar = (_a) => {
      var { className = "", children, isSidebarOpen = true, theme = "dark", id = "page-sidebar" } = _a, props = __rest(_a, ["className", "children", "isSidebarOpen", "theme", "id"]);
      return React245.createElement(PageContextConsumer, null, ({ isManagedSidebar, isSidebarOpen: managedIsNavOpen }) => {
        const sidebarOpen = isManagedSidebar ? managedIsNavOpen : isSidebarOpen;
        return React245.createElement(
          "div",
          Object.assign({ id, className: css(page_default.pageSidebar, theme === "light" && page_default.modifiers.light, sidebarOpen && page_default.modifiers.expanded, !sidebarOpen && page_default.modifiers.collapsed, className), "aria-hidden": !sidebarOpen }, props),
          React245.createElement(PageSidebarContext.Provider, { value: { isSidebarOpen: sidebarOpen } }, children)
        );
      });
    };
    PageSidebar.displayName = "PageSidebar";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
var React246, NavList;
var init_NavList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js"() {
    init_tslib_es6();
    React246 = __toESM(require_react());
    init_nav2();
    init_esm();
    init_angle_left_icon();
    init_angle_right_icon();
    init_util();
    init_Nav();
    init_PageSidebar();
    init_resizeObserver();
    NavList = class extends React246.Component {
      constructor() {
        super(...arguments);
        this.direction = "ltr";
        this.state = {
          scrollViewAtStart: false,
          scrollViewAtEnd: false
        };
        this.navList = React246.createRef();
        this.observer = () => {
        };
        this.handleScrollButtons = () => {
          const container = this.navList.current;
          if (container) {
            const scrollViewAtStart = isElementInView(container, container.firstChild, false);
            const scrollViewAtEnd = isElementInView(container, container.lastChild, false);
            this.setState({
              scrollViewAtStart,
              scrollViewAtEnd
            });
            this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);
          }
        };
        this.scrollBack = () => {
          const container = this.navList.current;
          if (container) {
            const childrenArr = Array.from(container.children);
            let firstElementInView;
            let lastElementOutOfView;
            for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {
              if (isElementInView(container, childrenArr[i], false)) {
                firstElementInView = childrenArr[i];
                lastElementOutOfView = childrenArr[i - 1];
              }
            }
            if (lastElementOutOfView) {
              if (this.direction === "ltr") {
                container.scrollLeft -= lastElementOutOfView.scrollWidth;
              } else {
                container.scrollLeft += lastElementOutOfView.scrollWidth;
              }
            }
            this.handleScrollButtons();
          }
        };
        this.scrollForward = () => {
          const container = this.navList.current;
          if (container) {
            const childrenArr = Array.from(container.children);
            let lastElementInView;
            let firstElementOutOfView;
            for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
              if (isElementInView(container, childrenArr[i], false)) {
                lastElementInView = childrenArr[i];
                firstElementOutOfView = childrenArr[i + 1];
              }
            }
            if (firstElementOutOfView) {
              if (this.direction === "ltr") {
                container.scrollLeft += firstElementOutOfView.scrollWidth;
              } else {
                container.scrollLeft -= firstElementOutOfView.scrollWidth;
              }
            }
            this.handleScrollButtons();
          }
        };
      }
      componentDidMount() {
        this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons, true);
        this.direction = getLanguageDirection(this.navList.current);
        this.handleScrollButtons();
      }
      componentWillUnmount() {
        this.observer();
      }
      componentDidUpdate() {
        this.direction = getLanguageDirection(this.navList.current);
      }
      render() {
        const _a = this.props, { children, className, ariaLeftScroll, ariaRightScroll, backScrollAriaLabel, forwardScrollAriaLabel } = _a, props = __rest(_a, ["children", "className", "ariaLeftScroll", "ariaRightScroll", "backScrollAriaLabel", "forwardScrollAriaLabel"]);
        const { scrollViewAtStart, scrollViewAtEnd } = this.state;
        return React246.createElement(NavContext.Consumer, null, ({ isHorizontal }) => React246.createElement(PageSidebarContext.Consumer, null, ({ isSidebarOpen }) => React246.createElement(
          React246.Fragment,
          null,
          isHorizontal && React246.createElement(
            "button",
            { className: css(nav_default.navScrollButton), "aria-label": backScrollAriaLabel || ariaLeftScroll, onClick: this.scrollBack, disabled: scrollViewAtStart, tabIndex: isSidebarOpen ? null : -1 },
            React246.createElement(angle_left_icon_default, null)
          ),
          React246.createElement("ul", Object.assign({ ref: this.navList, className: css(nav_default.navList, className), onScroll: this.handleScrollButtons, role: "list" }, props), children),
          isHorizontal && React246.createElement(
            "button",
            { className: css(nav_default.navScrollButton), "aria-label": forwardScrollAriaLabel || ariaRightScroll, onClick: this.scrollForward, disabled: scrollViewAtEnd, tabIndex: isSidebarOpen ? null : -1 },
            React246.createElement(angle_right_icon_default, null)
          )
        )));
      }
    };
    NavList.displayName = "NavList";
    NavList.contextType = NavContext;
    NavList.defaultProps = {
      ariaLeftScroll: "Scroll left",
      backScrollAriaLabel: "Scroll back",
      ariaRightScroll: "Scroll right",
      forwardScrollAriaLabel: "Scroll foward"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavGroup.js
var React247, NavGroup;
var init_NavGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/NavGroup.js"() {
    init_tslib_es6();
    React247 = __toESM(require_react());
    init_nav2();
    init_esm();
    init_util();
    NavGroup = (_a) => {
      var { title, children = null, className = "", id = getUniqueId() } = _a, props = __rest(_a, ["title", "children", "className", "id"]);
      if (!title && !props["aria-label"]) {
        console.warn("For accessibility reasons an aria-label should be specified on nav groups if a title isn't");
      }
      const labelledBy = title ? id : void 0;
      return React247.createElement(
        "section",
        Object.assign({ className: css(nav_default.navSection, className), "aria-labelledby": labelledBy }, props),
        title && React247.createElement("h2", { className: css(nav_default.navSectionTitle), id }, title),
        React247.createElement("ul", { className: css(nav_default.navList, className), role: "list" }, children)
      );
    };
    NavGroup.displayName = "NavGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItem.js
var React248, NavItem;
var init_NavItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItem.js"() {
    init_tslib_es6();
    React248 = __toESM(require_react());
    init_nav2();
    init_esm();
    init_Nav();
    init_PageSidebar();
    init_helpers();
    init_Popper2();
    init_angle_right_icon();
    NavItem = (_a) => {
      var { children, styleChildren = true, className, to, isActive = false, groupId = null, itemId = null, preventDefault = false, onClick, component = "a", flyout, onShowFlyout, ouiaId, ouiaSafe, zIndex = 9999, hasNavLinkWrapper } = _a, props = __rest(_a, ["children", "styleChildren", "className", "to", "isActive", "groupId", "itemId", "preventDefault", "onClick", "component", "flyout", "onShowFlyout", "ouiaId", "ouiaSafe", "zIndex", "hasNavLinkWrapper"]);
      const { flyoutRef, setFlyoutRef, navRef } = React248.useContext(NavContext);
      const { isSidebarOpen } = React248.useContext(PageSidebarContext);
      const [flyoutTarget, setFlyoutTarget] = React248.useState(null);
      const [isHovered, setIsHovered] = React248.useState(false);
      const ref = React248.useRef();
      const flyoutVisible = ref === flyoutRef;
      const popperRef = React248.useRef();
      const hasFlyout = flyout !== void 0;
      const Component44 = hasFlyout ? "button" : component;
      if (to && hasFlyout) {
        console.error('NavItem cannot have both "to" and "flyout" props.');
      }
      const showFlyout = (show, override) => {
        if ((!flyoutVisible || override) && show) {
          setFlyoutRef(ref);
        } else if ((flyoutVisible || override) && !show) {
          setFlyoutRef(null);
        }
        onShowFlyout && show && onShowFlyout();
      };
      const onMouseOver = (event) => {
        const evtContainedInFlyout = event.target.closest(`.${nav_default.navItem}.pf-m-flyout`);
        if (hasFlyout && !flyoutVisible) {
          showFlyout(true);
        } else if (flyoutRef !== null && !evtContainedInFlyout) {
          setFlyoutRef(null);
        }
      };
      const onFlyoutClick = (event) => {
        const target = event.target;
        const closestItem = target.closest(".pf-m-flyout");
        if (!closestItem) {
          if (hasFlyout) {
            showFlyout(false, true);
          } else if (flyoutRef !== null) {
            setFlyoutRef(null);
          }
        }
      };
      const handleFlyout = (event) => {
        var _a2, _b;
        const key = event.key;
        const target = event.target;
        if ((key === " " || key === "Enter" || key === "ArrowRight") && hasFlyout && ((_a2 = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a2 === void 0 ? void 0 : _a2.contains(target))) {
          event.stopPropagation();
          event.preventDefault();
          if (!flyoutVisible) {
            showFlyout(true);
            setFlyoutTarget(target);
          }
        }
        if ((key === "Escape" || key === "ArrowLeft") && ((_b = popperRef === null || popperRef === void 0 ? void 0 : popperRef.current) === null || _b === void 0 ? void 0 : _b.querySelectorAll(`.${nav_default.menu}`).length) === 1) {
          if (flyoutVisible) {
            event.stopPropagation();
            event.preventDefault();
            showFlyout(false);
          }
        }
      };
      React248.useEffect(() => {
        if (hasFlyout) {
          window.addEventListener("click", onFlyoutClick);
        }
        return () => {
          if (hasFlyout) {
            window.removeEventListener("click", onFlyoutClick);
          }
        };
      }, []);
      React248.useEffect(() => {
        if (flyoutTarget) {
          if (flyoutVisible) {
            const flyoutItems = Array.from(popperRef.current.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(nav_default.divider)));
            flyoutItems[0].firstChild.focus();
          } else {
            flyoutTarget.focus();
          }
        }
      }, [flyoutVisible, flyoutTarget]);
      const flyoutButton = React248.createElement(
        "span",
        { className: css(nav_default.navToggle) },
        React248.createElement(
          "span",
          { className: css(nav_default.navToggleIcon) },
          React248.createElement(angle_right_icon_default, { "aria-hidden": true })
        )
      );
      const ariaFlyoutProps = {
        "aria-haspopup": "menu",
        "aria-expanded": flyoutVisible
      };
      const tabIndex = isSidebarOpen ? null : -1;
      const renderDefaultLink = (context) => {
        const preventLinkDefault = preventDefault || !to;
        return React248.createElement(
          Component44,
          Object.assign({ href: to, onClick: (e) => context.onSelect(e, groupId, itemId, to, preventLinkDefault, onClick), className: css(nav_default.navLink, isActive && nav_default.modifiers.current, isHovered && nav_default.modifiers.hover, className), "aria-current": isActive ? "page" : null, tabIndex }, hasFlyout && Object.assign({}, ariaFlyoutProps), props),
          hasNavLinkWrapper ? React248.createElement("span", { className: css(`${nav_default.nav}__link-text`) }, children) : children,
          flyout && flyoutButton
        );
      };
      const renderClonedChild = (context, child) => React248.cloneElement(child, Object.assign(Object.assign({ onClick: (e) => context.onSelect(e, groupId, itemId, to, preventDefault, onClick), "aria-current": isActive ? "page" : null }, styleChildren && {
        className: css(nav_default.navLink, isActive && nav_default.modifiers.current, child.props && child.props.className)
      }), { tabIndex: child.props.tabIndex || tabIndex, children: hasFlyout ? React248.createElement(
        React248.Fragment,
        null,
        child.props.children,
        flyoutButton
      ) : child.props.children }));
      const ouiaProps = useOUIAProps(NavItem.displayName, ouiaId, ouiaSafe);
      const handleMouseEnter = () => {
        setIsHovered(true);
      };
      const handleMouseLeave = () => {
        setIsHovered(false);
      };
      const flyoutPopper = React248.createElement(Popper, { triggerRef: ref, popper: React248.createElement("div", { ref: popperRef, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }, flyout), popperRef, placement: "right-start", isVisible: flyoutVisible, onDocumentKeyDown: handleFlyout, zIndex, appendTo: navRef === null || navRef === void 0 ? void 0 : navRef.current });
      const navItem = React248.createElement(
        React248.Fragment,
        null,
        React248.createElement(
          "li",
          Object.assign({ onMouseOver, className: css(nav_default.navItem, hasFlyout && nav_default.modifiers.flyout, className), ref }, ouiaProps),
          React248.createElement(NavContext.Consumer, null, (context) => React248.isValidElement(children) ? renderClonedChild(context, children) : renderDefaultLink(context))
        ),
        flyout && flyoutPopper
      );
      return navItem;
    };
    NavItem.displayName = "NavItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItemSeparator.js
var React249, NavItemSeparator;
var init_NavItemSeparator = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItemSeparator.js"() {
    init_tslib_es6();
    React249 = __toESM(require_react());
    init_Divider2();
    NavItemSeparator = (_a) => {
      var { component = "li" } = _a, props = __rest(_a, ["component"]);
      return React249.createElement(Divider, Object.assign({ component }, props));
    };
    NavItemSeparator.displayName = "NavItemSeparator";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavExpandable.js
var React250, NavExpandable;
var init_NavExpandable = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/NavExpandable.js"() {
    init_tslib_es6();
    React250 = __toESM(require_react());
    init_nav2();
    init_esm();
    init_angle_right_icon();
    init_util();
    init_Nav();
    init_PageSidebar();
    init_helpers();
    NavExpandable = class _NavExpandable extends React250.Component {
      constructor() {
        super(...arguments);
        this.id = this.props.id || getUniqueId();
        this.state = {
          expandedState: this.props.isExpanded,
          ouiaStateId: getDefaultOUIAId(_NavExpandable.displayName)
        };
        this.onExpand = (event, onToggle) => {
          const { expandedState } = this.state;
          if (this.props.onExpand) {
            this.props.onExpand(event, !expandedState);
          } else {
            this.setState((prevState) => ({ expandedState: !prevState.expandedState }));
            const { groupId } = this.props;
            onToggle(event, groupId, !expandedState);
          }
        };
      }
      componentDidMount() {
        this.setState({ expandedState: this.props.isExpanded });
      }
      componentDidUpdate(prevProps) {
        if (this.props.isExpanded !== prevProps.isExpanded) {
          this.setState({ expandedState: this.props.isExpanded });
        }
      }
      render() {
        const _a = this.props, {
          title,
          srText,
          children,
          className,
          isActive,
          ouiaId,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          groupId,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          id,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          isExpanded,
          buttonProps,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onExpand
        } = _a, props = __rest(_a, ["title", "srText", "children", "className", "isActive", "ouiaId", "groupId", "id", "isExpanded", "buttonProps", "onExpand"]);
        const { expandedState, ouiaStateId } = this.state;
        return React250.createElement(NavContext.Consumer, null, (context) => React250.createElement(
          "li",
          Object.assign({ className: css(nav_default.navItem, nav_default.modifiers.expandable, expandedState && nav_default.modifiers.expanded, isActive && nav_default.modifiers.current, className) }, getOUIAProps(_NavExpandable.displayName, ouiaId !== void 0 ? ouiaId : ouiaStateId), props),
          React250.createElement(PageSidebarContext.Consumer, null, ({ isSidebarOpen }) => React250.createElement(
            "button",
            Object.assign({ className: css(nav_default.navLink), id: srText ? null : this.id, onClick: (event) => this.onExpand(event, context.onToggle), "aria-expanded": expandedState, tabIndex: isSidebarOpen ? null : -1 }, buttonProps),
            typeof title !== "string" ? React250.createElement("span", { className: css(`${nav_default.nav}__link-text`) }, title) : title,
            React250.createElement(
              "span",
              { className: css(nav_default.navToggle) },
              React250.createElement(
                "span",
                { className: css(nav_default.navToggleIcon) },
                React250.createElement(angle_right_icon_default, { "aria-hidden": "true" })
              )
            )
          )),
          React250.createElement(
            "section",
            { className: css(nav_default.navSubnav), "aria-labelledby": this.id, hidden: expandedState ? null : true },
            srText && React250.createElement("h2", { className: "pf-v5-screen-reader", id: this.id }, srText),
            React250.createElement("ul", { className: css(nav_default.navList), role: "list" }, children)
          )
        ));
      }
    };
    NavExpandable.displayName = "NavExpandable";
    NavExpandable.defaultProps = {
      srText: "",
      isExpanded: false,
      children: "",
      className: "",
      groupId: null,
      isActive: false,
      id: ""
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Nav/index.js
var init_Nav2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Nav/index.js"() {
    init_Nav();
    init_NavList();
    init_NavGroup();
    init_NavItem();
    init_NavItemSeparator();
    init_NavExpandable();
  }
});

// node_modules/@patternfly/react-styles/css/components/NotificationBadge/notification-badge.css
var init_notification_badge = __esm({
  "node_modules/@patternfly/react-styles/css/components/NotificationBadge/notification-badge.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/NotificationBadge/notification-badge.mjs
var notification_badge_default;
var init_notification_badge2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/NotificationBadge/notification-badge.mjs"() {
    init_notification_badge();
    notification_badge_default = {
      "iconAttentionBell": "pf-v5-c-icon-attention-bell",
      "iconBell": "pf-v5-c-icon-bell",
      "modifiers": {
        "read": "pf-m-read",
        "unread": "pf-m-unread",
        "attention": "pf-m-attention",
        "expanded": "pf-m-expanded"
      },
      "notificationBadge": "pf-v5-c-notification-badge",
      "notificationBadgeCount": "pf-v5-c-notification-badge__count",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/attention-bell-icon.js
var AttentionBellIconConfig, AttentionBellIcon, attention_bell_icon_default;
var init_attention_bell_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/attention-bell-icon.js"() {
    init_createIcon();
    AttentionBellIconConfig = {
      name: "AttentionBellIcon",
      height: 1024,
      width: 896,
      svgPath: "M448,0 C465.333333,0 480.333333,6.33333333 493,19 C505.666667,31.6666667 512,46.6666667 512,64 L512,106 L514.23,106.45 C587.89,121.39 648.48,157.24 696,214 C744,271.333333 768,338.666667 768,416 C768,500 780,568.666667 804,622 C818.666667,652.666667 841.333333,684 872,716 C873.773676,718.829136 875.780658,721.505113 878,724 C890,737.333333 896,752.333333 896,769 C896,785.666667 890,800.333333 878,813 C866,825.666667 850.666667,832 832,832 L63.3,832 C44.9533333,831.84 29.8533333,825.506667 18,813 C6,800.333333 0,785.666667 0,769 C0,752.333333 6,737.333333 18,724 L24,716 L25.06,714.9 C55.1933333,683.28 77.5066667,652.313333 92,622 C116,568.666667 128,500 128,416 C128,338.666667 152,271.333333 200,214 C248,156.666667 309.333333,120.666667 384,106 L384,63.31 C384.166667,46.27 390.5,31.5 403,19 C415.666667,6.33333333 430.666667,0 448,0 Z M576,896 L576,897.08 C575.74,932.6 563.073333,962.573333 538,987 C512.666667,1011.66667 482.666667,1024 448,1024 C413.333333,1024 383.333333,1011.66667 358,987 C332.666667,962.333333 320,932 320,896 L576,896 Z M475,192 L421,192 C400.565464,192 384,208.565464 384,229 L384,539 C384,559.434536 400.565464,576 421,576 L475,576 C495.434536,576 512,559.434536 512,539 L512,229 C512,208.565464 495.434536,192 475,192 Z M448,640 C412.653776,640 384,668.653776 384,704 C384,739.346224 412.653776,768 448,768 C483.346224,768 512,739.346224 512,704 C512,668.653776 483.346224,640 448,640 Z",
      yOffset: 0,
      xOffset: 0
    };
    AttentionBellIcon = createIcon(AttentionBellIconConfig);
    attention_bell_icon_default = AttentionBellIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/NotificationBadge.js
var React251, NotificationBadgeVariant, NotificationBadge;
var init_NotificationBadge = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/NotificationBadge.js"() {
    init_tslib_es6();
    React251 = __toESM(require_react());
    init_Button2();
    init_esm();
    init_notification_badge2();
    init_attention_bell_icon();
    init_bell_icon();
    (function(NotificationBadgeVariant2) {
      NotificationBadgeVariant2["read"] = "read";
      NotificationBadgeVariant2["unread"] = "unread";
      NotificationBadgeVariant2["attention"] = "attention";
    })(NotificationBadgeVariant || (NotificationBadgeVariant = {}));
    NotificationBadge = (_a) => {
      var { children, variant = NotificationBadgeVariant.read, count = 0, attentionIcon = React251.createElement(attention_bell_icon_default, null), icon = React251.createElement(bell_icon_default, null), className, isExpanded = false } = _a, props = __rest(_a, ["children", "variant", "count", "attentionIcon", "icon", "className", "isExpanded"]);
      let notificationChild = icon;
      if (children !== void 0) {
        notificationChild = children;
      } else if (variant === NotificationBadgeVariant.attention) {
        notificationChild = attentionIcon;
      }
      return React251.createElement(
        Button,
        Object.assign({ variant: ButtonVariant.plain, className, "aria-expanded": isExpanded }, props),
        React251.createElement(
          "span",
          { className: css(notification_badge_default.notificationBadge, notification_badge_default.modifiers[variant], isExpanded && notification_badge_default.modifiers.expanded) },
          notificationChild,
          count > 0 && React251.createElement("span", { className: css(notification_badge_default.notificationBadgeCount) }, count)
        )
      );
    };
    NotificationBadge.displayName = "NotificationBadge";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/index.js
var init_NotificationBadge2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/index.js"() {
    init_NotificationBadge();
  }
});

// node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.css
var init_notification_drawer = __esm({
  "node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.mjs
var notification_drawer_default;
var init_notification_drawer2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.mjs"() {
    init_notification_drawer();
    notification_drawer_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "read": "pf-m-read",
        "info": "pf-m-info",
        "warning": "pf-m-warning",
        "danger": "pf-m-danger",
        "success": "pf-m-success",
        "custom": "pf-m-custom",
        "hoverable": "pf-m-hoverable",
        "truncate": "pf-m-truncate",
        "expanded": "pf-m-expanded"
      },
      "notificationDrawer": "pf-v5-c-notification-drawer",
      "notificationDrawerBody": "pf-v5-c-notification-drawer__body",
      "notificationDrawerGroup": "pf-v5-c-notification-drawer__group",
      "notificationDrawerGroupList": "pf-v5-c-notification-drawer__group-list",
      "notificationDrawerGroupToggle": "pf-v5-c-notification-drawer__group-toggle",
      "notificationDrawerGroupToggleCount": "pf-v5-c-notification-drawer__group-toggle-count",
      "notificationDrawerGroupToggleIcon": "pf-v5-c-notification-drawer__group-toggle-icon",
      "notificationDrawerGroupToggleTitle": "pf-v5-c-notification-drawer__group-toggle-title",
      "notificationDrawerHeader": "pf-v5-c-notification-drawer__header",
      "notificationDrawerHeaderAction": "pf-v5-c-notification-drawer__header-action",
      "notificationDrawerHeaderStatus": "pf-v5-c-notification-drawer__header-status",
      "notificationDrawerHeaderTitle": "pf-v5-c-notification-drawer__header-title",
      "notificationDrawerListItem": "pf-v5-c-notification-drawer__list-item",
      "notificationDrawerListItemAction": "pf-v5-c-notification-drawer__list-item-action",
      "notificationDrawerListItemDescription": "pf-v5-c-notification-drawer__list-item-description",
      "notificationDrawerListItemHeader": "pf-v5-c-notification-drawer__list-item-header",
      "notificationDrawerListItemHeaderIcon": "pf-v5-c-notification-drawer__list-item-header-icon",
      "notificationDrawerListItemHeaderTitle": "pf-v5-c-notification-drawer__list-item-header-title",
      "notificationDrawerListItemTimestamp": "pf-v5-c-notification-drawer__list-item-timestamp",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawer.js
var React252, NotificationDrawerBase, NotificationDrawer;
var init_NotificationDrawer = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawer.js"() {
    init_tslib_es6();
    React252 = __toESM(require_react());
    init_notification_drawer2();
    init_esm();
    NotificationDrawerBase = (_a) => {
      var { children, className = "", innerRef } = _a, props = __rest(_a, ["children", "className", "innerRef"]);
      return React252.createElement("div", Object.assign({ ref: innerRef }, props, { className: css(notification_drawer_default.notificationDrawer, className) }), children);
    };
    NotificationDrawer = React252.forwardRef((props, ref) => React252.createElement(NotificationDrawerBase, Object.assign({ innerRef: ref }, props)));
    NotificationDrawer.displayName = "NotificationDrawer";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerBody.js
var React253, NotificationDrawerBody;
var init_NotificationDrawerBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerBody.js"() {
    init_tslib_es6();
    React253 = __toESM(require_react());
    init_notification_drawer2();
    init_esm();
    NotificationDrawerBody = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React253.createElement("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerBody, className) }), children);
    };
    NotificationDrawerBody.displayName = "NotificationDrawerBody";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines.js
var c_notification_drawer__group_toggle_title_max_lines, c_notification_drawer_group_toggle_title_max_lines_default;
var init_c_notification_drawer_group_toggle_title_max_lines = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines.js"() {
    c_notification_drawer__group_toggle_title_max_lines = {
      "name": "--pf-v5-c-notification-drawer__group-toggle-title--max-lines",
      "value": "1",
      "var": "var(--pf-v5-c-notification-drawer__group-toggle-title--max-lines)"
    };
    c_notification_drawer_group_toggle_title_max_lines_default = c_notification_drawer__group_toggle_title_max_lines;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroup.js
var React254, NotificationDrawerGroup;
var init_NotificationDrawerGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroup.js"() {
    init_tslib_es6();
    React254 = __toESM(require_react());
    init_angle_right_icon();
    init_esm();
    init_notification_drawer2();
    init_c_notification_drawer_group_toggle_title_max_lines();
    init_Badge2();
    init_Tooltip2();
    NotificationDrawerGroup = (_a) => {
      var {
        children,
        className = "",
        count,
        isExpanded,
        isRead = false,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onExpand = (event, expanded) => void 0,
        title,
        truncateTitle = 0,
        tooltipPosition,
        headingLevel: HeadingLevel = "h1"
      } = _a, props = __rest(_a, ["children", "className", "count", "isExpanded", "isRead", "onExpand", "title", "truncateTitle", "tooltipPosition", "headingLevel"]);
      const titleRef = React254.useRef(null);
      const [isTooltipVisible, setIsTooltipVisible] = React254.useState(false);
      React254.useEffect(() => {
        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
        if (isTooltipVisible !== showTooltip) {
          setIsTooltipVisible(showTooltip);
        }
        if (!titleRef.current || !truncateTitle) {
          return;
        }
        titleRef.current.style.setProperty(c_notification_drawer_group_toggle_title_max_lines_default.name, truncateTitle.toString());
      }, [titleRef, truncateTitle, isTooltipVisible]);
      const Title2 = React254.createElement("div", Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(notification_drawer_default.notificationDrawerGroupToggleTitle) }), title);
      return React254.createElement(
        "section",
        Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerGroup, isExpanded && notification_drawer_default.modifiers.expanded, className) }),
        React254.createElement(
          HeadingLevel,
          null,
          React254.createElement(
            "button",
            { className: css(notification_drawer_default.notificationDrawerGroupToggle), "aria-expanded": isExpanded, onClick: (e) => onExpand(e, !isExpanded), onKeyDown: (e) => {
              if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                onExpand(e, !isExpanded);
              }
            } },
            isTooltipVisible ? React254.createElement(Tooltip, { content: title, position: tooltipPosition }, Title2) : Title2,
            React254.createElement(
              "div",
              { className: css(notification_drawer_default.notificationDrawerGroupToggleCount) },
              React254.createElement(Badge, { isRead }, count)
            ),
            React254.createElement(
              "span",
              { className: notification_drawer_default.notificationDrawerGroupToggleIcon },
              React254.createElement(angle_right_icon_default, null)
            )
          )
        ),
        children
      );
    };
    NotificationDrawerGroup.displayName = "NotificationDrawerGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroupList.js
var React255, NotificationDrawerGroupList;
var init_NotificationDrawerGroupList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroupList.js"() {
    init_tslib_es6();
    React255 = __toESM(require_react());
    init_esm();
    init_notification_drawer2();
    NotificationDrawerGroupList = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React255.createElement("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerGroupList, className) }), children);
    };
    NotificationDrawerGroupList.displayName = "NotificationDrawerGroupList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Text/TextContent.js
var React256, TextContent;
var init_TextContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Text/TextContent.js"() {
    init_tslib_es6();
    React256 = __toESM(require_react());
    init_content2();
    init_esm();
    TextContent = (_a) => {
      var { children, className = "", isVisited = false } = _a, props = __rest(_a, ["children", "className", "isVisited"]);
      return React256.createElement("div", Object.assign({}, props, { className: css(content_default.content, isVisited && content_default.modifiers.visited, className) }), children);
    };
    TextContent.displayName = "TextContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Text/Text.js
var React257, TextVariants, Text;
var init_Text = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Text/Text.js"() {
    init_tslib_es6();
    React257 = __toESM(require_react());
    init_esm();
    init_content2();
    init_helpers();
    (function(TextVariants2) {
      TextVariants2["h1"] = "h1";
      TextVariants2["h2"] = "h2";
      TextVariants2["h3"] = "h3";
      TextVariants2["h4"] = "h4";
      TextVariants2["h5"] = "h5";
      TextVariants2["h6"] = "h6";
      TextVariants2["p"] = "p";
      TextVariants2["a"] = "a";
      TextVariants2["small"] = "small";
      TextVariants2["blockquote"] = "blockquote";
      TextVariants2["pre"] = "pre";
    })(TextVariants || (TextVariants = {}));
    Text = (_a) => {
      var { children = null, className = "", component = TextVariants.p, isVisitedLink = false, ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["children", "className", "component", "isVisitedLink", "ouiaId", "ouiaSafe"]);
      const Component44 = component;
      const ouiaProps = useOUIAProps(Text.displayName, ouiaId, ouiaSafe);
      return React257.createElement(Component44, Object.assign({}, ouiaProps, props, { "data-pf-content": true, className: css(isVisitedLink && component === TextVariants.a && content_default.modifiers.visited, className) }), children);
    };
    Text.displayName = "Text";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js
var React258, TextListVariants, TextList;
var init_TextList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js"() {
    init_tslib_es6();
    React258 = __toESM(require_react());
    init_content2();
    init_esm();
    (function(TextListVariants2) {
      TextListVariants2["ul"] = "ul";
      TextListVariants2["ol"] = "ol";
      TextListVariants2["dl"] = "dl";
    })(TextListVariants || (TextListVariants = {}));
    TextList = (_a) => {
      var { children = null, className = "", component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, ["children", "className", "component", "isPlain"]);
      const Component44 = component;
      return React258.createElement(Component44, Object.assign({}, props, { className: css(isPlain && content_default.modifiers.plain, className) }), children);
    };
    TextList.displayName = "TextList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js
var React259, TextListItemVariants, TextListItem;
var init_TextListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js"() {
    init_tslib_es6();
    React259 = __toESM(require_react());
    init_esm();
    (function(TextListItemVariants2) {
      TextListItemVariants2["li"] = "li";
      TextListItemVariants2["dt"] = "dt";
      TextListItemVariants2["dd"] = "dd";
    })(TextListItemVariants || (TextListItemVariants = {}));
    TextListItem = (_a) => {
      var { children = null, className = "", component = TextListItemVariants.li } = _a, props = __rest(_a, ["children", "className", "component"]);
      const Component44 = component;
      return React259.createElement(Component44, Object.assign({}, props, { className: css(className) }), children);
    };
    TextListItem.displayName = "TextListItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Text/index.js
var init_Text2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Text/index.js"() {
    init_TextContent();
    init_Text();
    init_TextList();
    init_TextListItem();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerHeader.js
var React260, NotificationDrawerHeader;
var init_NotificationDrawerHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerHeader.js"() {
    init_tslib_es6();
    React260 = __toESM(require_react());
    init_esm();
    init_notification_drawer2();
    init_times_icon();
    init_Text2();
    init_Button2();
    NotificationDrawerHeader = (_a) => {
      var { children, className = "", count, closeButtonAriaLabel = "Close", customText, onClose, title = "Notifications", unreadText = "unread" } = _a, props = __rest(_a, ["children", "className", "count", "closeButtonAriaLabel", "customText", "onClose", "title", "unreadText"]);
      return React260.createElement(
        "div",
        Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerHeader, className) }),
        React260.createElement(Text, { component: TextVariants.h1, className: css(notification_drawer_default.notificationDrawerHeaderTitle) }, title),
        (customText !== void 0 || count !== void 0) && React260.createElement("span", { className: css(notification_drawer_default.notificationDrawerHeaderStatus), "aria-live": "polite" }, customText || `${count} ${unreadText}`),
        (children || onClose) && React260.createElement(
          "div",
          { className: css(notification_drawer_default.notificationDrawerHeaderAction) },
          children,
          onClose && React260.createElement(
            "div",
            null,
            React260.createElement(
              Button,
              { variant: ButtonVariant.plain, "aria-label": closeButtonAriaLabel, onClick: (event) => onClose(event) },
              React260.createElement(times_icon_default, { "aria-hidden": "true" })
            )
          )
        )
      );
    };
    NotificationDrawerHeader.displayName = "NotificationDrawerHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerList.js
var React261, NotificationDrawerList;
var init_NotificationDrawerList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerList.js"() {
    init_tslib_es6();
    React261 = __toESM(require_react());
    init_esm();
    init_notification_drawer2();
    NotificationDrawerList = (_a) => {
      var { children, className = "", isHidden: isHidden3 = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isHidden", "aria-label"]);
      return React261.createElement("ul", Object.assign({}, props, { className: css(`${notification_drawer_default.notificationDrawer}__list`, className), hidden: isHidden3, role: "list", "aria-label": ariaLabel }), children);
    };
    NotificationDrawerList.displayName = "NotificationDrawerList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItem.js
var React262, NotificationDrawerListItem;
var init_NotificationDrawerListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItem.js"() {
    init_tslib_es6();
    React262 = __toESM(require_react());
    init_esm();
    init_notification_drawer2();
    NotificationDrawerListItem = (_a) => {
      var {
        children = null,
        className = "",
        isHoverable = true,
        isRead = false,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onClick = (event) => void 0,
        readStateScreenReaderText,
        tabIndex = 0,
        variant = "custom"
      } = _a, props = __rest(_a, ["children", "className", "isHoverable", "isRead", "onClick", "readStateScreenReaderText", "tabIndex", "variant"]);
      const onKeyDown = (event) => {
        if (!event.target.parentElement.classList.contains(notification_drawer_default.notificationDrawerListItemAction)) {
          if (event.key === "Enter" || event.key === " ") {
            event.target.click();
          }
        }
      };
      let readStateSRText;
      if (readStateScreenReaderText) {
        readStateSRText = readStateScreenReaderText;
      } else {
        readStateSRText = isRead ? "read" : "unread";
      }
      return React262.createElement(
        "li",
        Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItem, isHoverable && notification_drawer_default.modifiers.hoverable, notification_drawer_default.modifiers[variant], isRead && notification_drawer_default.modifiers.read, className), tabIndex, onClick: (e) => onClick(e), onKeyDown }),
        React262.createElement("span", { className: "pf-v5-screen-reader" }, readStateSRText),
        children
      );
    };
    NotificationDrawerListItem.displayName = "NotificationDrawerListItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemBody.js
var React263, NotificationDrawerListItemBody;
var init_NotificationDrawerListItemBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemBody.js"() {
    init_tslib_es6();
    React263 = __toESM(require_react());
    init_esm();
    init_notification_drawer2();
    NotificationDrawerListItemBody = (_a) => {
      var { children, className = "", timestamp } = _a, props = __rest(_a, ["children", "className", "timestamp"]);
      return React263.createElement(
        React263.Fragment,
        null,
        React263.createElement("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItemDescription, className) }), children),
        timestamp && React263.createElement("div", { className: css(notification_drawer_default.notificationDrawerListItemTimestamp, className) }, timestamp)
      );
    };
    NotificationDrawerListItemBody.displayName = "NotificationDrawerListItemBody";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines.js
var c_notification_drawer__list_item_header_title_max_lines, c_notification_drawer_list_item_header_title_max_lines_default;
var init_c_notification_drawer_list_item_header_title_max_lines = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines.js"() {
    c_notification_drawer__list_item_header_title_max_lines = {
      "name": "--pf-v5-c-notification-drawer__list-item-header-title--max-lines",
      "value": "1",
      "var": "var(--pf-v5-c-notification-drawer__list-item-header-title--max-lines)"
    };
    c_notification_drawer_list_item_header_title_max_lines_default = c_notification_drawer__list_item_header_title_max_lines;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemHeader.js
var React264, variantIcons2, NotificationDrawerListItemHeader;
var init_NotificationDrawerListItemHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemHeader.js"() {
    init_tslib_es6();
    React264 = __toESM(require_react());
    init_bell_icon();
    init_check_circle_icon();
    init_exclamation_circle_icon();
    init_exclamation_triangle_icon();
    init_info_circle_icon();
    init_esm();
    init_notification_drawer2();
    init_c_notification_drawer_list_item_header_title_max_lines();
    init_Tooltip2();
    variantIcons2 = {
      success: check_circle_icon_default,
      danger: exclamation_circle_icon_default,
      warning: exclamation_triangle_icon_default,
      info: info_circle_icon_default,
      custom: bell_icon_default
    };
    NotificationDrawerListItemHeader = (_a) => {
      var { children, className = "", icon = null, srTitle, title, variant = "custom", truncateTitle = 0, tooltipPosition, headingLevel: HeadingLevel = "h2" } = _a, props = __rest(_a, ["children", "className", "icon", "srTitle", "title", "variant", "truncateTitle", "tooltipPosition", "headingLevel"]);
      const titleRef = React264.useRef(null);
      const [isTooltipVisible, setIsTooltipVisible] = React264.useState(false);
      React264.useEffect(() => {
        if (!titleRef.current || !truncateTitle) {
          return;
        }
        titleRef.current.style.setProperty(c_notification_drawer_list_item_header_title_max_lines_default.name, truncateTitle.toString());
        const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
        if (isTooltipVisible !== showTooltip) {
          setIsTooltipVisible(showTooltip);
        }
      }, [titleRef, truncateTitle, isTooltipVisible]);
      const Icon2 = variantIcons2[variant];
      const Title2 = React264.createElement(
        HeadingLevel,
        Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(notification_drawer_default.notificationDrawerListItemHeaderTitle, truncateTitle && notification_drawer_default.modifiers.truncate) }),
        srTitle && React264.createElement("span", { className: "pf-v5-screen-reader" }, srTitle),
        title
      );
      return React264.createElement(
        React264.Fragment,
        null,
        React264.createElement(
          "div",
          Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItemHeader, className) }),
          React264.createElement("span", { className: css(notification_drawer_default.notificationDrawerListItemHeaderIcon) }, icon ? icon : React264.createElement(Icon2, null)),
          isTooltipVisible ? React264.createElement(Tooltip, { content: title, position: tooltipPosition }, Title2) : Title2
        ),
        children && React264.createElement("div", { className: css(notification_drawer_default.notificationDrawerListItemAction) }, children)
      );
    };
    NotificationDrawerListItemHeader.displayName = "NotificationDrawerListItemHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/index.js
var init_NotificationDrawer2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/index.js"() {
    init_NotificationDrawer();
    init_NotificationDrawerBody();
    init_NotificationDrawerGroup();
    init_NotificationDrawerGroupList();
    init_NotificationDrawerHeader();
    init_NotificationDrawerList();
    init_NotificationDrawerListItem();
    init_NotificationDrawerListItemBody();
    init_NotificationDrawerListItemHeader();
  }
});

// node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.css
var init_overflow_menu = __esm({
  "node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.mjs
var overflow_menu_default;
var init_overflow_menu2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.mjs"() {
    init_overflow_menu();
    overflow_menu_default = {
      "divider": "pf-v5-c-divider",
      "modifiers": {
        "buttonGroup": "pf-m-button-group",
        "iconButtonGroup": "pf-m-icon-button-group",
        "vertical": "pf-m-vertical"
      },
      "overflowMenu": "pf-v5-c-overflow-menu",
      "overflowMenuContent": "pf-v5-c-overflow-menu__content",
      "overflowMenuControl": "pf-v5-c-overflow-menu__control",
      "overflowMenuGroup": "pf-v5-c-overflow-menu__group",
      "overflowMenuItem": "pf-v5-c-overflow-menu__item"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContext.js
var React265, OverflowMenuContext;
var init_OverflowMenuContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContext.js"() {
    React265 = __toESM(require_react());
    OverflowMenuContext = React265.createContext({
      isBelowBreakpoint: false
    });
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenu.js
var React266, OverflowMenu;
var init_OverflowMenu = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenu.js"() {
    init_tslib_es6();
    React266 = __toESM(require_react());
    init_overflow_menu2();
    init_esm();
    init_OverflowMenuContext();
    init_util();
    init_constants();
    init_resizeObserver();
    OverflowMenu = class extends React266.Component {
      constructor(props) {
        super(props);
        this.observer = () => {
        };
        this.handleResize = () => {
          const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];
          if (!breakpointWidth) {
            console.error("OverflowMenu will not be visible without a valid breakpoint.");
            return;
          }
          const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;
          const isBelowBreakpoint = relativeWidth < breakpointWidth;
          if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {
            this.setState({ isBelowBreakpoint });
          }
        };
        this.handleResizeWithDelay = debounce(this.handleResize, 250);
        this.state = {
          isBelowBreakpoint: false,
          breakpointRef: void 0
        };
      }
      getBreakpointRef() {
        const { breakpointReference } = this.props;
        if (breakpointReference.current) {
          return breakpointReference.current;
        } else if (typeof breakpointReference === "function") {
          return breakpointReference();
        }
      }
      componentDidMount() {
        const reference2 = this.props.breakpointReference ? this.getBreakpointRef() : void 0;
        this.setState({ breakpointRef: reference2 });
        this.observer = getResizeObserver(reference2, this.handleResizeWithDelay);
        this.handleResize();
      }
      componentDidUpdate(prevProps, prevState) {
        const reference2 = this.props.breakpointReference ? this.getBreakpointRef() : void 0;
        if (prevState.breakpointRef !== reference2) {
          this.observer();
          this.setState({ breakpointRef: reference2 });
          this.observer = getResizeObserver(reference2, this.handleResizeWithDelay);
          this.handleResize();
        }
      }
      componentWillUnmount() {
        this.observer();
      }
      render() {
        const _a = this.props, { className, breakpoint, children, breakpointReference } = _a, props = __rest(_a, ["className", "breakpoint", "children", "breakpointReference"]);
        return React266.createElement(
          "div",
          Object.assign({}, props, { className: css(overflow_menu_default.overflowMenu, className) }),
          React266.createElement(OverflowMenuContext.Provider, { value: { isBelowBreakpoint: this.state.isBelowBreakpoint } }, children)
        );
      }
    };
    OverflowMenu.displayName = "OverflowMenu";
    OverflowMenu.contextType = OverflowMenuContext;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuControl.js
var React267, OverflowMenuControl;
var init_OverflowMenuControl = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuControl.js"() {
    init_tslib_es6();
    React267 = __toESM(require_react());
    init_esm();
    init_overflow_menu2();
    init_OverflowMenuContext();
    OverflowMenuControl = (_a) => {
      var { className, children, hasAdditionalOptions } = _a, props = __rest(_a, ["className", "children", "hasAdditionalOptions"]);
      return React267.createElement(OverflowMenuContext.Consumer, null, (value) => (value.isBelowBreakpoint || hasAdditionalOptions) && React267.createElement(
        "div",
        Object.assign({ className: css(overflow_menu_default.overflowMenuControl, className) }, props),
        " ",
        children,
        " "
      ));
    };
    OverflowMenuControl.displayName = "OverflowMenuControl";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContent.js
var React268, OverflowMenuContent;
var init_OverflowMenuContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContent.js"() {
    React268 = __toESM(require_react());
    init_esm();
    init_overflow_menu2();
    init_OverflowMenuContext();
    OverflowMenuContent = ({ className, children, isPersistent }) => React268.createElement(OverflowMenuContext.Consumer, null, (value) => (!value.isBelowBreakpoint || isPersistent) && React268.createElement("div", { className: css(overflow_menu_default.overflowMenuContent, className) }, children));
    OverflowMenuContent.displayName = "OverflowMenuContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuGroup.js
var React269, OverflowMenuGroup;
var init_OverflowMenuGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuGroup.js"() {
    init_tslib_es6();
    React269 = __toESM(require_react());
    init_esm();
    init_overflow_menu2();
    init_OverflowMenuContext();
    OverflowMenuGroup = (_a) => {
      var { className, children, isPersistent = false, groupType } = _a, props = __rest(_a, ["className", "children", "isPersistent", "groupType"]);
      return React269.createElement(OverflowMenuContext.Consumer, null, (value) => (isPersistent || !value.isBelowBreakpoint) && React269.createElement("div", Object.assign({ className: css(overflow_menu_default.overflowMenuGroup, groupType === "button" && overflow_menu_default.modifiers.buttonGroup, groupType === "icon" && overflow_menu_default.modifiers.iconButtonGroup, className) }, props), children));
    };
    OverflowMenuGroup.displayName = "OverflowMenuGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuItem.js
var React270, OverflowMenuItem;
var init_OverflowMenuItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuItem.js"() {
    React270 = __toESM(require_react());
    init_esm();
    init_overflow_menu2();
    init_OverflowMenuContext();
    OverflowMenuItem = ({ className, children, isPersistent = false }) => React270.createElement(OverflowMenuContext.Consumer, null, (value) => (isPersistent || !value.isBelowBreakpoint) && React270.createElement(
      "div",
      { className: css(overflow_menu_default.overflowMenuItem, className) },
      " ",
      children,
      " "
    ));
    OverflowMenuItem.displayName = "OverflowMenuItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuDropdownItem.js
var React271, OverflowMenuDropdownItem;
var init_OverflowMenuDropdownItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuDropdownItem.js"() {
    init_tslib_es6();
    React271 = __toESM(require_react());
    init_Dropdown2();
    init_OverflowMenuContext();
    OverflowMenuDropdownItem = (_a) => {
      var { children, isShared = false, itemId } = _a, additionalProps = __rest(_a, ["children", "isShared", "itemId"]);
      return React271.createElement(OverflowMenuContext.Consumer, null, (value) => (!isShared || value.isBelowBreakpoint) && React271.createElement(DropdownItem, Object.assign({ component: "button", value: itemId }, additionalProps), children));
    };
    OverflowMenuDropdownItem.displayName = "OverflowMenuDropdownItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/index.js
var init_OverflowMenu2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/index.js"() {
    init_OverflowMenu();
    init_OverflowMenuControl();
    init_OverflowMenuContent();
    init_OverflowMenuGroup();
    init_OverflowMenuItem();
    init_OverflowMenuDropdownItem();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageGroup.js
var React272, PageGroup;
var init_PageGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageGroup.js"() {
    init_tslib_es6();
    React272 = __toESM(require_react());
    init_esm();
    init_page2();
    init_util();
    init_PageContext();
    PageGroup = (_a) => {
      var { className = "", children, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
      const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React272.useContext(PageContext);
      React272.useEffect(() => {
        if (hasOverflowScroll && !ariaLabel) {
          console.warn("PageGroup: An accessible aria-label is required when hasOverflowScroll is set to true.");
        }
      }, [hasOverflowScroll, ariaLabel]);
      return React272.createElement("div", Object.assign({}, props, { className: css(page_default.pageMainGroup, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0, role: "region", "aria-label": ariaLabel }), children);
    };
    PageGroup.displayName = "PageGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/Page.js
var React273, PageLayouts, Page;
var init_Page = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/Page.js"() {
    init_tslib_es6();
    React273 = __toESM(require_react());
    init_page2();
    init_esm();
    init_global_breakpoint_xl();
    init_util();
    init_Drawer2();
    init_PageGroup();
    init_resizeObserver();
    init_util();
    init_PageContext();
    (function(PageLayouts2) {
      PageLayouts2["vertical"] = "vertical";
      PageLayouts2["horizontal"] = "horizontal";
    })(PageLayouts || (PageLayouts = {}));
    Page = class extends React273.Component {
      constructor(props) {
        super(props);
        this.mainRef = React273.createRef();
        this.pageRef = React273.createRef();
        this.observer = () => {
        };
        this.getWindowWidth = () => {
          if (canUseDOM) {
            return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;
          } else {
            return 1200;
          }
        };
        this.isMobile = () => (
          // eslint-disable-next-line radix
          this.getWindowWidth() < Number.parseInt(global_breakpoint_xl_default.value, 10)
        );
        this.resize = (_event) => {
          var _a;
          const { onPageResize } = this.props;
          const mobileView = this.isMobile();
          if (onPageResize) {
            onPageResize(_event, { mobileView, windowSize: this.getWindowWidth() });
          }
          if (mobileView !== this.state.mobileView) {
            this.setState({ mobileView });
          }
          if ((_a = this.pageRef) === null || _a === void 0 ? void 0 : _a.current) {
            const currentWidth = this.pageRef.current.clientWidth;
            const currentHeight = this.pageRef.current.clientHeight;
            if (this.state.width !== currentWidth) {
              this.setState({ width: currentWidth });
            }
            if (this.state.height !== currentHeight) {
              this.setState({ height: currentHeight });
            }
          }
        };
        this.handleResize = debounce(this.resize, 250);
        this.handleMainClick = () => {
          if (this.isMobile() && this.state.mobileIsSidebarOpen && this.mainRef.current) {
            this.setState({ mobileIsSidebarOpen: false });
          }
        };
        this.onSidebarToggleMobile = () => {
          this.setState((prevState) => ({
            mobileIsSidebarOpen: !prevState.mobileIsSidebarOpen
          }));
        };
        this.onSidebarToggleDesktop = () => {
          this.setState((prevState) => ({
            desktopIsSidebarOpen: !prevState.desktopIsSidebarOpen
          }));
        };
        const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;
        const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;
        this.state = {
          desktopIsSidebarOpen: managedSidebarOpen,
          mobileIsSidebarOpen: false,
          mobileView: false,
          width: null,
          height: null
        };
      }
      componentDidMount() {
        const { isManagedSidebar, onPageResize } = this.props;
        if (isManagedSidebar || onPageResize) {
          this.observer = getResizeObserver(this.pageRef.current, this.handleResize);
          const currentRef = this.mainRef.current;
          if (currentRef) {
            currentRef.addEventListener("mousedown", this.handleMainClick);
            currentRef.addEventListener("touchstart", this.handleMainClick);
          }
          this.resize();
        }
      }
      componentWillUnmount() {
        const { isManagedSidebar, onPageResize } = this.props;
        if (isManagedSidebar || onPageResize) {
          this.observer();
          const currentRef = this.mainRef.current;
          if (currentRef) {
            currentRef.removeEventListener("mousedown", this.handleMainClick);
            currentRef.removeEventListener("touchstart", this.handleMainClick);
          }
        }
      }
      render() {
        const _a = this.props, {
          breadcrumb,
          isBreadcrumbWidthLimited,
          className,
          children,
          header,
          sidebar,
          notificationDrawer,
          isNotificationDrawerExpanded,
          onNotificationDrawerExpand,
          isTertiaryNavWidthLimited,
          skipToContent,
          role,
          mainContainerId,
          isManagedSidebar,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          defaultManagedSidebarIsOpen,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onPageResize,
          getBreakpoint: getBreakpoint2,
          getVerticalBreakpoint: getVerticalBreakpoint2,
          mainAriaLabel,
          mainTabIndex,
          mainComponent,
          tertiaryNav,
          isTertiaryNavGrouped,
          isBreadcrumbGrouped,
          additionalGroupedContent,
          groupProps,
          breadcrumbProps
        } = _a, rest = __rest(_a, ["breadcrumb", "isBreadcrumbWidthLimited", "className", "children", "header", "sidebar", "notificationDrawer", "isNotificationDrawerExpanded", "onNotificationDrawerExpand", "isTertiaryNavWidthLimited", "skipToContent", "role", "mainContainerId", "isManagedSidebar", "defaultManagedSidebarIsOpen", "onPageResize", "getBreakpoint", "getVerticalBreakpoint", "mainAriaLabel", "mainTabIndex", "mainComponent", "tertiaryNav", "isTertiaryNavGrouped", "isBreadcrumbGrouped", "additionalGroupedContent", "groupProps", "breadcrumbProps"]);
        const { mobileView, mobileIsSidebarOpen, desktopIsSidebarOpen, width, height } = this.state;
        const context = {
          isManagedSidebar,
          onSidebarToggle: mobileView ? this.onSidebarToggleMobile : this.onSidebarToggleDesktop,
          isSidebarOpen: mobileView ? mobileIsSidebarOpen : desktopIsSidebarOpen,
          width,
          height,
          getBreakpoint: getBreakpoint2,
          getVerticalBreakpoint: getVerticalBreakpoint2
        };
        let nav = null;
        if (tertiaryNav && isTertiaryNavWidthLimited) {
          nav = React273.createElement(
            "div",
            { className: css(page_default.pageMainNav, page_default.modifiers.limitWidth) },
            React273.createElement("div", { className: css(page_default.pageMainBody) }, tertiaryNav)
          );
        } else if (tertiaryNav) {
          nav = React273.createElement("div", { className: css(page_default.pageMainNav) }, tertiaryNav);
        }
        const crumb = breadcrumb ? React273.createElement("section", { className: css(page_default.pageMainBreadcrumb, isBreadcrumbWidthLimited && page_default.modifiers.limitWidth, formatBreakpointMods(breadcrumbProps === null || breadcrumbProps === void 0 ? void 0 : breadcrumbProps.stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true)) }, isBreadcrumbWidthLimited ? React273.createElement("div", { className: css(page_default.pageMainBody) }, breadcrumb) : breadcrumb) : null;
        const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;
        const group = isGrouped ? React273.createElement(
          PageGroup,
          Object.assign({}, groupProps),
          isTertiaryNavGrouped && nav,
          isBreadcrumbGrouped && crumb,
          additionalGroupedContent
        ) : null;
        const Component44 = mainComponent;
        const main2 = React273.createElement(
          Component44,
          { ref: this.mainRef, role, id: mainContainerId, className: css(page_default.pageMain), tabIndex: mainTabIndex, "aria-label": mainAriaLabel },
          group,
          !isTertiaryNavGrouped && nav,
          !isBreadcrumbGrouped && crumb,
          children
        );
        const panelContent = React273.createElement(DrawerPanelContent, null, notificationDrawer);
        return React273.createElement(
          PageContextProvider,
          { value: context },
          React273.createElement(
            "div",
            Object.assign({ ref: this.pageRef }, rest, { className: css(page_default.page, width !== null && height !== null && "pf-m-resize-observer", width !== null && `pf-m-breakpoint-${getBreakpoint2(width)}`, height !== null && `pf-m-height-breakpoint-${getVerticalBreakpoint2(height)}`, className) }),
            skipToContent,
            header,
            sidebar,
            notificationDrawer && React273.createElement(
              "div",
              { className: css(page_default.pageDrawer) },
              React273.createElement(
                Drawer,
                { isExpanded: isNotificationDrawerExpanded, onExpand: (event) => onNotificationDrawerExpand(event) },
                React273.createElement(
                  DrawerContent,
                  { panelContent },
                  React273.createElement(DrawerContentBody, null, main2)
                )
              )
            ),
            !notificationDrawer && main2
          )
        );
      }
    };
    Page.displayName = "Page";
    Page.defaultProps = {
      isManagedSidebar: false,
      isBreadcrumbWidthLimited: false,
      defaultManagedSidebarIsOpen: true,
      mainTabIndex: -1,
      isNotificationDrawerExpanded: false,
      onNotificationDrawerExpand: () => null,
      mainComponent: "main",
      getBreakpoint,
      getVerticalBreakpoint
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageBreadcrumb.js
var React274, PageBreadcrumb;
var init_PageBreadcrumb = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageBreadcrumb.js"() {
    init_tslib_es6();
    React274 = __toESM(require_react());
    init_esm();
    init_page2();
    init_util();
    init_PageContext();
    PageBreadcrumb = (_a) => {
      var { className = "", children, isWidthLimited, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isWidthLimited", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
      const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React274.useContext(PageContext);
      React274.useEffect(() => {
        if (hasOverflowScroll && !ariaLabel) {
          console.warn("PageBreadcrumb: An accessible aria-label is required when hasOverflowScroll is set to true.");
        }
      }, [hasOverflowScroll, ariaLabel]);
      return React274.createElement(
        "section",
        Object.assign({ className: css(page_default.pageMainBreadcrumb, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), isWidthLimited && page_default.modifiers.limitWidth, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0 }, { "aria-label": ariaLabel }, props),
        isWidthLimited && React274.createElement("div", { className: css(page_default.pageMainBody) }, children),
        !isWidthLimited && children
      );
    };
    PageBreadcrumb.displayName = "PageBreadcrumb";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebarBody.js
var React275, PageSidebarBody;
var init_PageSidebarBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebarBody.js"() {
    init_tslib_es6();
    React275 = __toESM(require_react());
    init_page2();
    init_esm();
    PageSidebarBody = (_a) => {
      var { children, className, usePageInsets, isFilled } = _a, props = __rest(_a, ["children", "className", "usePageInsets", "isFilled"]);
      return React275.createElement("div", Object.assign({ className: css(page_default.pageSidebarBody, usePageInsets && page_default.modifiers.pageInsets, isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, className) }, props), children);
    };
    PageSidebarBody.displayName = "PageSidebarBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSection.js
var React276, PageSectionVariants, PageSectionTypes, variantType, variantStyle2, PageSection;
var init_PageSection = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageSection.js"() {
    init_tslib_es6();
    React276 = __toESM(require_react());
    init_page2();
    init_esm();
    init_util();
    init_PageContext();
    (function(PageSectionVariants2) {
      PageSectionVariants2["default"] = "default";
      PageSectionVariants2["light"] = "light";
      PageSectionVariants2["dark"] = "dark";
      PageSectionVariants2["darker"] = "darker";
    })(PageSectionVariants || (PageSectionVariants = {}));
    (function(PageSectionTypes2) {
      PageSectionTypes2["default"] = "default";
      PageSectionTypes2["nav"] = "nav";
      PageSectionTypes2["subNav"] = "subnav";
      PageSectionTypes2["breadcrumb"] = "breadcrumb";
      PageSectionTypes2["tabs"] = "tabs";
      PageSectionTypes2["wizard"] = "wizard";
    })(PageSectionTypes || (PageSectionTypes = {}));
    variantType = {
      [PageSectionTypes.default]: page_default.pageMainSection,
      [PageSectionTypes.nav]: page_default.pageMainNav,
      [PageSectionTypes.subNav]: page_default.pageMainSubnav,
      [PageSectionTypes.breadcrumb]: page_default.pageMainBreadcrumb,
      [PageSectionTypes.tabs]: page_default.pageMainTabs,
      [PageSectionTypes.wizard]: page_default.pageMainWizard
    };
    variantStyle2 = {
      [PageSectionVariants.default]: "",
      [PageSectionVariants.light]: page_default.modifiers.light,
      [PageSectionVariants.dark]: page_default.modifiers.dark_200,
      [PageSectionVariants.darker]: page_default.modifiers.dark_100
    };
    PageSection = (_a) => {
      var { className = "", children, variant = "default", type = "default", padding, isFilled, isWidthLimited = false, isCenterAligned = false, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel, component = "section" } = _a, props = __rest(_a, ["className", "children", "variant", "type", "padding", "isFilled", "isWidthLimited", "isCenterAligned", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label", "component"]);
      const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React276.useContext(PageContext);
      React276.useEffect(() => {
        if (hasOverflowScroll && !ariaLabel) {
          console.warn("PageSection: An accessible aria-label is required when hasOverflowScroll is set to true.");
        }
      }, [hasOverflowScroll, ariaLabel]);
      const Component44 = component;
      return React276.createElement(
        Component44,
        Object.assign({}, props, { className: css(variantType[type], formatBreakpointMods(padding, page_default), formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), variantStyle2[variant], isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, isWidthLimited && page_default.modifiers.limitWidth, isWidthLimited && isCenterAligned && type !== PageSectionTypes.subNav && page_default.modifiers.alignCenter, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0 }, { "aria-label": ariaLabel }),
        isWidthLimited && React276.createElement("div", { className: css(page_default.pageMainBody) }, children),
        !isWidthLimited && children
      );
    };
    PageSection.displayName = "PageSection";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageNavigation.js
var React277, PageNavigation;
var init_PageNavigation = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageNavigation.js"() {
    init_tslib_es6();
    React277 = __toESM(require_react());
    init_esm();
    init_page2();
    init_util();
    init_PageContext();
    PageNavigation = (_a) => {
      var { className = "", children, isWidthLimited, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isWidthLimited", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
      const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React277.useContext(PageContext);
      React277.useEffect(() => {
        if (hasOverflowScroll && !ariaLabel) {
          console.warn("PageNavigation: An accessible aria-label is required when hasOverflowScroll is set to true.");
        }
      }, [hasOverflowScroll, ariaLabel]);
      return React277.createElement(
        "div",
        Object.assign({ className: css(page_default.pageMainNav, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), isWidthLimited && page_default.modifiers.limitWidth, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0, role: "region", "aria-label": ariaLabel }, props),
        isWidthLimited && React277.createElement("div", { className: css(page_default.pageMainBody) }, children),
        !isWidthLimited && children
      );
    };
    PageNavigation.displayName = "PageNavigation";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageToggleButton.js
var React278, PageToggleButton;
var init_PageToggleButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/PageToggleButton.js"() {
    init_tslib_es6();
    React278 = __toESM(require_react());
    init_Button2();
    init_PageContext();
    PageToggleButton = (_a) => {
      var { children, isSidebarOpen = true, onSidebarToggle = () => void 0, id = "nav-toggle" } = _a, props = __rest(_a, ["children", "isSidebarOpen", "onSidebarToggle", "id"]);
      return React278.createElement(PageContextConsumer, null, ({ isManagedSidebar, onSidebarToggle: managedOnSidebarToggle, isSidebarOpen: managedIsSidebarOpen }) => {
        const sidebarToggle = isManagedSidebar ? managedOnSidebarToggle : onSidebarToggle;
        const sidebarOpen = isManagedSidebar ? managedIsSidebarOpen : isSidebarOpen;
        return React278.createElement(Button, Object.assign({ id, onClick: sidebarToggle, "aria-label": "Side navigation toggle", "aria-expanded": sidebarOpen ? "true" : "false", variant: ButtonVariant.plain }, props), children);
      });
    };
    PageToggleButton.displayName = "PageToggleButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Page/index.js
var init_Page2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Page/index.js"() {
    init_Page();
    init_PageBreadcrumb();
    init_PageGroup();
    init_PageSidebar();
    init_PageSidebarBody();
    init_PageSection();
    init_PageNavigation();
    init_PageToggleButton();
    init_PageContext();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/ToggleTemplate.js
var React279, ToggleTemplate;
var init_ToggleTemplate = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Pagination/ToggleTemplate.js"() {
    React279 = __toESM(require_react());
    ToggleTemplate = ({ firstIndex = 0, lastIndex = 0, itemCount = 0, itemsTitle = "items", ofWord = "of" }) => React279.createElement(
      React279.Fragment,
      null,
      React279.createElement(
        "b",
        null,
        firstIndex,
        " - ",
        lastIndex
      ),
      " ",
      ofWord,
      " ",
      React279.createElement("b", null, itemCount),
      " ",
      itemsTitle
    );
    ToggleTemplate.displayName = "ToggleTemplate";
  }
});

// node_modules/@patternfly/react-styles/css/components/Pagination/pagination.css
var init_pagination = __esm({
  "node_modules/@patternfly/react-styles/css/components/Pagination/pagination.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Pagination/pagination.mjs
var pagination_default;
var init_pagination2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Pagination/pagination.mjs"() {
    init_pagination();
    pagination_default = {
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "formControl": "pf-v5-c-form-control",
      "menuToggle": "pf-v5-c-menu-toggle",
      "modifiers": {
        "bottom": "pf-m-bottom",
        "static": "pf-m-static",
        "first": "pf-m-first",
        "last": "pf-m-last",
        "sticky": "pf-m-sticky",
        "compact": "pf-m-compact",
        "pageInsets": "pf-m-page-insets",
        "displaySummary": "pf-m-display-summary",
        "displayFull": "pf-m-display-full",
        "insetNone": "pf-m-inset-none",
        "insetSm": "pf-m-inset-sm",
        "insetMd": "pf-m-inset-md",
        "insetLg": "pf-m-inset-lg",
        "insetXl": "pf-m-inset-xl",
        "inset_2xl": "pf-m-inset-2xl",
        "displaySummaryOnSm": "pf-m-display-summary-on-sm",
        "displayFullOnSm": "pf-m-display-full-on-sm",
        "insetNoneOnSm": "pf-m-inset-none-on-sm",
        "insetSmOnSm": "pf-m-inset-sm-on-sm",
        "insetMdOnSm": "pf-m-inset-md-on-sm",
        "insetLgOnSm": "pf-m-inset-lg-on-sm",
        "insetXlOnSm": "pf-m-inset-xl-on-sm",
        "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
        "displaySummaryOnMd": "pf-m-display-summary-on-md",
        "displayFullOnMd": "pf-m-display-full-on-md",
        "insetNoneOnMd": "pf-m-inset-none-on-md",
        "insetSmOnMd": "pf-m-inset-sm-on-md",
        "insetMdOnMd": "pf-m-inset-md-on-md",
        "insetLgOnMd": "pf-m-inset-lg-on-md",
        "insetXlOnMd": "pf-m-inset-xl-on-md",
        "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
        "displaySummaryOnLg": "pf-m-display-summary-on-lg",
        "displayFullOnLg": "pf-m-display-full-on-lg",
        "insetNoneOnLg": "pf-m-inset-none-on-lg",
        "insetSmOnLg": "pf-m-inset-sm-on-lg",
        "insetMdOnLg": "pf-m-inset-md-on-lg",
        "insetLgOnLg": "pf-m-inset-lg-on-lg",
        "insetXlOnLg": "pf-m-inset-xl-on-lg",
        "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
        "displaySummaryOnXl": "pf-m-display-summary-on-xl",
        "displayFullOnXl": "pf-m-display-full-on-xl",
        "insetNoneOnXl": "pf-m-inset-none-on-xl",
        "insetSmOnXl": "pf-m-inset-sm-on-xl",
        "insetMdOnXl": "pf-m-inset-md-on-xl",
        "insetLgOnXl": "pf-m-inset-lg-on-xl",
        "insetXlOnXl": "pf-m-inset-xl-on-xl",
        "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
        "displaySummaryOn_2xl": "pf-m-display-summary-on-2xl",
        "displayFullOn_2xl": "pf-m-display-full-on-2xl",
        "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
        "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
        "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
        "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
        "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
        "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
      },
      "pagination": "pf-v5-c-pagination",
      "paginationNav": "pf-v5-c-pagination__nav",
      "paginationNavControl": "pf-v5-c-pagination__nav-control",
      "paginationNavPageSelect": "pf-v5-c-pagination__nav-page-select",
      "paginationTotalItems": "pf-v5-c-pagination__total-items",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Navigation.js
var React280, Navigation;
var init_Navigation = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Pagination/Navigation.js"() {
    init_tslib_es6();
    React280 = __toESM(require_react());
    init_pagination2();
    init_esm();
    init_angle_left_icon();
    init_angle_double_left_icon();
    init_angle_right_icon();
    init_angle_double_right_icon();
    init_Button2();
    init_TextInput2();
    init_helpers();
    init_constants();
    Navigation = class _Navigation extends React280.Component {
      constructor(props) {
        super(props);
        this.handleNewPage = (_evt, newPage) => {
          const { perPage, onSetPage } = this.props;
          const startIdx = (newPage - 1) * perPage;
          const endIdx = newPage * perPage;
          return onSetPage(_evt, newPage, perPage, startIdx, endIdx);
        };
        this.state = { userInputPage: this.props.page };
      }
      static parseInteger(input, lastPage) {
        let inputPage = Number.parseInt(input, 10);
        if (!Number.isNaN(inputPage)) {
          inputPage = inputPage > lastPage ? lastPage : inputPage;
          inputPage = inputPage < 1 ? 1 : inputPage;
        }
        return inputPage;
      }
      onChange(event, lastPage) {
        const inputPage = _Navigation.parseInteger(event.currentTarget.value, lastPage);
        this.setState({ userInputPage: Number.isNaN(inputPage) ? event.currentTarget.value : inputPage });
      }
      onKeyDown(event, page, lastPage, onPageInput) {
        const allowedKeys = [
          "Tab",
          "Backspace",
          "Delete",
          "ArrowLeft",
          "ArrowRight",
          "Home",
          "End",
          "ArrowUp",
          "ArrowDown"
        ];
        if (event.key === KeyTypes.Enter) {
          const inputPage = _Navigation.parseInteger(this.state.userInputPage, lastPage);
          onPageInput(event, Number.isNaN(inputPage) ? page : inputPage);
          this.handleNewPage(event, Number.isNaN(inputPage) ? page : inputPage);
        } else if (!/^\d*$/.test(event.key) && !allowedKeys.includes(event.key)) {
          event.preventDefault();
        }
      }
      componentDidUpdate(lastState) {
        if (this.props.page !== lastState.page && this.props.page <= this.props.lastPage && this.state.userInputPage !== this.props.page) {
          this.setState({ userInputPage: this.props.page });
        }
      }
      render() {
        const _a = this.props, {
          page,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          perPage,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          onSetPage,
          isDisabled,
          itemCount,
          lastPage,
          firstPage,
          pagesTitle,
          pagesTitlePlural,
          toLastPageAriaLabel,
          toNextPageAriaLabel,
          toFirstPageAriaLabel,
          toPreviousPageAriaLabel,
          currPageAriaLabel,
          paginationAriaLabel,
          ofWord,
          onNextClick,
          onPreviousClick,
          onFirstClick,
          onLastClick,
          onPageInput,
          className,
          isCompact
        } = _a, props = __rest(_a, ["page", "perPage", "onSetPage", "isDisabled", "itemCount", "lastPage", "firstPage", "pagesTitle", "pagesTitlePlural", "toLastPageAriaLabel", "toNextPageAriaLabel", "toFirstPageAriaLabel", "toPreviousPageAriaLabel", "currPageAriaLabel", "paginationAriaLabel", "ofWord", "onNextClick", "onPreviousClick", "onFirstClick", "onLastClick", "onPageInput", "className", "isCompact"]);
        const { userInputPage } = this.state;
        return React280.createElement(
          "nav",
          Object.assign({ className: css(pagination_default.paginationNav, className), "aria-label": paginationAriaLabel }, props),
          !isCompact && React280.createElement(
            "div",
            { className: css(pagination_default.paginationNavControl, pagination_default.modifiers.first) },
            React280.createElement(
              Button,
              { variant: ButtonVariant.plain, isDisabled: isDisabled || page === firstPage || page === 0, "aria-label": toFirstPageAriaLabel, "data-action": "first", onClick: (event) => {
                onFirstClick(event, 1);
                this.handleNewPage(event, 1);
                this.setState({ userInputPage: 1 });
              } },
              React280.createElement(angle_double_left_icon_default, null)
            )
          ),
          React280.createElement(
            "div",
            { className: pagination_default.paginationNavControl },
            React280.createElement(
              Button,
              { variant: ButtonVariant.plain, isDisabled: isDisabled || page === firstPage || page === 0, "data-action": "previous", onClick: (event) => {
                const newPage = page - 1 >= 1 ? page - 1 : 1;
                onPreviousClick(event, newPage);
                this.handleNewPage(event, newPage);
                this.setState({ userInputPage: newPage });
              }, "aria-label": toPreviousPageAriaLabel },
              React280.createElement(angle_left_icon_default, null)
            )
          ),
          !isCompact && React280.createElement(
            "div",
            { className: pagination_default.paginationNavPageSelect },
            React280.createElement(TextInput, { "aria-label": currPageAriaLabel, type: "number", isDisabled: isDisabled || itemCount && page === firstPage && page === lastPage && itemCount >= 0 || page === 0, min: lastPage <= 0 && firstPage <= 0 ? 0 : 1, max: lastPage, value: userInputPage, onKeyDown: (event) => this.onKeyDown(event, page, lastPage, onPageInput), onChange: (event) => this.onChange(event, lastPage) }),
            (itemCount || itemCount === 0) && React280.createElement(
              "span",
              { "aria-hidden": "true" },
              ofWord,
              " ",
              pagesTitle ? pluralize(lastPage, pagesTitle, pagesTitlePlural) : lastPage
            )
          ),
          React280.createElement(
            "div",
            { className: pagination_default.paginationNavControl },
            React280.createElement(
              Button,
              { variant: ButtonVariant.plain, isDisabled: isDisabled || page === lastPage, "aria-label": toNextPageAriaLabel, "data-action": "next", onClick: (event) => {
                const newPage = page + 1 <= lastPage ? page + 1 : lastPage;
                onNextClick(event, newPage);
                this.handleNewPage(event, newPage);
                this.setState({ userInputPage: newPage });
              } },
              React280.createElement(angle_right_icon_default, null)
            )
          ),
          !isCompact && React280.createElement(
            "div",
            { className: css(pagination_default.paginationNavControl, pagination_default.modifiers.last) },
            React280.createElement(
              Button,
              { variant: ButtonVariant.plain, isDisabled: isDisabled || page === lastPage, "aria-label": toLastPageAriaLabel, "data-action": "last", onClick: (event) => {
                onLastClick(event, lastPage);
                this.handleNewPage(event, lastPage);
                this.setState({ userInputPage: lastPage });
              } },
              React280.createElement(angle_double_right_icon_default, null)
            )
          )
        );
      }
    };
    Navigation.displayName = "Navigation";
    Navigation.defaultProps = {
      className: "",
      isDisabled: false,
      isCompact: false,
      lastPage: 0,
      firstPage: 0,
      pagesTitle: "",
      pagesTitlePlural: "",
      toLastPageAriaLabel: "Go to last page",
      toNextPageAriaLabel: "Go to next page",
      toFirstPageAriaLabel: "Go to first page",
      toPreviousPageAriaLabel: "Go to previous page",
      currPageAriaLabel: "Current page",
      paginationAriaLabel: "Pagination",
      ofWord: "of",
      onNextClick: () => void 0,
      onPreviousClick: () => void 0,
      onFirstClick: () => void 0,
      onLastClick: () => void 0,
      onPageInput: () => void 0
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/PaginationOptionsMenu.js
var React281, PaginationOptionsMenu;
var init_PaginationOptionsMenu = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Pagination/PaginationOptionsMenu.js"() {
    React281 = __toESM(require_react());
    init_esm();
    init_Menu2();
    init_MenuToggle2();
    init_Popper2();
    init_ToggleTemplate();
    init_helpers();
    PaginationOptionsMenu = ({
      className,
      widgetId,
      page: pageProp,
      itemCount,
      isDisabled = false,
      minWidth,
      dropDirection = "down",
      perPageOptions = [],
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      itemsPerPageTitle = "Items per page",
      perPageSuffix = "per page",
      optionsToggleAriaLabel,
      ofWord = "of",
      perPage = 0,
      firstIndex = 0,
      lastIndex = 0,
      isLastFullPageShown = false,
      itemsTitle = "items",
      toggleTemplate,
      onPerPageSelect = () => null
    }) => {
      const [isOpen, setIsOpen] = React281.useState(false);
      const toggleRef = React281.useRef(null);
      const menuRef = React281.useRef(null);
      const containerRef = React281.useRef(null);
      const onToggle = () => {
        setIsOpen((prevState) => !prevState);
      };
      const onSelect = () => {
        var _a;
        setIsOpen((prevState) => !prevState);
        (_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      };
      const handleNewPerPage = (_evt, newPerPage) => {
        let newPage = pageProp;
        while (Math.ceil(itemCount / newPerPage) < newPage) {
          newPage--;
        }
        if (isLastFullPageShown) {
          if (itemCount / newPerPage !== newPage) {
            while (newPage > 1 && itemCount - newPerPage * newPage < 0) {
              newPage--;
            }
          }
        }
        const startIdx = (newPage - 1) * newPerPage;
        const endIdx = newPage * newPerPage;
        return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);
      };
      React281.useEffect(() => {
        const handleMenuKeys = (event) => {
          var _a, _b, _c;
          if (isOpen && ((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
            if (event.key === "Escape" || event.key === "Tab") {
              setIsOpen(false);
              (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
            }
          }
        };
        const handleClick = (event) => {
          var _a, _b, _c;
          if (isOpen && ((_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
            setTimeout(() => {
              var _a2;
              const firstElement = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector("li button:not(:disabled)");
              firstElement && firstElement.focus();
            }, 0);
          }
          if (isOpen && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
            setIsOpen(false);
          }
        };
        window.addEventListener("keydown", handleMenuKeys);
        window.addEventListener("click", handleClick);
        return () => {
          window.removeEventListener("keydown", handleMenuKeys);
          window.removeEventListener("click", handleClick);
        };
      }, [isOpen, menuRef]);
      const renderItems = () => perPageOptions.map(({ value, title }) => React281.createElement(
        MenuItem,
        { key: value, "data-action": `per-page-${value}`, isSelected: perPage === value, onClick: (event) => handleNewPerPage(event, value) },
        title,
        ` ${perPageSuffix}`
      ));
      const toggle = React281.createElement(
        MenuToggle,
        Object.assign({ ref: toggleRef, onClick: onToggle }, optionsToggleAriaLabel && { "aria-label": optionsToggleAriaLabel }, { isDisabled: isDisabled || itemCount && itemCount <= 0, isExpanded: isOpen }, widgetId && { id: `${widgetId}-toggle` }, { variant: "plainText", "aria-haspopup": "listbox" }),
        toggleTemplate && typeof toggleTemplate === "string" && fillTemplate(toggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle }),
        toggleTemplate && typeof toggleTemplate !== "string" && toggleTemplate({
          firstIndex,
          lastIndex,
          ofWord,
          itemCount,
          itemsTitle
        }),
        !toggleTemplate && React281.createElement(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })
      );
      const menu = React281.createElement(
        Menu,
        { className: css(className), onSelect, ref: menuRef },
        React281.createElement(
          MenuContent,
          null,
          React281.createElement(MenuList, null, renderItems())
        )
      );
      return React281.createElement(
        "div",
        { ref: containerRef },
        React281.createElement(Popper, { trigger: toggle, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, direction: dropDirection, appendTo: containerRef.current || void 0, minWidth: minWidth !== void 0 ? minWidth : "revert" })
      );
    };
    PaginationOptionsMenu.displayName = "PaginationOptionsMenu";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars.js
var c_pagination__nav_page_select_c_form_control_width_chars, c_pagination_nav_page_select_c_form_control_width_chars_default;
var init_c_pagination_nav_page_select_c_form_control_width_chars = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars.js"() {
    c_pagination__nav_page_select_c_form_control_width_chars = {
      "name": "--pf-v5-c-pagination__nav-page-select--c-form-control--width-chars",
      "value": "2",
      "var": "var(--pf-v5-c-pagination__nav-page-select--c-form-control--width-chars)"
    };
    c_pagination_nav_page_select_c_form_control_width_chars_default = c_pagination__nav_page_select_c_form_control_width_chars;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js
var React282, PaginationVariant, defaultPerPageOptions, handleInputWidth, Pagination;
var init_Pagination = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js"() {
    init_tslib_es6();
    React282 = __toESM(require_react());
    init_ToggleTemplate();
    init_pagination2();
    init_esm();
    init_helpers();
    init_Navigation();
    init_PaginationOptionsMenu();
    init_helpers();
    init_util();
    init_c_pagination_nav_page_select_c_form_control_width_chars();
    (function(PaginationVariant2) {
      PaginationVariant2["bottom"] = "bottom";
      PaginationVariant2["top"] = "top";
    })(PaginationVariant || (PaginationVariant = {}));
    defaultPerPageOptions = [
      {
        title: "10",
        value: 10
      },
      {
        title: "20",
        value: 20
      },
      {
        title: "50",
        value: 50
      },
      {
        title: "100",
        value: 100
      }
    ];
    handleInputWidth = (lastPage, node) => {
      if (!node) {
        return;
      }
      const len = String(lastPage).length;
      if (len >= 3) {
        node.style.setProperty(c_pagination_nav_page_select_c_form_control_width_chars_default.name, `${len}`);
      } else {
        node.style.setProperty(c_pagination_nav_page_select_c_form_control_width_chars_default.name, "2");
      }
    };
    Pagination = (_a) => {
      var { children, className = "", variant = PaginationVariant.top, isDisabled = false, isCompact = false, isSticky = false, isStatic = false, dropDirection: dropDirectionProp, toggleTemplate, perPage = defaultPerPageOptions[0].value, titles = {
        items: "",
        page: "",
        pages: "",
        itemsPerPage: "Items per page",
        perPageSuffix: "per page",
        toFirstPageAriaLabel: "Go to first page",
        toPreviousPageAriaLabel: "Go to previous page",
        toLastPageAriaLabel: "Go to last page",
        toNextPageAriaLabel: "Go to next page",
        optionsToggleAriaLabel: "",
        currPageAriaLabel: "Current page",
        paginationAriaLabel: "Pagination",
        ofWord: "of"
      }, firstPage = 1, page: pageProp = 1, offset: offset2 = null, isLastFullPageShown = false, itemsStart = null, itemsEnd = null, itemCount, perPageOptions = defaultPerPageOptions, widgetId = "options-menu", onSetPage = () => void 0, onPerPageSelect = () => void 0, onFirstClick = () => void 0, onPreviousClick = () => void 0, onNextClick = () => void 0, onPageInput = () => void 0, onLastClick = () => void 0, ouiaId, ouiaSafe = true, usePageInsets, inset } = _a, props = __rest(_a, ["children", "className", "variant", "isDisabled", "isCompact", "isSticky", "isStatic", "dropDirection", "toggleTemplate", "perPage", "titles", "firstPage", "page", "offset", "isLastFullPageShown", "itemsStart", "itemsEnd", "itemCount", "perPageOptions", "widgetId", "onSetPage", "onPerPageSelect", "onFirstClick", "onPreviousClick", "onNextClick", "onPageInput", "onLastClick", "ouiaId", "ouiaSafe", "usePageInsets", "inset"]);
      const paginationRef = React282.useRef(null);
      const getLastPage = () => (
        // when itemCount is not known let's set lastPage as page+1 as we don't know the total count
        itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1
      );
      React282.useEffect(() => {
        const node = paginationRef.current;
        handleInputWidth(getLastPage(), node);
      }, [perPage, itemCount]);
      const dropDirection = dropDirectionProp || (variant === "bottom" && !isStatic ? "up" : "down");
      let page = pageProp;
      if (offset2 !== null) {
        itemsStart = offset2 + 1;
        page = Math.max(Math.ceil(itemsStart / perPage), 1);
        itemsEnd = offset2 + perPage;
      }
      const lastPage = getLastPage();
      let firstIndex = (page - 1) * perPage + 1;
      let lastIndex = page * perPage;
      if (itemCount || itemCount === 0) {
        firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;
        if (page < firstPage && itemCount > 0) {
          page = firstPage;
        } else if (page > lastPage) {
          page = lastPage;
        }
        if (itemCount >= 0) {
          lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;
        }
      }
      const PaginationToggleTemplateProps = {
        firstIndex,
        lastIndex,
        itemCount,
        itemsTitle: titles.items,
        ofWord: titles.ofWord
      };
      return React282.createElement(
        "div",
        Object.assign({ ref: paginationRef, className: css(pagination_default.pagination, variant === PaginationVariant.bottom && pagination_default.modifiers.bottom, usePageInsets && pagination_default.modifiers.pageInsets, formatBreakpointMods(inset, pagination_default), isCompact && pagination_default.modifiers.compact, isStatic && pagination_default.modifiers.static, isSticky && pagination_default.modifiers.sticky, className) }, widgetId && { id: `${widgetId}-${variant}-pagination` }, useOUIAProps(Pagination.displayName, ouiaId, ouiaSafe, variant), props),
        variant === PaginationVariant.top && React282.createElement(
          "div",
          { className: css(pagination_default.paginationTotalItems) },
          toggleTemplate && typeof toggleTemplate === "string" && fillTemplate(toggleTemplate, PaginationToggleTemplateProps),
          toggleTemplate && typeof toggleTemplate !== "string" && toggleTemplate(PaginationToggleTemplateProps),
          !toggleTemplate && React282.createElement(ToggleTemplate, { firstIndex, lastIndex, itemCount, itemsTitle: titles.items, ofWord: titles.ofWord })
        ),
        perPageOptions && perPageOptions.length > 0 && React282.createElement(PaginationOptionsMenu, { itemsPerPageTitle: titles.itemsPerPage, perPageSuffix: titles.perPageSuffix, itemsTitle: isCompact ? "" : titles.items, optionsToggleAriaLabel: titles.optionsToggleAriaLabel, perPageOptions, firstIndex: itemsStart !== null ? itemsStart : firstIndex, lastIndex: itemsEnd !== null ? itemsEnd : lastIndex, ofWord: titles.ofWord, isLastFullPageShown, itemCount, page, perPage, lastPage, onPerPageSelect, dropDirection, widgetId: `${widgetId}-${variant}`, toggleTemplate, isDisabled }),
        React282.createElement(Navigation, { pagesTitle: titles.page, pagesTitlePlural: titles.pages, toLastPageAriaLabel: titles.toLastPageAriaLabel, toPreviousPageAriaLabel: titles.toPreviousPageAriaLabel, toNextPageAriaLabel: titles.toNextPageAriaLabel, toFirstPageAriaLabel: titles.toFirstPageAriaLabel, currPageAriaLabel: titles.currPageAriaLabel, paginationAriaLabel: titles.paginationAriaLabel, ofWord: titles.ofWord, page: itemCount && itemCount <= 0 ? 0 : page, perPage, itemCount, firstPage: itemsStart !== null ? itemsStart : 1, lastPage, onSetPage, onFirstClick, onPreviousClick, onNextClick, onLastClick, onPageInput, isDisabled, isCompact }),
        children
      );
    };
    Pagination.displayName = "Pagination";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/index.js
var init_Pagination2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Pagination/index.js"() {
    init_Pagination();
    init_ToggleTemplate();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/index.js
var init_Popover2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Popover/index.js"() {
    init_Popover();
  }
});

// node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.css
var init_progress_stepper = __esm({
  "node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.mjs
var progress_stepper_default;
var init_progress_stepper2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.mjs"() {
    init_progress_stepper();
    progress_stepper_default = {
      "faExclamationTriangle": "fa-exclamation-triangle",
      "modifiers": {
        "center": "pf-m-center",
        "compact": "pf-m-compact",
        "current": "pf-m-current",
        "pending": "pf-m-pending",
        "success": "pf-m-success",
        "danger": "pf-m-danger",
        "warning": "pf-m-warning",
        "info": "pf-m-info",
        "helpText": "pf-m-help-text",
        "horizontal": "pf-m-horizontal",
        "vertical": "pf-m-vertical",
        "horizontalOnSm": "pf-m-horizontal-on-sm",
        "verticalOnSm": "pf-m-vertical-on-sm",
        "horizontalOnMd": "pf-m-horizontal-on-md",
        "verticalOnMd": "pf-m-vertical-on-md",
        "horizontalOnLg": "pf-m-horizontal-on-lg",
        "verticalOnLg": "pf-m-vertical-on-lg",
        "horizontalOnXl": "pf-m-horizontal-on-xl",
        "verticalOnXl": "pf-m-vertical-on-xl",
        "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
        "verticalOn_2xl": "pf-m-vertical-on-2xl"
      },
      "pficon": "pf-v5-pficon",
      "progressStepper": "pf-v5-c-progress-stepper",
      "progressStepperStep": "pf-v5-c-progress-stepper__step",
      "progressStepperStepConnector": "pf-v5-c-progress-stepper__step-connector",
      "progressStepperStepDescription": "pf-v5-c-progress-stepper__step-description",
      "progressStepperStepIcon": "pf-v5-c-progress-stepper__step-icon",
      "progressStepperStepMain": "pf-v5-c-progress-stepper__step-main",
      "progressStepperStepTitle": "pf-v5-c-progress-stepper__step-title"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStepper.js
var React283, ProgressStepper;
var init_ProgressStepper = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStepper.js"() {
    init_tslib_es6();
    React283 = __toESM(require_react());
    init_progress_stepper2();
    init_esm();
    ProgressStepper = (_a) => {
      var { children, className, isCenterAligned, isVertical, isCompact, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isCenterAligned", "isVertical", "isCompact", "aria-label"]);
      return React283.createElement("ol", Object.assign({ className: css(progress_stepper_default.progressStepper, isCenterAligned && progress_stepper_default.modifiers.center, isVertical && progress_stepper_default.modifiers.vertical, isCompact && progress_stepper_default.modifiers.compact, className), role: "list", "aria-label": ariaLabel }, props), children);
    };
    ProgressStepper.displayName = "ProgressStepper";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/resources-full-icon.js
var ResourcesFullIconConfig, ResourcesFullIcon, resources_full_icon_default;
var init_resources_full_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/resources-full-icon.js"() {
    init_createIcon();
    ResourcesFullIconConfig = {
      name: "ResourcesFullIcon",
      height: 1024,
      width: 1024,
      svgPath: "M512.1,0 C229.7,0 0,229.8 0,512 C0,794.3 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0 Z M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.7,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 Z M512,224 C671.1,224 800,352.9 800,512 C800,671.1 671.1,800 512,800 C352.9,800 224,671.1 224,512 C224,352.9 352.9,224 512,224",
      yOffset: 0,
      xOffset: 0
    };
    ResourcesFullIcon = createIcon(ResourcesFullIconConfig);
    resources_full_icon_default = ResourcesFullIcon;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStep.js
var React284, ProgressStepVariant, variantIcons3, variantStyle3, ProgressStep;
var init_ProgressStep = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStep.js"() {
    init_tslib_es6();
    React284 = __toESM(require_react());
    init_progress_stepper2();
    init_esm();
    init_check_circle_icon();
    init_resources_full_icon();
    init_exclamation_triangle_icon();
    init_exclamation_circle_icon();
    (function(ProgressStepVariant2) {
      ProgressStepVariant2["default"] = "default";
      ProgressStepVariant2["pending"] = "pending";
      ProgressStepVariant2["success"] = "success";
      ProgressStepVariant2["info"] = "info";
      ProgressStepVariant2["danger"] = "danger";
      ProgressStepVariant2["warning"] = "warning";
    })(ProgressStepVariant || (ProgressStepVariant = {}));
    variantIcons3 = {
      default: void 0,
      pending: void 0,
      success: React284.createElement(check_circle_icon_default, null),
      info: React284.createElement(resources_full_icon_default, null),
      warning: React284.createElement(exclamation_triangle_icon_default, null),
      danger: React284.createElement(exclamation_circle_icon_default, null)
    };
    variantStyle3 = {
      default: "",
      info: progress_stepper_default.modifiers.info,
      success: progress_stepper_default.modifiers.success,
      pending: progress_stepper_default.modifiers.pending,
      warning: progress_stepper_default.modifiers.warning,
      danger: progress_stepper_default.modifiers.danger
    };
    ProgressStep = (_a) => {
      var { children, className, variant, isCurrent, description, icon, titleId, "aria-label": ariaLabel, popoverRender } = _a, props = __rest(_a, ["children", "className", "variant", "isCurrent", "description", "icon", "titleId", "aria-label", "popoverRender"]);
      const _icon = icon !== void 0 ? icon : variantIcons3[variant];
      const Component44 = popoverRender !== void 0 ? "button" : "div";
      const stepRef = React284.useRef();
      if (props.id === void 0 || titleId === void 0) {
        console.warn("ProgressStep: The titleId and id properties are required to make this component accessible, and one or both of these properties are missing.");
      }
      return React284.createElement(
        "li",
        Object.assign({
          className: css(progress_stepper_default.progressStepperStep, variantStyle3[variant], isCurrent && progress_stepper_default.modifiers.current, className),
          "aria-label": ariaLabel,
          // CSS style `display: contents` gives this li a generic role, we need to override that
          role: "listitem"
        }, isCurrent && { "aria-current": "step" }, props),
        React284.createElement(
          "div",
          { className: css(progress_stepper_default.progressStepperStepConnector) },
          React284.createElement("span", { className: css(progress_stepper_default.progressStepperStepIcon) }, _icon && _icon)
        ),
        React284.createElement(
          "div",
          { className: css(progress_stepper_default.progressStepperStepMain) },
          React284.createElement(
            Component44,
            Object.assign({ className: css(progress_stepper_default.progressStepperStepTitle, popoverRender && progress_stepper_default.modifiers.helpText), id: titleId, ref: stepRef }, popoverRender && { type: "button" }, props.id !== void 0 && titleId !== void 0 && popoverRender && { "aria-labelledby": `${props.id} ${titleId}` }),
            children,
            popoverRender && popoverRender(stepRef)
          ),
          description && React284.createElement("div", { className: css(progress_stepper_default.progressStepperStepDescription) }, description)
        )
      );
    };
    ProgressStep.displayName = "ProgressStep";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/index.js
var init_ProgressStepper2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/index.js"() {
    init_ProgressStepper();
    init_ProgressStep();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/Sidebar.js
var React285, Sidebar;
var init_Sidebar = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Sidebar/Sidebar.js"() {
    init_tslib_es6();
    React285 = __toESM(require_react());
    init_esm();
    init_sidebar2();
    Sidebar = (_a) => {
      var { className, children, orientation, isPanelRight = false, hasGutter, hasNoBackground, hasBorder } = _a, props = __rest(_a, ["className", "children", "orientation", "isPanelRight", "hasGutter", "hasNoBackground", "hasBorder"]);
      return React285.createElement(
        "div",
        Object.assign({ className: css(sidebar_default.sidebar, hasGutter && sidebar_default.modifiers.gutter, hasNoBackground && sidebar_default.modifiers.noBackground, isPanelRight && sidebar_default.modifiers.panelRight, sidebar_default.modifiers[orientation], className) }, props),
        React285.createElement("div", { className: css(sidebar_default.sidebarMain, hasBorder && sidebar_default.modifiers.border) }, children)
      );
    };
    Sidebar.displayName = "Sidebar";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarContent.js
var React286, SidebarContent;
var init_SidebarContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarContent.js"() {
    init_tslib_es6();
    React286 = __toESM(require_react());
    init_esm();
    init_sidebar2();
    SidebarContent = (_a) => {
      var { className, children, hasNoBackground, hasPadding } = _a, props = __rest(_a, ["className", "children", "hasNoBackground", "hasPadding"]);
      return React286.createElement("div", Object.assign({ className: css(sidebar_default.sidebarContent, hasNoBackground && sidebar_default.modifiers.noBackground, hasPadding && sidebar_default.modifiers.padding, className) }, props), children);
    };
    SidebarContent.displayName = "SidebarContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarPanel.js
var React287, SidebarPanelWidthType, SidebarPanel;
var init_SidebarPanel = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarPanel.js"() {
    init_tslib_es6();
    React287 = __toESM(require_react());
    init_esm();
    init_sidebar2();
    init_util();
    (function(SidebarPanelWidthType2) {
      SidebarPanelWidthType2["default"] = "default";
      SidebarPanelWidthType2["width25"] = "width_25";
      SidebarPanelWidthType2["width33"] = "width_33";
      SidebarPanelWidthType2["width50"] = "width_50";
      SidebarPanelWidthType2["width66"] = "width_66";
      SidebarPanelWidthType2["width75"] = "width_75";
      SidebarPanelWidthType2["width100"] = "width_100";
    })(SidebarPanelWidthType || (SidebarPanelWidthType = {}));
    SidebarPanel = (_a) => {
      var { className, children, variant = "default", hasNoBackground, hasPadding, width } = _a, props = __rest(_a, ["className", "children", "variant", "hasNoBackground", "hasPadding", "width"]);
      return React287.createElement("div", Object.assign({ className: css(sidebar_default.sidebarPanel, variant !== "default" && sidebar_default.modifiers[variant], hasNoBackground && sidebar_default.modifiers.noBackground, hasPadding && sidebar_default.modifiers.padding, formatBreakpointMods(width, sidebar_default), className) }, props), children);
    };
    SidebarPanel.displayName = "SidebarPanel";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/index.js
var init_Sidebar2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Sidebar/index.js"() {
    init_Sidebar();
    init_SidebarContent();
    init_SidebarPanel();
  }
});

// node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.css
var init_simple_list = __esm({
  "node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.mjs
var simple_list_default;
var init_simple_list2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.mjs"() {
    init_simple_list();
    simple_list_default = {
      "modifiers": {
        "current": "pf-m-current"
      },
      "simpleList": "pf-v5-c-simple-list",
      "simpleListItemLink": "pf-v5-c-simple-list__item-link",
      "simpleListSection": "pf-v5-c-simple-list__section",
      "simpleListTitle": "pf-v5-c-simple-list__title",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListGroup.js
var React288, SimpleListGroup;
var init_SimpleListGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListGroup.js"() {
    init_tslib_es6();
    React288 = __toESM(require_react());
    init_esm();
    init_simple_list2();
    SimpleListGroup = (_a) => {
      var { children = null, className = "", title = "", titleClassName = "", id = "" } = _a, props = __rest(_a, ["children", "className", "title", "titleClassName", "id"]);
      return React288.createElement(
        "section",
        Object.assign({ className: css(simple_list_default.simpleListSection) }, props),
        React288.createElement("h2", { id, className: css(simple_list_default.simpleListTitle, titleClassName), "aria-hidden": "true" }, title),
        React288.createElement("ul", { className: css("pf-v5-c-simple-list__list", className), role: "list", "aria-labelledby": id }, children)
      );
    };
    SimpleListGroup.displayName = "SimpleListGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleList.js
var React289, SimpleListContext, SimpleList;
var init_SimpleList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleList.js"() {
    init_tslib_es6();
    React289 = __toESM(require_react());
    init_esm();
    init_simple_list2();
    init_SimpleListGroup();
    SimpleListContext = React289.createContext({});
    SimpleList = class extends React289.Component {
      constructor() {
        super(...arguments);
        this.state = {
          currentRef: null
        };
        this.handleCurrentUpdate = (newCurrentRef, itemProps) => {
          this.setState({ currentRef: newCurrentRef });
          const { onSelect } = this.props;
          onSelect && onSelect(newCurrentRef, itemProps);
        };
      }
      render() {
        const _a = this.props, { children, className, onSelect, isControlled, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "onSelect", "isControlled", "aria-label"]);
        let isGrouped = false;
        if (children) {
          isGrouped = React289.Children.toArray(children)[0].type === SimpleListGroup;
        }
        return React289.createElement(
          SimpleListContext.Provider,
          { value: {
            currentRef: this.state.currentRef,
            updateCurrentRef: this.handleCurrentUpdate,
            isControlled
          } },
          React289.createElement(
            "div",
            Object.assign({ className: css(simple_list_default.simpleList, className) }, props),
            isGrouped && children,
            !isGrouped && React289.createElement("ul", { className: css("pf-v5-c-simple-list__list"), role: "list", "aria-label": ariaLabel }, children)
          )
        );
      }
    };
    SimpleList.displayName = "SimpleList";
    SimpleList.defaultProps = {
      children: null,
      className: "",
      isControlled: true
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListItem.js
var React290, SimpleListItem;
var init_SimpleListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListItem.js"() {
    init_tslib_es6();
    React290 = __toESM(require_react());
    init_esm();
    init_simple_list2();
    init_SimpleList();
    SimpleListItem = class extends React290.Component {
      constructor() {
        super(...arguments);
        this.ref = React290.createRef();
      }
      render() {
        const _a = this.props, {
          children,
          isActive,
          className,
          component: Component44,
          componentClassName,
          componentProps,
          onClick,
          type,
          href,
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          itemId
        } = _a, props = __rest(_a, ["children", "isActive", "className", "component", "componentClassName", "componentProps", "onClick", "type", "href", "itemId"]);
        return React290.createElement(SimpleListContext.Consumer, null, ({ currentRef, updateCurrentRef, isControlled }) => {
          const isButton = Component44 === "button";
          const isCurrentItem = this.ref && currentRef && isControlled ? currentRef.current === this.ref.current : isActive;
          const additionalComponentProps = isButton ? {
            type
          } : {
            tabIndex: 0,
            href
          };
          return React290.createElement(
            "li",
            Object.assign({ className: css("pf-v5-c-simple-list__item", className) }, props),
            React290.createElement(Component44, Object.assign({ className: css(simple_list_default.simpleListItemLink, isCurrentItem && simple_list_default.modifiers.current, componentClassName), onClick: (evt) => {
              onClick(evt);
              updateCurrentRef(this.ref, this.props);
            }, ref: this.ref }, componentProps, additionalComponentProps), children)
          );
        });
      }
    };
    SimpleListItem.displayName = "SimpleListItem";
    SimpleListItem.defaultProps = {
      children: null,
      className: "",
      isActive: false,
      component: "button",
      componentClassName: "",
      type: "button",
      href: "",
      onClick: () => {
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/index.js
var init_SimpleList2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SimpleList/index.js"() {
    init_SimpleList();
    init_SimpleListGroup();
    init_SimpleListItem();
  }
});

// node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.css
var init_skeleton = __esm({
  "node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.mjs
var skeleton_default;
var init_skeleton2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.mjs"() {
    init_skeleton();
    skeleton_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "circle": "pf-m-circle",
        "square": "pf-m-square",
        "widthSm": "pf-m-width-sm",
        "widthMd": "pf-m-width-md",
        "widthLg": "pf-m-width-lg",
        "width_25": "pf-m-width-25",
        "width_33": "pf-m-width-33",
        "width_50": "pf-m-width-50",
        "width_66": "pf-m-width-66",
        "width_75": "pf-m-width-75",
        "heightSm": "pf-m-height-sm",
        "heightMd": "pf-m-height-md",
        "heightLg": "pf-m-height-lg",
        "height_25": "pf-m-height-25",
        "height_33": "pf-m-height-33",
        "height_50": "pf-m-height-50",
        "height_66": "pf-m-height-66",
        "height_75": "pf-m-height-75",
        "height_100": "pf-m-height-100",
        "text_4xl": "pf-m-text-4xl",
        "text_3xl": "pf-m-text-3xl",
        "text_2xl": "pf-m-text-2xl",
        "textXl": "pf-m-text-xl",
        "textLg": "pf-m-text-lg",
        "textMd": "pf-m-text-md",
        "textSm": "pf-m-text-sm"
      },
      "skeleton": "pf-v5-c-skeleton",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Height.js
var c_skeleton_Height, c_skeleton_Height_default;
var init_c_skeleton_Height = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Height.js"() {
    c_skeleton_Height = {
      "name": "--pf-v5-c-skeleton--Height",
      "value": "calc(0.875rem * 1.5)",
      "var": "var(--pf-v5-c-skeleton--Height)"
    };
    c_skeleton_Height_default = c_skeleton_Height;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Width.js
var c_skeleton_Width, c_skeleton_Width_default;
var init_c_skeleton_Width = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Width.js"() {
    c_skeleton_Width = {
      "name": "--pf-v5-c-skeleton--Width",
      "value": "75%",
      "var": "var(--pf-v5-c-skeleton--Width)"
    };
    c_skeleton_Width_default = c_skeleton_Width;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Skeleton/Skeleton.js
var React291, Skeleton;
var init_Skeleton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Skeleton/Skeleton.js"() {
    init_tslib_es6();
    React291 = __toESM(require_react());
    init_skeleton2();
    init_esm();
    init_c_skeleton_Height();
    init_c_skeleton_Width();
    Skeleton = (_a) => {
      var { className, width, height, fontSize, shape, screenreaderText } = _a, props = __rest(_a, ["className", "width", "height", "fontSize", "shape", "screenreaderText"]);
      const fontHeightClassName = fontSize ? Object.values(skeleton_default.modifiers).find((key) => key === `pf-m-text-${fontSize}`) : void 0;
      return React291.createElement(
        "div",
        Object.assign({}, props, { className: css(skeleton_default.skeleton, fontSize && fontHeightClassName, shape === "circle" && skeleton_default.modifiers.circle, shape === "square" && skeleton_default.modifiers.square, className) }, (width || height) && {
          style: Object.assign({ [c_skeleton_Width_default.name]: width ? width : void 0, [c_skeleton_Height_default.name]: height ? height : void 0 }, props.style)
        }),
        React291.createElement("span", { className: "pf-v5-screen-reader" }, screenreaderText)
      );
    };
    Skeleton.displayName = "Skeleton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Skeleton/index.js
var init_Skeleton2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Skeleton/index.js"() {
    init_Skeleton();
  }
});

// node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.css
var init_skip_to_content = __esm({
  "node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.mjs
var skip_to_content_default;
var init_skip_to_content2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.mjs"() {
    init_skip_to_content();
    skip_to_content_default = {
      "skipToContent": "pf-v5-c-skip-to-content"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/SkipToContent.js
var React292, SkipToContent;
var init_SkipToContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/SkipToContent.js"() {
    init_tslib_es6();
    React292 = __toESM(require_react());
    init_skip_to_content2();
    init_esm();
    init_Button2();
    SkipToContent = (_a) => {
      var { children = null, className = "", href } = _a, props = __rest(_a, ["children", "className", "href"]);
      return React292.createElement(
        "div",
        Object.assign({ className: css(skip_to_content_default.skipToContent, className) }, props),
        React292.createElement(Button, { variant: ButtonVariant.primary, component: "a", href }, children)
      );
    };
    SkipToContent.displayName = "SkipToContent";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/index.js
var init_SkipToContent2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/index.js"() {
    init_SkipToContent();
  }
});

// node_modules/@patternfly/react-styles/css/components/Slider/slider.css
var init_slider = __esm({
  "node_modules/@patternfly/react-styles/css/components/Slider/slider.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Slider/slider.mjs
var slider_default;
var init_slider2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Slider/slider.mjs"() {
    init_slider();
    slider_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "formControl": "pf-v5-c-form-control",
      "modifiers": {
        "disabled": "pf-m-disabled",
        "active": "pf-m-active",
        "floating": "pf-m-floating"
      },
      "slider": "pf-v5-c-slider",
      "sliderActions": "pf-v5-c-slider__actions",
      "sliderMain": "pf-v5-c-slider__main",
      "sliderRail": "pf-v5-c-slider__rail",
      "sliderRailTrack": "pf-v5-c-slider__rail-track",
      "sliderStep": "pf-v5-c-slider__step",
      "sliderStepLabel": "pf-v5-c-slider__step-label",
      "sliderStepTick": "pf-v5-c-slider__step-tick",
      "sliderSteps": "pf-v5-c-slider__steps",
      "sliderThumb": "pf-v5-c-slider__thumb",
      "sliderValue": "pf-v5-c-slider__value"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_slider__step_Left.js
var c_slider__step_Left, c_slider_step_Left_default;
var init_c_slider_step_Left = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_slider__step_Left.js"() {
    c_slider__step_Left = {
      "name": "--pf-v5-c-slider__step--Left",
      "value": "0",
      "var": "var(--pf-v5-c-slider__step--Left)"
    };
    c_slider_step_Left_default = c_slider__step_Left;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Slider/SliderStep.js
var React293, SliderStep;
var init_SliderStep = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Slider/SliderStep.js"() {
    init_tslib_es6();
    React293 = __toESM(require_react());
    init_slider2();
    init_esm();
    init_c_slider_step_Left();
    SliderStep = (_a) => {
      var { className, label, value, isTickHidden = false, isLabelHidden = false, isActive = false } = _a, props = __rest(_a, ["className", "label", "value", "isTickHidden", "isLabelHidden", "isActive"]);
      const style = { [c_slider_step_Left_default.name]: `${value ? value : c_slider_step_Left_default.value}%` };
      return React293.createElement(
        "div",
        Object.assign({ className: css(slider_default.sliderStep, isActive && slider_default.modifiers.active, className), style }, props),
        !isTickHidden && React293.createElement("div", { className: css(slider_default.sliderStepTick) }),
        !isLabelHidden && label && React293.createElement("div", { className: css(slider_default.sliderStepLabel) }, label)
      );
    };
    SliderStep.displayName = "SliderStep";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_slider_value.js
var c_slider_value, c_slider_value_default;
var init_c_slider_value = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_slider_value.js"() {
    c_slider_value = {
      "name": "--pf-v5-c-slider--value",
      "value": "0",
      "var": "var(--pf-v5-c-slider--value)"
    };
    c_slider_value_default = c_slider_value;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_slider__value_c_form_control_width_chars.js
var c_slider__value_c_form_control_width_chars, c_slider_value_c_form_control_width_chars_default;
var init_c_slider_value_c_form_control_width_chars = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_slider__value_c_form_control_width_chars.js"() {
    c_slider__value_c_form_control_width_chars = {
      "name": "--pf-v5-c-slider__value--c-form-control--width-chars",
      "value": "3",
      "var": "var(--pf-v5-c-slider__value--c-form-control--width-chars)"
    };
    c_slider_value_c_form_control_width_chars_default = c_slider__value_c_form_control_width_chars;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Slider/Slider.js
var React294, import_react23, getPercentage, Slider;
var init_Slider = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Slider/Slider.js"() {
    init_tslib_es6();
    React294 = __toESM(require_react());
    import_react23 = __toESM(require_react());
    init_slider2();
    init_esm();
    init_SliderStep();
    init_InputGroup2();
    init_TextInput2();
    init_Tooltip2();
    init_c_slider_value();
    init_c_slider_value_c_form_control_width_chars();
    init_util();
    getPercentage = (current, max) => 100 * current / max;
    Slider = (_a) => {
      var { className, value = 0, customSteps, areCustomStepsContinuous = false, isDisabled = false, isInputVisible = false, inputValue = 0, inputLabel, inputAriaLabel = "Slider value input", thumbAriaLabel = "Value", hasTooltipOverThumb = false, inputPosition = "end", onChange, leftActions, startActions, rightActions, endActions, step = 1, min = 0, max = 100, showTicks = false, showBoundaries = true, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby } = _a, props = __rest(_a, ["className", "value", "customSteps", "areCustomStepsContinuous", "isDisabled", "isInputVisible", "inputValue", "inputLabel", "inputAriaLabel", "thumbAriaLabel", "hasTooltipOverThumb", "inputPosition", "onChange", "leftActions", "startActions", "rightActions", "endActions", "step", "min", "max", "showTicks", "showBoundaries", "aria-describedby", "aria-labelledby"]);
      const sliderRailRef = React294.useRef();
      const thumbRef = React294.useRef();
      const [localValue, setValue] = (0, import_react23.useState)(value);
      const [localInputValue, setLocalInputValue] = (0, import_react23.useState)(inputValue);
      let isRTL;
      React294.useEffect(() => {
        isRTL = getLanguageDirection(sliderRailRef.current) === "rtl";
      });
      React294.useEffect(() => {
        setValue(value);
      }, [value]);
      React294.useEffect(() => {
        setLocalInputValue(inputValue);
      }, [inputValue]);
      let diff = 0;
      let snapValue;
      const stylePercent = (localValue - min) * 100 / (max - min);
      const style = { [c_slider_value_default.name]: `${stylePercent}%` };
      const widthChars = React294.useMemo(() => localInputValue.toString().length, [localInputValue]);
      const inputStyle = { [c_slider_value_c_form_control_width_chars_default.name]: widthChars };
      const onChangeHandler = (_event, value2) => {
        setLocalInputValue(Number(value2));
      };
      const handleKeyPressOnInput = (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          if (onChange) {
            onChange(event, localValue, localInputValue, setLocalInputValue);
          }
        }
      };
      const onInputFocus = (e) => {
        e.stopPropagation();
      };
      const onThumbClick = () => {
        thumbRef.current.focus();
      };
      const onBlur = (event) => {
        if (onChange) {
          onChange(event, localValue, localInputValue, setLocalInputValue);
        }
      };
      const findAriaTextValue = () => {
        if (!areCustomStepsContinuous && customSteps) {
          const matchingStep = customSteps.find((stepObj) => stepObj.value === localValue);
          if (matchingStep) {
            return matchingStep.label;
          }
        }
        return Number(Number(localValue).toFixed(2)).toString();
      };
      const handleThumbDragEnd = () => {
        document.removeEventListener("mousemove", callbackThumbMove);
        document.removeEventListener("mouseup", callbackThumbUp);
        document.removeEventListener("touchmove", callbackThumbMove);
        document.removeEventListener("touchend", callbackThumbUp);
        document.removeEventListener("touchcancel", callbackThumbUp);
      };
      const handleMouseDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        if (isRTL) {
          diff = thumbRef.current.getBoundingClientRect().right - e.clientX;
        } else {
          diff = e.clientX - thumbRef.current.getBoundingClientRect().left;
        }
        document.addEventListener("mousemove", callbackThumbMove);
        document.addEventListener("mouseup", callbackThumbUp);
      };
      const handleTouchStart = (e) => {
        e.stopPropagation();
        if (isRTL) {
          diff = thumbRef.current.getBoundingClientRect().right - e.touches[0].clientX;
        } else {
          diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;
        }
        document.addEventListener("touchmove", callbackThumbMove, { passive: false });
        document.addEventListener("touchend", callbackThumbUp);
        document.addEventListener("touchcancel", callbackThumbUp);
      };
      const onSliderRailClick = (e) => {
        handleThumbMove(e);
        if (snapValue && !areCustomStepsContinuous) {
          thumbRef.current.style.setProperty(c_slider_value_default.name, `${snapValue}%`);
          setValue(snapValue);
          if (onChange) {
            onChange(e, snapValue);
          }
        }
      };
      const handleThumbMove = (e) => {
        if (e.type === "touchmove") {
          e.preventDefault();
          e.stopImmediatePropagation();
        }
        const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;
        let newPosition;
        if (isRTL) {
          newPosition = sliderRailRef.current.getBoundingClientRect().right - clientPosition - diff;
        } else {
          newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;
        }
        const end2 = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;
        const start2 = 0;
        if (newPosition < start2) {
          newPosition = 0;
        }
        if (newPosition > end2) {
          newPosition = end2;
        }
        const newPercentage = getPercentage(newPosition, end2);
        thumbRef.current.style.setProperty(c_slider_value_default.name, `${newPercentage}%`);
        const newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;
        setValue(newValue);
        if (!customSteps) {
          snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;
          thumbRef.current.style.setProperty(c_slider_value_default.name, `${snapValue}%`);
          setValue(snapValue);
        }
        if (!areCustomStepsContinuous && customSteps) {
          let percentage = newPercentage;
          if (customSteps[customSteps.length - 1].value !== 100) {
            percentage = newPercentage * (max - min) / 100 + min;
          }
          const stepIndex = customSteps.findIndex((stepObj) => stepObj.value >= percentage);
          if (customSteps[stepIndex].value === percentage) {
            snapValue = customSteps[stepIndex].value;
          } else {
            const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;
            if (midpoint > percentage) {
              snapValue = customSteps[stepIndex - 1].value;
            } else {
              snapValue = customSteps[stepIndex].value;
            }
          }
          setValue(snapValue);
        }
        if (onChange) {
          if (snapValue !== void 0) {
            onChange(e, snapValue);
          } else {
            onChange(e, newValue);
          }
        }
      };
      const callbackThumbMove = React294.useCallback(handleThumbMove, [min, max, customSteps, onChange]);
      const callbackThumbUp = React294.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);
      const handleThumbKeys = (e) => {
        const key = e.key;
        if (key !== "ArrowLeft" && key !== "ArrowRight") {
          return;
        }
        e.preventDefault();
        let newValue = localValue;
        if (!areCustomStepsContinuous && customSteps) {
          const stepIndex = customSteps.findIndex((stepObj) => stepObj.value === localValue);
          if (key === "ArrowRight") {
            if (isRTL) {
              if (stepIndex - 1 >= 0) {
                newValue = customSteps[stepIndex - 1].value;
              }
            } else {
              if (stepIndex + 1 < customSteps.length) {
                {
                  newValue = customSteps[stepIndex + 1].value;
                }
              }
            }
          } else if (key === "ArrowLeft") {
            if (isRTL) {
              if (stepIndex + 1 < customSteps.length) {
                {
                  newValue = customSteps[stepIndex + 1].value;
                }
              }
            } else {
              if (stepIndex - 1 >= 0) {
                newValue = customSteps[stepIndex - 1].value;
              }
            }
          }
        } else {
          if (key === "ArrowRight") {
            if (isRTL) {
              newValue = localValue - step >= min ? localValue - step : min;
            } else {
              newValue = localValue + step <= max ? localValue + step : max;
            }
          } else if (key === "ArrowLeft") {
            if (isRTL) {
              newValue = localValue + step <= max ? localValue + step : max;
            } else {
              newValue = localValue - step >= min ? localValue - step : min;
            }
          }
        }
        if (newValue !== localValue) {
          thumbRef.current.style.setProperty(c_slider_value_default.name, `${newValue}%`);
          setValue(newValue);
          if (onChange) {
            onChange(e, newValue);
          }
        }
      };
      const displayInput = () => {
        const textInput = React294.createElement(TextInput, { isDisabled, type: "number", value: localInputValue, "aria-label": inputAriaLabel, onKeyDown: handleKeyPressOnInput, onChange: onChangeHandler, onClick: onInputFocus, onFocus: onInputFocus, onBlur });
        if (inputLabel) {
          return React294.createElement(
            InputGroup,
            null,
            React294.createElement(InputGroupItem, { isFill: true }, textInput),
            React294.createElement(InputGroupText, { isDisabled }, inputLabel)
          );
        } else {
          return textInput;
        }
      };
      const getStepValue = (val, min2, max2) => (val - min2) * 100 / (max2 - min2);
      const buildSteps2 = () => {
        const builtSteps = [];
        for (let i = min; i <= max; i = i + step) {
          const stepValue = getStepValue(i, min, max);
          if (!showTicks && showBoundaries && i !== min && i !== max) {
            continue;
          }
          builtSteps.push(React294.createElement(SliderStep, { key: i, value: stepValue, label: i.toString(), isTickHidden: !showTicks, isLabelHidden: (i === min || i === max) && showBoundaries ? false : true, isActive: i <= localValue }));
        }
        return builtSteps;
      };
      const thumbComponent = React294.createElement("div", { className: css(slider_default.sliderThumb), ref: thumbRef, tabIndex: isDisabled ? -1 : 0, role: "slider", "aria-valuemin": customSteps ? customSteps[0].value : min, "aria-valuemax": customSteps ? customSteps[customSteps.length - 1].value : max, "aria-valuenow": localValue, "aria-valuetext": findAriaTextValue(), "aria-label": thumbAriaLabel, "aria-disabled": isDisabled, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, onMouseDown: !isDisabled ? handleMouseDown : null, onTouchStart: !isDisabled ? handleTouchStart : null, onKeyDown: !isDisabled ? handleThumbKeys : null, onClick: !isDisabled ? onThumbClick : null });
      return React294.createElement(
        "div",
        Object.assign({ className: css(slider_default.slider, className, isDisabled && slider_default.modifiers.disabled), style: Object.assign(Object.assign({}, style), inputStyle) }, props),
        (leftActions || startActions) && React294.createElement("div", { className: css(slider_default.sliderActions) }, leftActions || startActions),
        React294.createElement(
          "div",
          { className: css(slider_default.sliderMain) },
          React294.createElement(
            "div",
            { className: css(slider_default.sliderRail), ref: sliderRailRef, onClick: !isDisabled ? onSliderRailClick : null },
            React294.createElement("div", { className: css(slider_default.sliderRailTrack) })
          ),
          customSteps && React294.createElement("div", { className: css(slider_default.sliderSteps), "aria-hidden": "true" }, customSteps.map((stepObj) => {
            const minValue = customSteps[0].value;
            const maxValue = customSteps[customSteps.length - 1].value;
            const stepValue = getStepValue(stepObj.value, minValue, maxValue);
            return React294.createElement(SliderStep, { key: stepObj.value, value: stepValue, label: stepObj.label, isLabelHidden: stepObj.isLabelHidden, isActive: stepObj.value <= localValue });
          })),
          !customSteps && (showTicks || showBoundaries) && React294.createElement("div", { className: css(slider_default.sliderSteps), "aria-hidden": "true" }, buildSteps2()),
          hasTooltipOverThumb ? React294.createElement(Tooltip, { triggerRef: thumbRef, entryDelay: 0, content: findAriaTextValue() }, thumbComponent) : thumbComponent,
          isInputVisible && inputPosition === "aboveThumb" && React294.createElement("div", { className: css(slider_default.sliderValue, slider_default.modifiers.floating) }, displayInput())
        ),
        isInputVisible && (inputPosition === "right" || inputPosition === "end") && React294.createElement("div", { className: css(slider_default.sliderValue) }, displayInput()),
        (rightActions || endActions) && React294.createElement("div", { className: css(slider_default.sliderActions) }, rightActions || endActions)
      );
    };
    Slider.displayName = "Slider";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Slider/index.js
var init_Slider2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Slider/index.js"() {
    init_Slider();
  }
});

// node_modules/@patternfly/react-styles/css/components/Switch/switch.css
var init_switch = __esm({
  "node_modules/@patternfly/react-styles/css/components/Switch/switch.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Switch/switch.mjs
var switch_default;
var init_switch2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Switch/switch.mjs"() {
    init_switch();
    switch_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "reverse": "pf-m-reverse",
        "off": "pf-m-off",
        "on": "pf-m-on"
      },
      "switch": "pf-v5-c-switch",
      "switchInput": "pf-v5-c-switch__input",
      "switchLabel": "pf-v5-c-switch__label",
      "switchToggle": "pf-v5-c-switch__toggle",
      "switchToggleIcon": "pf-v5-c-switch__toggle-icon",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Switch/Switch.js
var React295, Switch;
var init_Switch = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Switch/Switch.js"() {
    init_tslib_es6();
    React295 = __toESM(require_react());
    init_switch2();
    init_esm();
    init_check_icon();
    init_util();
    init_helpers();
    Switch = class _Switch extends React295.Component {
      constructor(props) {
        super(props);
        if (!props.label && !props["aria-label"]) {
          console.error("Switch: Switch requires either a label or an aria-label to be specified");
        }
        this.id = props.id || getUniqueId();
        this.state = {
          ouiaStateId: getDefaultOUIAId(_Switch.displayName)
        };
      }
      render() {
        const _a = this.props, {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          id,
          className,
          label,
          labelOff,
          isChecked,
          defaultChecked,
          hasCheckIcon,
          isDisabled,
          onChange,
          isReversed,
          ouiaId,
          ouiaSafe
        } = _a, props = __rest(_a, ["id", "className", "label", "labelOff", "isChecked", "defaultChecked", "hasCheckIcon", "isDisabled", "onChange", "isReversed", "ouiaId", "ouiaSafe"]);
        const isAriaLabelledBy = props["aria-label"] === "";
        return React295.createElement(
          "label",
          Object.assign({ className: css(switch_default.switch, isReversed && switch_default.modifiers.reverse, className), htmlFor: this.id }, getOUIAProps(_Switch.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)),
          React295.createElement("input", Object.assign({ id: this.id, className: css(switch_default.switchInput), type: "checkbox", onChange: (event) => onChange(event, event.target.checked) }, defaultChecked !== void 0 ? { defaultChecked } : { checked: isChecked }, { disabled: isDisabled, "aria-labelledby": !isAriaLabelledBy ? null : `${this.id}-${isChecked !== true ? "off" : "on"}` }, props)),
          label !== void 0 ? React295.createElement(
            React295.Fragment,
            null,
            React295.createElement("span", { className: css(switch_default.switchToggle) }, hasCheckIcon && React295.createElement(
              "span",
              { className: css(switch_default.switchToggleIcon), "aria-hidden": "true" },
              React295.createElement(check_icon_default, null)
            )),
            React295.createElement("span", { className: css(switch_default.switchLabel, switch_default.modifiers.on), id: isAriaLabelledBy ? `${this.id}-on` : null, "aria-hidden": "true" }, label),
            React295.createElement("span", { className: css(switch_default.switchLabel, switch_default.modifiers.off), id: isAriaLabelledBy ? `${this.id}-off` : null, "aria-hidden": "true" }, labelOff !== void 0 ? labelOff : label)
          ) : React295.createElement(
            "span",
            { className: css(switch_default.switchToggle) },
            React295.createElement(
              "div",
              { className: css(switch_default.switchToggleIcon), "aria-hidden": "true" },
              React295.createElement(check_icon_default, null)
            )
          )
        );
      }
    };
    Switch.displayName = "Switch";
    Switch.defaultProps = {
      isChecked: true,
      isDisabled: false,
      isReversed: false,
      "aria-label": "",
      onChange: () => void 0
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Switch/index.js
var init_Switch2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Switch/index.js"() {
    init_Switch();
  }
});

// node_modules/@patternfly/react-styles/css/components/Tabs/tabs.css
var init_tabs = __esm({
  "node_modules/@patternfly/react-styles/css/components/Tabs/tabs.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Tabs/tabs.mjs
var tabs_default;
var init_tabs2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Tabs/tabs.mjs"() {
    init_tabs();
    tabs_default = {
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "fill": "pf-m-fill",
        "scrollable": "pf-m-scrollable",
        "noBorderBottom": "pf-m-no-border-bottom",
        "box": "pf-m-box",
        "vertical": "pf-m-vertical",
        "current": "pf-m-current",
        "colorSchemeLight_300": "pf-m-color-scheme--light-300",
        "expandable": "pf-m-expandable",
        "nonExpandable": "pf-m-non-expandable",
        "expandableOnSm": "pf-m-expandable-on-sm",
        "nonExpandableOnSm": "pf-m-non-expandable-on-sm",
        "expandableOnMd": "pf-m-expandable-on-md",
        "nonExpandableOnMd": "pf-m-non-expandable-on-md",
        "expandableOnLg": "pf-m-expandable-on-lg",
        "nonExpandableOnLg": "pf-m-non-expandable-on-lg",
        "expandableOnXl": "pf-m-expandable-on-xl",
        "nonExpandableOnXl": "pf-m-non-expandable-on-xl",
        "expandableOn_2xl": "pf-m-expandable-on-2xl",
        "nonExpandableOn_2xl": "pf-m-non-expandable-on-2xl",
        "expanded": "pf-m-expanded",
        "secondary": "pf-m-secondary",
        "pageInsets": "pf-m-page-insets",
        "overflow": "pf-m-overflow",
        "action": "pf-m-action",
        "active": "pf-m-active",
        "disabled": "pf-m-disabled",
        "ariaDisabled": "pf-m-aria-disabled",
        "insetNone": "pf-m-inset-none",
        "insetSm": "pf-m-inset-sm",
        "insetMd": "pf-m-inset-md",
        "insetLg": "pf-m-inset-lg",
        "insetXl": "pf-m-inset-xl",
        "inset_2xl": "pf-m-inset-2xl",
        "insetNoneOnSm": "pf-m-inset-none-on-sm",
        "insetSmOnSm": "pf-m-inset-sm-on-sm",
        "insetMdOnSm": "pf-m-inset-md-on-sm",
        "insetLgOnSm": "pf-m-inset-lg-on-sm",
        "insetXlOnSm": "pf-m-inset-xl-on-sm",
        "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
        "insetNoneOnMd": "pf-m-inset-none-on-md",
        "insetSmOnMd": "pf-m-inset-sm-on-md",
        "insetMdOnMd": "pf-m-inset-md-on-md",
        "insetLgOnMd": "pf-m-inset-lg-on-md",
        "insetXlOnMd": "pf-m-inset-xl-on-md",
        "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
        "insetNoneOnLg": "pf-m-inset-none-on-lg",
        "insetSmOnLg": "pf-m-inset-sm-on-lg",
        "insetMdOnLg": "pf-m-inset-md-on-lg",
        "insetLgOnLg": "pf-m-inset-lg-on-lg",
        "insetXlOnLg": "pf-m-inset-xl-on-lg",
        "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
        "insetNoneOnXl": "pf-m-inset-none-on-xl",
        "insetSmOnXl": "pf-m-inset-sm-on-xl",
        "insetMdOnXl": "pf-m-inset-md-on-xl",
        "insetLgOnXl": "pf-m-inset-lg-on-xl",
        "insetXlOnXl": "pf-m-inset-xl-on-xl",
        "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
        "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
        "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
        "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
        "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
        "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
        "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
      },
      "tabs": "pf-v5-c-tabs",
      "tabsAdd": "pf-v5-c-tabs__add",
      "tabsItem": "pf-v5-c-tabs__item",
      "tabsItemAction": "pf-v5-c-tabs__item-action",
      "tabsItemActionIcon": "pf-v5-c-tabs__item-action-icon",
      "tabsItemIcon": "pf-v5-c-tabs__item-icon",
      "tabsItemText": "pf-v5-c-tabs__item-text",
      "tabsLink": "pf-v5-c-tabs__link",
      "tabsLinkToggleIcon": "pf-v5-c-tabs__link-toggle-icon",
      "tabsList": "pf-v5-c-tabs__list",
      "tabsScrollButton": "pf-v5-c-tabs__scroll-button",
      "tabsToggle": "pf-v5-c-tabs__toggle",
      "tabsToggleButton": "pf-v5-c-tabs__toggle-button",
      "tabsToggleIcon": "pf-v5-c-tabs__toggle-icon",
      "tabsToggleText": "pf-v5-c-tabs__toggle-text",
      "themeDark": "pf-v5-theme-dark"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabButton.js
var React296, TabButton;
var init_TabButton = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabButton.js"() {
    init_tslib_es6();
    React296 = __toESM(require_react());
    init_helpers();
    TabButton = (_a) => {
      var {
        children,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        tabContentRef,
        ouiaId,
        parentInnerRef,
        ouiaSafe
      } = _a, props = __rest(_a, ["children", "tabContentRef", "ouiaId", "parentInnerRef", "ouiaSafe"]);
      const Component44 = props.href ? "a" : "button";
      return React296.createElement(Component44, Object.assign({}, !props.href && { type: "button" }, { ref: parentInnerRef }, getOUIAProps(TabButton.displayName, ouiaId, ouiaSafe), props), children);
    };
    TabButton.displayName = "TabButton";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabsContext.js
var React297, TabsContext, TabsContextProvider, TabsContextConsumer;
var init_TabsContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabsContext.js"() {
    React297 = __toESM(require_react());
    TabsContext = React297.createContext({
      variant: "default",
      mountOnEnter: false,
      unmountOnExit: false,
      localActiveKey: "",
      uniqueId: "",
      handleTabClick: () => null,
      handleTabClose: void 0
    });
    TabsContextProvider = TabsContext.Provider;
    TabsContextConsumer = TabsContext.Consumer;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabAction.js
var React298, TabActionBase, TabAction;
var init_TabAction = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabAction.js"() {
    init_tslib_es6();
    React298 = __toESM(require_react());
    init_esm();
    init_tabs2();
    init_Button2();
    init_helpers();
    TabActionBase = (_a) => {
      var {
        children,
        className,
        onClick,
        isDisabled,
        "aria-label": ariaLabel = "Tab action",
        innerRef,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ouiaId,
        ouiaSafe
      } = _a, props = __rest(_a, ["children", "className", "onClick", "isDisabled", "aria-label", "innerRef", "ouiaId", "ouiaSafe"]);
      return React298.createElement(
        "span",
        { className: css(tabs_default.tabsItemAction, className) },
        React298.createElement(
          Button,
          Object.assign({ ref: innerRef, type: "button", variant: "plain", "aria-label": ariaLabel, onClick, isDisabled }, getOUIAProps(TabAction.displayName, ouiaId, ouiaSafe), props),
          React298.createElement("span", { className: css(tabs_default.tabsItemActionIcon) }, children)
        )
      );
    };
    TabAction = React298.forwardRef((props, ref) => React298.createElement(TabActionBase, Object.assign({}, props, { innerRef: ref })));
    TabAction.displayName = "TabAction";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js
var React299, TabBase, Tab;
var init_Tab = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js"() {
    init_tslib_es6();
    React299 = __toESM(require_react());
    init_tabs2();
    init_TabButton();
    init_TabsContext();
    init_esm();
    init_Tooltip2();
    init_times_icon();
    init_TabAction();
    TabBase = (_a) => {
      var { title, eventKey, tabContentRef, id: childId, tabContentId, className: childClassName = "", ouiaId: childOuiaId, isDisabled, isAriaDisabled, inoperableEvents = ["onClick", "onKeyPress"], href, innerRef, tooltip, closeButtonAriaLabel, isCloseDisabled = false, actions } = _a, props = __rest(_a, ["title", "eventKey", "tabContentRef", "id", "tabContentId", "className", "ouiaId", "isDisabled", "isAriaDisabled", "inoperableEvents", "href", "innerRef", "tooltip", "closeButtonAriaLabel", "isCloseDisabled", "actions"]);
      const preventedEvents = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
        event.preventDefault();
      } }), {});
      const { mountOnEnter, localActiveKey, unmountOnExit, uniqueId, handleTabClick, handleTabClose } = React299.useContext(TabsContext);
      let ariaControls = tabContentId ? `${tabContentId}` : `pf-tab-section-${eventKey}-${childId || uniqueId}`;
      if ((mountOnEnter || unmountOnExit) && eventKey !== localActiveKey) {
        ariaControls = void 0;
      }
      const isButtonElement = Boolean(!href);
      const getDefaultTabIdx = () => {
        if (isDisabled) {
          return isButtonElement ? null : -1;
        } else if (isAriaDisabled) {
          return null;
        }
      };
      const tabButton = React299.createElement(TabButton, Object.assign({ parentInnerRef: innerRef, className: css(tabs_default.tabsLink, isDisabled && href && tabs_default.modifiers.disabled, isAriaDisabled && tabs_default.modifiers.ariaDisabled), disabled: isButtonElement ? isDisabled : null, "aria-disabled": isDisabled || isAriaDisabled, tabIndex: getDefaultTabIdx(), onClick: (event) => handleTabClick(event, eventKey, tabContentRef) }, isAriaDisabled ? preventedEvents : null, { id: `pf-tab-${eventKey}-${childId || uniqueId}`, "aria-controls": ariaControls, tabContentRef, ouiaId: childOuiaId, href, role: "tab", "aria-selected": eventKey === localActiveKey }, props), title);
      return React299.createElement(
        "li",
        { className: css(tabs_default.tabsItem, eventKey === localActiveKey && tabs_default.modifiers.current, (handleTabClose || actions) && tabs_default.modifiers.action, (isDisabled || isAriaDisabled) && tabs_default.modifiers.disabled, childClassName), role: "presentation" },
        tooltip ? React299.createElement(Tooltip, Object.assign({}, tooltip.props), tabButton) : tabButton,
        actions && actions,
        handleTabClose !== void 0 && React299.createElement(
          TabAction,
          { "aria-label": closeButtonAriaLabel || "Close tab", onClick: (event) => handleTabClose(event, eventKey, tabContentRef), isDisabled: isCloseDisabled },
          React299.createElement(times_icon_default, null)
        )
      );
    };
    Tab = React299.forwardRef((props, ref) => React299.createElement(TabBase, Object.assign({ innerRef: ref }, props)));
    Tab.displayName = "Tab";
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/plus-icon.js
var PlusIconConfig, PlusIcon, plus_icon_default;
var init_plus_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/plus-icon.js"() {
    init_createIcon();
    PlusIconConfig = {
      name: "PlusIcon",
      height: 512,
      width: 448,
      svgPath: "M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z",
      yOffset: 0,
      xOffset: 0
    };
    PlusIcon = createIcon(PlusIconConfig);
    plus_icon_default = PlusIcon;
  }
});

// node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.css
var init_tab_content = __esm({
  "node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.mjs
var tab_content_default;
var init_tab_content2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.mjs"() {
    init_tab_content();
    tab_content_default = {
      "modifiers": {
        "light_300": "pf-m-light-300",
        "padding": "pf-m-padding"
      },
      "tabContent": "pf-v5-c-tab-content",
      "tabContentBody": "pf-v5-c-tab-content__body"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContent.js
var React300, variantStyle4, TabContentBase, TabContent;
var init_TabContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContent.js"() {
    init_tslib_es6();
    React300 = __toESM(require_react());
    init_tab_content2();
    init_esm();
    init_helpers();
    init_TabsContext();
    variantStyle4 = {
      default: "",
      light300: tab_content_default.modifiers.light_300
    };
    TabContentBase = (_a) => {
      var {
        id,
        activeKey,
        "aria-label": ariaLabel,
        child,
        children,
        className,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        eventKey,
        innerRef,
        ouiaId,
        ouiaSafe
      } = _a, props = __rest(_a, ["id", "activeKey", "aria-label", "child", "children", "className", "eventKey", "innerRef", "ouiaId", "ouiaSafe"]);
      if (children || child) {
        let labelledBy;
        if (ariaLabel) {
          labelledBy = null;
        } else {
          labelledBy = children ? `${id}` : `pf-tab-${child.props.eventKey}-${id}`;
        }
        return React300.createElement(TabsContextConsumer, null, ({ variant }) => React300.createElement("section", Object.assign({ ref: innerRef, hidden: children ? null : child.props.eventKey !== activeKey, className: children ? css(tab_content_default.tabContent, className, variantStyle4[variant]) : css(tab_content_default.tabContent, child.props.className, variantStyle4[variant]), id: children ? id : `pf-tab-section-${child.props.eventKey}-${id}`, "aria-label": ariaLabel, "aria-labelledby": labelledBy, role: "tabpanel", tabIndex: 0 }, getOUIAProps("TabContent", ouiaId, ouiaSafe), props), children || child.props.children));
      }
      return null;
    };
    TabContent = React300.forwardRef((props, ref) => React300.createElement(TabContentBase, Object.assign({}, props, { innerRef: ref })));
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleText.js
var React301, TabTitleText;
var init_TabTitleText = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleText.js"() {
    init_tslib_es6();
    React301 = __toESM(require_react());
    init_esm();
    init_tabs2();
    TabTitleText = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React301.createElement("span", Object.assign({ className: css(tabs_default.tabsItemText, className) }, props), children);
    };
    TabTitleText.displayName = "TabTitleText";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/OverflowTab.js
var import_react24, OverflowTab;
var init_OverflowTab = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/OverflowTab.js"() {
    init_tslib_es6();
    import_react24 = __toESM(require_react());
    init_tabs2();
    init_esm();
    init_angle_right_icon();
    init_helpers();
    init_Menu2();
    init_TabsContext();
    init_TabTitleText();
    OverflowTab = (_a) => {
      var { className, overflowingTabs = [], showTabCount, defaultTitleText = "More", toggleAriaLabel, zIndex = 9999 } = _a, props = __rest(_a, ["className", "overflowingTabs", "showTabCount", "defaultTitleText", "toggleAriaLabel", "zIndex"]);
      const menuRef = import_react24.default.useRef();
      const overflowTabRef = import_react24.default.useRef();
      const overflowLIRef = import_react24.default.useRef();
      const [isExpanded, setIsExpanded] = import_react24.default.useState(false);
      const { localActiveKey, handleTabClick } = import_react24.default.useContext(TabsContext);
      const closeMenu = () => {
        setIsExpanded(false);
        overflowTabRef.current.focus();
      };
      const handleMenuKeys = (ev) => {
        var _a2;
        const menuContainsEventTarget = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(ev.target);
        if (isExpanded && menuContainsEventTarget && ev.key === "Escape") {
          closeMenu();
        }
      };
      const handleClick = (ev) => {
        var _a2, _b;
        const clickIsOutsideMenu = !((_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(ev.target));
        const clickIsOutsideOverflowTab = !((_b = overflowTabRef === null || overflowTabRef === void 0 ? void 0 : overflowTabRef.current) === null || _b === void 0 ? void 0 : _b.contains(ev.target));
        if (isExpanded && clickIsOutsideMenu && clickIsOutsideOverflowTab) {
          closeMenu();
        }
      };
      import_react24.default.useEffect(() => {
        window.addEventListener("click", handleClick);
        window.addEventListener("keydown", handleMenuKeys);
        return () => {
          window.removeEventListener("click", handleClick);
          window.removeEventListener("keydown", handleMenuKeys);
        };
      }, [isExpanded, menuRef, overflowTabRef]);
      const selectedTab = overflowingTabs.find((tab) => tab.eventKey === localActiveKey);
      const tabTitle = (selectedTab === null || selectedTab === void 0 ? void 0 : selectedTab.title) ? selectedTab.title : defaultTitleText;
      const toggleMenu = () => {
        setIsExpanded((prevIsExpanded) => !prevIsExpanded);
        setTimeout(() => {
          if (menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) {
            const firstElement = menuRef.current.querySelector("li > button,input:not(:disabled)");
            firstElement && firstElement.focus();
          }
        }, 0);
      };
      const overflowTab = import_react24.default.createElement(
        "li",
        Object.assign({ className: css(tabs_default.tabsItem, tabs_default.modifiers.overflow, selectedTab && tabs_default.modifiers.current, className), role: "presentation", ref: overflowLIRef }, props),
        import_react24.default.createElement(
          "button",
          { type: "button", className: css(tabs_default.tabsLink, isExpanded && tabs_default.modifiers.expanded), onClick: () => toggleMenu(), "aria-label": toggleAriaLabel, "aria-haspopup": "menu", "aria-expanded": isExpanded, role: "tab", ref: overflowTabRef },
          import_react24.default.createElement(
            TabTitleText,
            null,
            tabTitle,
            showTabCount && tabTitle === defaultTitleText && ` (${overflowingTabs.length})`
          ),
          import_react24.default.createElement(
            "span",
            { className: tabs_default.tabsLinkToggleIcon },
            import_react24.default.createElement(angle_right_icon_default, null)
          )
        )
      );
      const tabs = overflowingTabs.map((tab) => import_react24.default.createElement(MenuItem, { key: tab.eventKey, itemId: tab.eventKey, isSelected: localActiveKey === tab.eventKey }, tab.title));
      const onTabSelect = (event, key) => {
        closeMenu();
        const selectedTabRef = overflowingTabs.find((tab) => tab.eventKey === key).tabContentRef;
        handleTabClick(event, key, selectedTabRef);
      };
      const overflowMenu = import_react24.default.createElement(
        Menu,
        { ref: menuRef, onSelect: (ev, itemId) => onTabSelect(ev, itemId) },
        import_react24.default.createElement(
          MenuContent,
          null,
          import_react24.default.createElement(MenuList, null, tabs)
        )
      );
      return import_react24.default.createElement(
        import_react24.default.Fragment,
        null,
        overflowTab,
        import_react24.default.createElement(Popper, { triggerRef: overflowTabRef, popper: overflowMenu, popperRef: menuRef, isVisible: isExpanded, minWidth: "revert", appendTo: overflowLIRef.current, zIndex })
      );
    };
    OverflowTab.displayName = "OverflowTab";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js
var React303, TabsComponent, variantStyle5, Tabs;
var init_Tabs = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js"() {
    init_tslib_es6();
    React303 = __toESM(require_react());
    init_tabs2();
    init_button2();
    init_esm();
    init_angle_left_icon();
    init_angle_right_icon();
    init_plus_icon();
    init_util();
    init_TabContent();
    init_TabsContext();
    init_OverflowTab();
    init_Button2();
    init_helpers();
    init_GenerateId();
    (function(TabsComponent2) {
      TabsComponent2["div"] = "div";
      TabsComponent2["nav"] = "nav";
    })(TabsComponent || (TabsComponent = {}));
    variantStyle5 = {
      default: "",
      light300: tabs_default.modifiers.colorSchemeLight_300
    };
    Tabs = class _Tabs extends React303.Component {
      constructor(props) {
        super(props);
        this.tabList = React303.createRef();
        this.leftScrollButtonRef = React303.createRef();
        this.direction = "ltr";
        this.scrollTimeout = null;
        this.countOverflowingElements = (container) => {
          const elements = Array.from(container.children);
          return elements.filter((element) => !isElementInView(container, element, false)).length;
        };
        this.handleScrollButtons = () => {
          const { isOverflowHorizontal } = this.props;
          clearTimeout(this.scrollTimeout);
          this.scrollTimeout = setTimeout(() => {
            const container = this.tabList.current;
            let disableBackScrollButton = true;
            let disableForwardScrollButton = true;
            let enableScrollButtons = false;
            let overflowingTabCount = 0;
            if (container && !this.props.isVertical && !isOverflowHorizontal) {
              const overflowOnLeft = !isElementInView(container, container.firstChild, false);
              const overflowOnRight = !isElementInView(container, container.lastChild, false);
              enableScrollButtons = overflowOnLeft || overflowOnRight;
              disableBackScrollButton = !overflowOnLeft;
              disableForwardScrollButton = !overflowOnRight;
            }
            if (isOverflowHorizontal) {
              overflowingTabCount = this.countOverflowingElements(container);
            }
            this.setState({
              enableScrollButtons,
              disableBackScrollButton,
              disableForwardScrollButton,
              overflowingTabCount
            });
          }, 100);
        };
        this.scrollBack = () => {
          if (this.tabList.current) {
            const container = this.tabList.current;
            const childrenArr = Array.from(container.children);
            let firstElementInView;
            let lastElementOutOfView;
            let i;
            for (i = 0; i < childrenArr.length && !firstElementInView; i++) {
              if (isElementInView(container, childrenArr[i], false)) {
                firstElementInView = childrenArr[i];
                lastElementOutOfView = childrenArr[i - 1];
              }
            }
            if (lastElementOutOfView) {
              if (this.direction === "ltr") {
                container.scrollLeft -= lastElementOutOfView.scrollWidth;
              } else {
                container.scrollLeft += lastElementOutOfView.scrollWidth;
              }
            }
          }
        };
        this.scrollForward = () => {
          if (this.tabList.current) {
            const container = this.tabList.current;
            const childrenArr = Array.from(container.children);
            let lastElementInView;
            let firstElementOutOfView;
            for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
              if (isElementInView(container, childrenArr[i], false)) {
                lastElementInView = childrenArr[i];
                firstElementOutOfView = childrenArr[i + 1];
              }
            }
            if (firstElementOutOfView) {
              if (this.direction === "ltr") {
                container.scrollLeft += firstElementOutOfView.scrollWidth;
              } else {
                container.scrollLeft -= firstElementOutOfView.scrollWidth;
              }
            }
          }
        };
        this.hideScrollButtons = () => {
          const { enableScrollButtons, renderScrollButtons, showScrollButtons } = this.state;
          if (!enableScrollButtons && !showScrollButtons && renderScrollButtons) {
            this.setState({ renderScrollButtons: false });
          }
        };
        this.state = {
          enableScrollButtons: false,
          showScrollButtons: false,
          renderScrollButtons: false,
          disableBackScrollButton: true,
          disableForwardScrollButton: true,
          shownKeys: this.props.defaultActiveKey !== void 0 ? [this.props.defaultActiveKey] : [this.props.activeKey],
          uncontrolledActiveKey: this.props.defaultActiveKey,
          uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,
          ouiaStateId: getDefaultOUIAId(_Tabs.displayName),
          overflowingTabCount: 0
        };
        if (this.props.isVertical && this.props.expandable !== void 0) {
          if (!this.props.toggleAriaLabel && !this.props.toggleText) {
            console.error("Tabs:", "toggleAriaLabel or the toggleText prop is required to make the toggle button accessible");
          }
        }
      }
      handleTabClick(event, eventKey, tabContentRef) {
        const { shownKeys } = this.state;
        const { onSelect, defaultActiveKey } = this.props;
        if (defaultActiveKey !== void 0) {
          this.setState({
            uncontrolledActiveKey: eventKey
          });
        } else {
          onSelect(event, eventKey);
        }
        if (tabContentRef) {
          React303.Children.toArray(this.props.children).filter((child) => React303.isValidElement(child)).filter(({ props }) => props.tabContentRef && props.tabContentRef.current).forEach((child) => child.props.tabContentRef.current.hidden = true);
          if (tabContentRef.current) {
            tabContentRef.current.hidden = false;
          }
        }
        if (this.props.mountOnEnter) {
          this.setState({
            shownKeys: shownKeys.concat(eventKey)
          });
        }
      }
      componentDidMount() {
        if (!this.props.isVertical) {
          if (canUseDOM) {
            window.addEventListener("resize", this.handleScrollButtons, false);
          }
          this.direction = getLanguageDirection(this.tabList.current);
          this.handleScrollButtons();
        }
      }
      componentWillUnmount() {
        var _a;
        if (!this.props.isVertical) {
          if (canUseDOM) {
            window.removeEventListener("resize", this.handleScrollButtons, false);
          }
        }
        clearTimeout(this.scrollTimeout);
        (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener("transitionend", this.hideScrollButtons);
      }
      componentDidUpdate(prevProps, prevState) {
        const { activeKey, mountOnEnter, isOverflowHorizontal, children } = this.props;
        const { shownKeys, overflowingTabCount, enableScrollButtons } = this.state;
        if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {
          this.setState({
            shownKeys: shownKeys.concat(activeKey)
          });
        }
        if (prevProps.children && children && React303.Children.toArray(prevProps.children).length !== React303.Children.toArray(children).length) {
          this.handleScrollButtons();
        }
        const currentOverflowingTabCount = this.countOverflowingElements(this.tabList.current);
        if (isOverflowHorizontal && currentOverflowingTabCount) {
          this.setState({ overflowingTabCount: currentOverflowingTabCount + overflowingTabCount });
        }
        if (!prevState.enableScrollButtons && enableScrollButtons) {
          this.setState({ renderScrollButtons: true });
          setTimeout(() => {
            var _a;
            (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener("transitionend", this.hideScrollButtons);
            this.setState({ showScrollButtons: true });
          }, 100);
        } else if (prevState.enableScrollButtons && !enableScrollButtons) {
          this.setState({ showScrollButtons: false });
        }
        this.direction = getLanguageDirection(this.tabList.current);
      }
      render() {
        const _a = this.props, { className, children, activeKey, defaultActiveKey, id, isFilled, isSecondary, isVertical, isBox, hasNoBorderBottom, leftScrollAriaLabel, rightScrollAriaLabel, backScrollAriaLabel, forwardScrollAriaLabel, "aria-label": ariaLabel, component, ouiaId, ouiaSafe, mountOnEnter, unmountOnExit, usePageInsets, inset, variant, expandable, isExpanded, defaultIsExpanded, toggleText, toggleAriaLabel, addButtonAriaLabel, onToggle, onClose, onAdd, isOverflowHorizontal } = _a, props = __rest(_a, ["className", "children", "activeKey", "defaultActiveKey", "id", "isFilled", "isSecondary", "isVertical", "isBox", "hasNoBorderBottom", "leftScrollAriaLabel", "rightScrollAriaLabel", "backScrollAriaLabel", "forwardScrollAriaLabel", "aria-label", "component", "ouiaId", "ouiaSafe", "mountOnEnter", "unmountOnExit", "usePageInsets", "inset", "variant", "expandable", "isExpanded", "defaultIsExpanded", "toggleText", "toggleAriaLabel", "addButtonAriaLabel", "onToggle", "onClose", "onAdd", "isOverflowHorizontal"]);
        const { showScrollButtons, renderScrollButtons, disableBackScrollButton, disableForwardScrollButton, shownKeys, uncontrolledActiveKey, uncontrolledIsExpandedLocal, overflowingTabCount } = this.state;
        const filteredChildren = React303.Children.toArray(children).filter((child) => React303.isValidElement(child)).filter(({ props: props2 }) => !props2.isHidden);
        const filteredChildrenWithoutOverflow = filteredChildren.slice(0, filteredChildren.length - overflowingTabCount);
        const filteredChildrenOverflowing = filteredChildren.slice(filteredChildren.length - overflowingTabCount);
        const overflowingTabProps = filteredChildrenOverflowing.map((child) => child.props);
        const uniqueId = id || getUniqueId();
        const Component44 = component === TabsComponent.nav ? "nav" : "div";
        const localActiveKey = defaultActiveKey !== void 0 ? uncontrolledActiveKey : activeKey;
        const isExpandedLocal = defaultIsExpanded !== void 0 ? uncontrolledIsExpandedLocal : isExpanded;
        const toggleTabs = (event, newValue) => {
          if (isExpanded === void 0) {
            this.setState({ uncontrolledIsExpandedLocal: newValue });
          } else {
            onToggle(event, newValue);
          }
        };
        const hasOverflowTab = isOverflowHorizontal && overflowingTabCount > 0;
        const overflowObjectProps = typeof isOverflowHorizontal === "object" ? Object.assign({}, isOverflowHorizontal) : {};
        return React303.createElement(
          TabsContextProvider,
          { value: {
            variant,
            mountOnEnter,
            unmountOnExit,
            localActiveKey,
            uniqueId,
            handleTabClick: (...args) => this.handleTabClick(...args),
            handleTabClose: onClose
          } },
          React303.createElement(
            Component44,
            Object.assign({ "aria-label": ariaLabel, className: css(tabs_default.tabs, isFilled && tabs_default.modifiers.fill, isSecondary && tabs_default.modifiers.secondary, isVertical && tabs_default.modifiers.vertical, isVertical && expandable && formatBreakpointMods(expandable, tabs_default), isVertical && expandable && isExpandedLocal && tabs_default.modifiers.expanded, isBox && tabs_default.modifiers.box, showScrollButtons && tabs_default.modifiers.scrollable, usePageInsets && tabs_default.modifiers.pageInsets, hasNoBorderBottom && tabs_default.modifiers.noBorderBottom, formatBreakpointMods(inset, tabs_default), variantStyle5[variant], hasOverflowTab && tabs_default.modifiers.overflow, className) }, getOUIAProps(_Tabs.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { id: id && id }, props),
            expandable && isVertical && React303.createElement(GenerateId, null, (randomId) => React303.createElement(
              "div",
              { className: css(tabs_default.tabsToggle) },
              React303.createElement(
                "div",
                { className: css(tabs_default.tabsToggleButton) },
                React303.createElement(
                  Button,
                  { onClick: (event) => toggleTabs(event, !isExpandedLocal), variant: "plain", "aria-label": toggleAriaLabel, "aria-expanded": isExpandedLocal, id: `${randomId}-button`, "aria-labelledby": `${randomId}-text ${randomId}-button` },
                  React303.createElement(
                    "span",
                    { className: css(tabs_default.tabsToggleIcon) },
                    React303.createElement(angle_right_icon_default, { "arian-hidden": "true" })
                  ),
                  toggleText && React303.createElement("span", { className: css(tabs_default.tabsToggleText), id: `${randomId}-text` }, toggleText)
                )
              )
            )),
            renderScrollButtons && React303.createElement(
              "button",
              { type: "button", className: css(tabs_default.tabsScrollButton, isSecondary && button_default.modifiers.secondary), "aria-label": backScrollAriaLabel || leftScrollAriaLabel, onClick: this.scrollBack, disabled: disableBackScrollButton, "aria-hidden": disableBackScrollButton, ref: this.leftScrollButtonRef },
              React303.createElement(angle_left_icon_default, null)
            ),
            React303.createElement(
              "ul",
              { className: css(tabs_default.tabsList), ref: this.tabList, onScroll: this.handleScrollButtons, role: "tablist" },
              isOverflowHorizontal ? filteredChildrenWithoutOverflow : filteredChildren,
              hasOverflowTab && React303.createElement(OverflowTab, Object.assign({ overflowingTabs: overflowingTabProps }, overflowObjectProps))
            ),
            renderScrollButtons && React303.createElement(
              "button",
              { type: "button", className: css(tabs_default.tabsScrollButton, isSecondary && button_default.modifiers.secondary), "aria-label": forwardScrollAriaLabel || rightScrollAriaLabel, onClick: this.scrollForward, disabled: disableForwardScrollButton, "aria-hidden": disableForwardScrollButton },
              React303.createElement(angle_right_icon_default, null)
            ),
            onAdd !== void 0 && React303.createElement(
              "span",
              { className: css(tabs_default.tabsAdd) },
              React303.createElement(
                Button,
                { variant: "plain", "aria-label": addButtonAriaLabel || "Add tab", onClick: onAdd },
                React303.createElement(plus_icon_default, null)
              )
            )
          ),
          filteredChildren.filter((child) => child.props.children && !(unmountOnExit && child.props.eventKey !== localActiveKey) && !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)).map((child) => React303.createElement(TabContent, { key: child.props.eventKey, activeKey: localActiveKey, child, id: child.props.id || uniqueId, ouiaId: child.props.ouiaId }))
        );
      }
    };
    Tabs.displayName = "Tabs";
    Tabs.defaultProps = {
      activeKey: 0,
      onSelect: () => void 0,
      isFilled: false,
      isSecondary: false,
      isVertical: false,
      isBox: false,
      hasNoBorderBottom: false,
      leftScrollAriaLabel: "Scroll left",
      backScrollAriaLabel: "Scroll back",
      rightScrollAriaLabel: "Scroll right",
      forwardScrollAriaLabel: "Scroll forward",
      component: TabsComponent.div,
      mountOnEnter: false,
      unmountOnExit: false,
      ouiaSafe: true,
      variant: "default",
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onToggle: (_event, _isExpanded) => void 0
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContentBody.js
var React304, TabContentBody;
var init_TabContentBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContentBody.js"() {
    init_tslib_es6();
    React304 = __toESM(require_react());
    init_esm();
    init_tab_content2();
    TabContentBody = (_a) => {
      var { children, className, hasPadding } = _a, props = __rest(_a, ["children", "className", "hasPadding"]);
      return React304.createElement("div", Object.assign({ className: css(tab_content_default.tabContentBody, hasPadding && tab_content_default.modifiers.padding, className) }, props), children);
    };
    TabContentBody.displayName = "TabContentBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleIcon.js
var React305, TabTitleIcon;
var init_TabTitleIcon = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleIcon.js"() {
    init_tslib_es6();
    React305 = __toESM(require_react());
    init_esm();
    init_tabs2();
    TabTitleIcon = (_a) => {
      var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
      return React305.createElement("span", Object.assign({ className: css(tabs_default.tabsItemIcon, className) }, props), children);
    };
    TabTitleIcon.displayName = "TabTitleIcon";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/index.js
var init_Tabs2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tabs/index.js"() {
    init_Tab();
    init_TabAction();
    init_Tabs();
    init_TabContent();
    init_TabContentBody();
    init_TabsContext();
    init_TabTitleText();
    init_TabTitleIcon();
  }
});

// node_modules/@patternfly/react-styles/css/components/Tile/tile.css
var init_tile = __esm({
  "node_modules/@patternfly/react-styles/css/components/Tile/tile.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Tile/tile.mjs
var tile_default;
var init_tile2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Tile/tile.mjs"() {
    init_tile();
    tile_default = {
      "modifiers": {
        "selected": "pf-m-selected",
        "disabled": "pf-m-disabled",
        "displayLg": "pf-m-display-lg",
        "stacked": "pf-m-stacked"
      },
      "themeDark": "pf-v5-theme-dark",
      "tile": "pf-v5-c-tile",
      "tileBody": "pf-v5-c-tile__body",
      "tileHeader": "pf-v5-c-tile__header",
      "tileIcon": "pf-v5-c-tile__icon",
      "tileTitle": "pf-v5-c-tile__title"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tile/Tile.js
var React306, Tile;
var init_Tile = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tile/Tile.js"() {
    init_tslib_es6();
    React306 = __toESM(require_react());
    init_tile2();
    init_esm();
    Tile = (_a) => {
      var { children, title, icon, isStacked, isSelected, isDisabled, isDisplayLarge, className } = _a, props = __rest(_a, ["children", "title", "icon", "isStacked", "isSelected", "isDisabled", "isDisplayLarge", "className"]);
      return React306.createElement(
        "div",
        Object.assign({ role: "option", "aria-selected": isSelected }, isDisabled && { "aria-disabled": isDisabled }, { className: css(tile_default.tile, isSelected && tile_default.modifiers.selected, isDisabled && tile_default.modifiers.disabled, isDisplayLarge && tile_default.modifiers.displayLg, className), tabIndex: 0 }, props),
        React306.createElement(
          "div",
          { className: css(tile_default.tileHeader, isStacked && tile_default.modifiers.stacked) },
          icon && React306.createElement("div", { className: css(tile_default.tileIcon) }, icon),
          React306.createElement("div", { className: css(tile_default.tileTitle) }, title)
        ),
        children && React306.createElement("div", { className: css(tile_default.tileBody) }, children)
      );
    };
    Tile.displayName = "Tile";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Tile/index.js
var init_Tile2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Tile/index.js"() {
    init_Tile();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js
var amSuffix, pmSuffix, makeTimeOptions, parseTime, validateTime, getHours, getMinutes, getSeconds, isWithinMinMax, convertTo24Hour;
var init_TimePickerUtils = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js"() {
    amSuffix = " AM";
    pmSuffix = " PM";
    makeTimeOptions = (stepMinutes, hour12, delimiter, minTime, maxTime, includeSeconds) => {
      const res = [];
      const iter = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      const iterDay = iter.getDay();
      while (iter.getDay() === iterDay) {
        let hour = iter.getHours();
        let suffix = amSuffix;
        if (hour12) {
          if (hour === 0) {
            hour = 12;
          } else if (hour >= 12) {
            suffix = pmSuffix;
          }
          if (hour > 12) {
            hour %= 12;
          }
        }
        hour = hour12 ? hour.toString() : hour.toString().padStart(2, "0");
        const minutes = iter.getMinutes().toString().padStart(2, "0");
        const timeOption = `${hour}${delimiter}${minutes}${hour12 ? suffix : ""}`;
        if (isWithinMinMax(minTime, maxTime, timeOption, delimiter, includeSeconds)) {
          res.push(timeOption);
        }
        iter.setMinutes(iter.getMinutes() + stepMinutes);
      }
      return res;
    };
    parseTime = (time, timeRegex, delimiter, is12Hour, includeSeconds) => {
      const date = new Date(time);
      if (!isNaN(date.getDate()) && (time instanceof Date || time.includes("T"))) {
        const hours = is12Hour ? `${date.getHours() > 12 ? date.getHours() - 12 : date.getHours()}` : `${date.getHours()}`.padStart(2, "0");
        const minutes = `${date.getMinutes()}`.padStart(2, "0");
        const seconds = includeSeconds ? `${date.getSeconds()}`.padStart(2, "0") : "";
        const secondsWithDelimiter = seconds ? `${delimiter}${seconds}` : "";
        let ampm = "";
        if (is12Hour && date.getHours() > 11) {
          ampm = pmSuffix;
        } else if (is12Hour) {
          ampm = amSuffix;
        }
        return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;
      } else if (typeof time === "string") {
        time = time.trim();
        if (time !== "" && validateTime(time, timeRegex, delimiter, is12Hour)) {
          const [, hours, minutes, seconds, suffix = ""] = timeRegex.exec(time);
          const secondsWithDelimiter = includeSeconds ? `${delimiter}${seconds !== null && seconds !== void 0 ? seconds : "00"}` : "";
          let ampm = "";
          if (is12Hour) {
            const uppercaseSuffix = suffix.toUpperCase();
            if (uppercaseSuffix === amSuffix.toUpperCase().trim()) {
              ampm = amSuffix;
            } else if (uppercaseSuffix === pmSuffix.toUpperCase().trim()) {
              ampm = pmSuffix;
            } else {
              ampm = (/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix;
            }
          }
          return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;
        }
      }
      return time.toString();
    };
    validateTime = (time, timeRegex, delimiter, is12Hour) => {
      const date = new Date(time);
      if (!isNaN(date.getDate()) && time.includes("T")) {
        return true;
      }
      const hours = parseInt(time.split(delimiter)[0]);
      const validHours = hours >= (is12Hour ? 1 : 0) && hours <= (is12Hour ? 12 : 23);
      return time === "" || timeRegex.test(time) && validHours;
    };
    getHours = (time, timeRegex) => {
      const parts = time.match(timeRegex);
      if (parts && parts.length) {
        if (/pm/i.test(parts[4])) {
          return parseInt(parts[1]) === 12 ? parseInt(parts[1]) : parseInt(parts[1]) + 12;
        }
        if (/am/i.test(parts[4])) {
          return parseInt(parts[1]) === 12 ? 0 : parseInt(parts[1]);
        }
        return parseInt(parts[1]);
      }
      return null;
    };
    getMinutes = (time, timeRegex) => {
      const parts = time.match(timeRegex);
      return parts && parts.length ? parseInt(parts[2]) : null;
    };
    getSeconds = (time, timeRegex) => {
      var _a;
      const seconds = (_a = time.match(timeRegex)) === null || _a === void 0 ? void 0 : _a[3];
      return seconds ? parseInt(seconds) : null;
    };
    isWithinMinMax = (minTime, maxTime, time, delimiter, includeSeconds) => {
      if (time.trim() === "") {
        return true;
      }
      const min24HourTime = convertTo24Hour(minTime, delimiter, includeSeconds);
      const selected24HourTime = convertTo24Hour(time, delimiter, includeSeconds);
      const max24HourTime = convertTo24Hour(maxTime, delimiter, includeSeconds);
      return min24HourTime <= selected24HourTime && selected24HourTime <= max24HourTime;
    };
    convertTo24Hour = (time, delimiter, includeSeconds) => {
      const timeReg = new RegExp(`^\\s*(\\d\\d?)${delimiter}([0-5]\\d)${delimiter}?([0-5]\\d)?\\s*([AaPp][Mm])?\\s*$`);
      const regMatches = timeReg.exec(time);
      if (!regMatches || !regMatches.length) {
        return;
      }
      let hours = regMatches[1].padStart(2, "0");
      const minutes = regMatches[2];
      let seconds = regMatches[3] ? `${delimiter}${regMatches[3]}` : "";
      if (!seconds && includeSeconds) {
        seconds = `${delimiter}00`;
      }
      const suffix = regMatches[4] || "";
      if (suffix.toUpperCase() === "PM" && hours !== "12") {
        hours = `${parseInt(hours) + 12}`;
      } else if (suffix.toUpperCase() === "AM" && hours === "12") {
        hours = "00";
      }
      return `${hours}${delimiter}${minutes}${seconds}`;
    };
  }
});

// node_modules/@patternfly/react-icons/dist/esm/icons/outlined-clock-icon.js
var OutlinedClockIconConfig, OutlinedClockIcon, outlined_clock_icon_default;
var init_outlined_clock_icon = __esm({
  "node_modules/@patternfly/react-icons/dist/esm/icons/outlined-clock-icon.js"() {
    init_createIcon();
    OutlinedClockIconConfig = {
      name: "OutlinedClockIcon",
      height: 512,
      width: 512,
      svgPath: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z",
      yOffset: 0,
      xOffset: 0
    };
    OutlinedClockIcon = createIcon(OutlinedClockIconConfig);
    outlined_clock_icon_default = OutlinedClockIcon;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_Width.js
var c_date_picker__input_c_form_control_Width, c_date_picker_input_c_form_control_Width_default;
var init_c_date_picker_input_c_form_control_Width = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_Width.js"() {
    c_date_picker__input_c_form_control_Width = {
      "name": "--pf-v5-c-date-picker__input--c-form-control--Width",
      "value": "calc(10 * 1ch + calc(2rem + 0.5rem))",
      "var": "var(--pf-v5-c-date-picker__input--c-form-control--Width)"
    };
    c_date_picker_input_c_form_control_Width_default = c_date_picker__input_c_form_control_Width;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js
var React307, TimePicker;
var init_TimePicker = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js"() {
    init_tslib_es6();
    React307 = __toESM(require_react());
    init_esm();
    init_date_picker2();
    init_menu2();
    init_helpers();
    init_Popper2();
    init_Menu2();
    init_InputGroup2();
    init_TextInput2();
    init_constants();
    init_TimePickerUtils();
    init_HelperText2();
    init_outlined_clock_icon();
    init_c_date_picker_input_c_form_control_Width();
    TimePicker = class extends React307.Component {
      constructor(props) {
        super(props);
        this.baseComponentRef = React307.createRef();
        this.toggleRef = React307.createRef();
        this.inputRef = React307.createRef();
        this.menuRef = React307.createRef();
        this.onDocClick = (event) => {
          var _a, _b, _c, _d;
          const clickedOnToggle = (_b = (_a = this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);
          const clickedWithinMenu = (_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);
          if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {
            this.onToggle(false);
          }
        };
        this.handleGlobalKeys = (event) => {
          var _a, _b, _c, _d;
          const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;
          if ((_b = (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {
            if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {
              this.onToggle(true);
            } else if (isTimeOptionsOpen) {
              if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {
                this.onToggle(false);
              } else if (event.key === KeyTypes.Enter) {
                if (focusedIndex !== null) {
                  this.focusSelection(focusedIndex);
                  event.stopPropagation();
                } else {
                  this.onToggle(false);
                }
              } else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {
                this.focusSelection(scrollIndex);
                this.updateFocusedIndex(0);
                event.preventDefault();
              }
            }
          } else if ((_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {
            if (event.key === KeyTypes.ArrowDown) {
              this.updateFocusedIndex(1);
              event.preventDefault();
            } else if (event.key === KeyTypes.ArrowUp) {
              this.updateFocusedIndex(-1);
              event.preventDefault();
            } else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {
              this.inputRef.current.focus();
              this.onToggle(false);
            }
          }
        };
        this.updateFocusedIndex = (increment) => {
          this.setState((prevState) => {
            const maxIndex = this.getOptions().length - 1;
            let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;
            if (nextIndex < 0) {
              nextIndex = maxIndex;
            } else if (nextIndex > maxIndex) {
              nextIndex = 0;
            }
            this.scrollToIndex(nextIndex);
            return {
              focusedIndex: nextIndex
            };
          });
        };
        this.getIndexToScroll = (index) => {
          if (this.props.menuAppendTo === "inline") {
            return index > 0 ? index - 1 : 0;
          }
          return index;
        };
        this.scrollToIndex = (index) => {
          this.getOptions()[index].closest(`.${menu_default.menuContent}`).scrollTop = this.getOptions()[this.getIndexToScroll(index)].offsetTop;
        };
        this.focusSelection = (index) => {
          var _a;
          const indexToFocus = index !== -1 ? index : 0;
          if ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {
            this.getOptions()[indexToFocus].querySelector(`.${menu_default.menuItem}`).focus();
          }
        };
        this.scrollToSelection = (time2) => {
          const { delimiter: delimiter2, is24Hour: is24Hour2 } = this.props;
          let splitTime = time2.split(this.props.delimiter);
          let focusedIndex = null;
          if (splitTime.length < 2) {
            time2 = `${time2}${delimiter2}00`;
            splitTime = time2.split(delimiter2);
          } else if (splitTime.length > 2) {
            time2 = parseTime(time2, this.state.timeRegex, delimiter2, !is24Hour2, false);
            splitTime = time2.split(delimiter2);
          }
          if (!is24Hour2 && splitTime.length > 1 && splitTime[1].length < 2) {
            const minutes = splitTime[1].length === 0 ? "00" : splitTime[1] + "0";
            time2 = `${splitTime[0]}${delimiter2}${minutes}${(/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix}`;
          } else if (!is24Hour2 && splitTime.length > 1 && splitTime[1].length === 2 && !time2.toUpperCase().includes(amSuffix.toUpperCase().trim()) && !time2.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {
            time2 = `${time2}${(/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix}`;
          }
          let scrollIndex = this.getOptions().findIndex((option) => option.textContent === time2);
          if (scrollIndex !== -1) {
            this.scrollToIndex(scrollIndex);
            focusedIndex = scrollIndex;
          } else if (splitTime.length === 2) {
            let amPm = "";
            if (!is24Hour2) {
              if (splitTime[1].toUpperCase().includes("P")) {
                amPm = pmSuffix;
              } else if (splitTime[1].toUpperCase().includes("A")) {
                amPm = amSuffix;
              }
            }
            time2 = `${splitTime[0]}${delimiter2}00${amPm}`;
            scrollIndex = this.getOptions().findIndex((option) => option.textContent === time2);
            if (scrollIndex !== -1) {
              this.scrollToIndex(scrollIndex);
            }
          }
          this.setState({
            focusedIndex,
            scrollIndex
          });
        };
        this.getRegExp = (includeSeconds2 = true) => {
          const { is24Hour: is24Hour2, delimiter: delimiter2 } = this.props;
          let baseRegex = `\\s*(\\d\\d?)${delimiter2}([0-5]\\d)`;
          if (includeSeconds2) {
            baseRegex += `${delimiter2}?([0-5]\\d)?`;
          }
          return new RegExp(`^${baseRegex}${is24Hour2 ? "" : "\\s*([AaPp][Mm])?"}\\s*$`);
        };
        this.getOptions = () => {
          var _a;
          return ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) ? Array.from(this.menuRef.current.querySelectorAll(`.${menu_default.menuListItem}`)) : [];
        };
        this.isValidFormat = (time2) => {
          if (this.props.validateTime) {
            return this.props.validateTime(time2);
          }
          const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2 } = this.props;
          return validateTime(time2, this.getRegExp(includeSeconds2), delimiter2, !is24Hour2);
        };
        this.isValidTime = (time2) => {
          const { delimiter: delimiter2, includeSeconds: includeSeconds2 } = this.props;
          const { minTimeState, maxTimeState } = this.state;
          return isWithinMinMax(minTimeState, maxTimeState, time2, delimiter2, includeSeconds2);
        };
        this.isValid = (time2) => this.isValidFormat(time2) && this.isValidTime(time2);
        this.onToggle = (isOpen2) => {
          this.setState((prevState) => {
            const { timeRegex: timeRegex2, isInvalid, timeState } = prevState;
            const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2, onChange } = this.props;
            const time2 = parseTime(timeState, timeRegex2, delimiter2, !is24Hour2, includeSeconds2);
            if (onChange && !isOpen2 && time2 !== timeState) {
              onChange(null, time2, getHours(time2, timeRegex2), getMinutes(time2, timeRegex2), getSeconds(time2, timeRegex2), this.isValid(time2));
            }
            return {
              isTimeOptionsOpen: isOpen2,
              timeState: time2,
              isInvalid: isOpen2 ? isInvalid : !this.isValid(time2)
            };
          });
          this.props.setIsOpen(isOpen2);
          if (!isOpen2) {
            this.inputRef.current.focus();
          }
        };
        this.onSelect = (e) => {
          const { timeRegex: timeRegex2, timeState } = this.state;
          const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2, setIsOpen } = this.props;
          const time2 = parseTime(e.target.textContent, timeRegex2, delimiter2, !is24Hour2, includeSeconds2);
          if (time2 !== timeState) {
            this.onInputChange(e, time2);
          }
          this.inputRef.current.focus();
          this.setState({
            isTimeOptionsOpen: false,
            isInvalid: false
          });
          setIsOpen(false);
        };
        this.onInputClick = (e) => {
          if (!this.state.isTimeOptionsOpen) {
            this.onToggle(true);
          }
          e.stopPropagation();
        };
        this.onInputChange = (event, newTime) => {
          const { onChange } = this.props;
          const { timeRegex: timeRegex2 } = this.state;
          if (onChange) {
            onChange(event, newTime, getHours(newTime, timeRegex2), getMinutes(newTime, timeRegex2), getSeconds(newTime, timeRegex2), this.isValid(newTime));
          }
          this.scrollToSelection(newTime);
          this.setState({
            timeState: newTime
          });
        };
        const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;
        let { minTime, maxTime } = this.props;
        if (minTime === "") {
          const minSeconds = includeSeconds ? `${delimiter}00` : "";
          minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;
        }
        if (maxTime === "") {
          const maxSeconds = includeSeconds ? `${delimiter}59` : "";
          maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;
        }
        const timeRegex = this.getRegExp();
        this.state = {
          isInvalid: false,
          isTimeOptionsOpen: isOpen,
          timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),
          focusedIndex: null,
          scrollIndex: 0,
          timeRegex,
          minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),
          maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)
        };
      }
      componentDidMount() {
        document.addEventListener("mousedown", this.onDocClick);
        document.addEventListener("touchstart", this.onDocClick);
        document.addEventListener("keydown", this.handleGlobalKeys);
        this.setState({ isInvalid: !this.isValid(this.state.timeState) });
      }
      componentWillUnmount() {
        document.removeEventListener("mousedown", this.onDocClick);
        document.removeEventListener("touchstart", this.onDocClick);
        document.removeEventListener("keydown", this.handleGlobalKeys);
      }
      componentDidUpdate(prevProps, prevState) {
        const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;
        const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;
        if (prevProps.isOpen !== isOpen) {
          this.onToggle(isOpen);
        }
        if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {
          this.scrollToSelection(timeState);
        }
        if (delimiter !== prevProps.delimiter) {
          this.setState({
            timeRegex: this.getRegExp()
          });
        }
        if (time !== "" && time !== prevProps.time) {
          const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);
          this.setState({
            timeState: parsedTime,
            isInvalid: !this.isValid(parsedTime)
          });
        }
        if (minTime !== "" && minTime !== prevProps.minTime) {
          this.setState({
            minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)
          });
        }
        if (maxTime !== "" && maxTime !== prevProps.maxTime) {
          this.setState({
            maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)
          });
        }
      }
      render() {
        const _a = this.props, {
          "aria-label": ariaLabel,
          isDisabled,
          className,
          placeholder,
          id,
          menuAppendTo,
          is24Hour,
          invalidFormatErrorMessage,
          invalidMinMaxErrorMessage,
          stepMinutes,
          width,
          delimiter,
          inputProps,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          onChange,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          setIsOpen,
          /* eslint-disable @typescript-eslint/no-unused-vars */
          isOpen,
          time,
          validateTime: validateTime2,
          minTime,
          maxTime,
          includeSeconds,
          zIndex
        } = _a, props = __rest(_a, ["aria-label", "isDisabled", "className", "placeholder", "id", "menuAppendTo", "is24Hour", "invalidFormatErrorMessage", "invalidMinMaxErrorMessage", "stepMinutes", "width", "delimiter", "inputProps", "onChange", "setIsOpen", "isOpen", "time", "validateTime", "minTime", "maxTime", "includeSeconds", "zIndex"]);
        const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;
        const style = { [c_date_picker_input_c_form_control_Width_default.name]: width };
        const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);
        const isValidFormat = this.isValidFormat(timeState);
        const randomId = id || getUniqueId("time-picker");
        const getParentElement = () => {
          if (this.baseComponentRef && this.baseComponentRef.current) {
            return this.baseComponentRef.current.parentElement;
          }
          return null;
        };
        const menuContainer = React307.createElement(
          Menu,
          { ref: this.menuRef, isScrollable: true },
          React307.createElement(
            MenuContent,
            { maxMenuHeight: "200px" },
            React307.createElement(MenuList, { "aria-label": ariaLabel }, options.map((option, index) => React307.createElement(MenuItem, { onClick: this.onSelect, key: option, id: `${randomId}-option-${index}` }, option)))
          )
        );
        const textInput = React307.createElement(TextInput, Object.assign({ "aria-haspopup": "menu", id: `${randomId}-input`, "aria-label": ariaLabel, validated: isInvalid ? "error" : "default", placeholder, value: timeState || "", type: "text", customIcon: React307.createElement(outlined_clock_icon_default, null), onClick: this.onInputClick, onChange: this.onInputChange, autoComplete: "off", isDisabled, isExpanded: isTimeOptionsOpen, ref: this.inputRef }, inputProps));
        let calculatedAppendTo;
        switch (menuAppendTo) {
          case "inline":
            calculatedAppendTo = () => this.toggleRef.current;
            break;
          case "parent":
            calculatedAppendTo = getParentElement;
            break;
          default:
            calculatedAppendTo = menuAppendTo;
        }
        return React307.createElement(
          "div",
          { ref: this.baseComponentRef, className: css(date_picker_default.datePicker, className) },
          React307.createElement(
            "div",
            Object.assign({ className: css(date_picker_default.datePickerInput), style }, props),
            React307.createElement(
              InputGroup,
              null,
              React307.createElement(
                InputGroupItem,
                null,
                React307.createElement(
                  "div",
                  { id: randomId },
                  React307.createElement(
                    "div",
                    { ref: this.toggleRef, style: { paddingLeft: "0" } },
                    React307.createElement(Popper, { appendTo: calculatedAppendTo, trigger: textInput, triggerRef: this.toggleRef, popper: menuContainer, popperRef: this.menuRef, isVisible: isTimeOptionsOpen, zIndex })
                  )
                )
              )
            ),
            isInvalid && React307.createElement(
              "div",
              { className: css(date_picker_default.datePickerHelperText) },
              React307.createElement(
                HelperText,
                null,
                React307.createElement(HelperTextItem, { variant: "error" }, !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage)
              )
            )
          )
        );
      }
    };
    TimePicker.displayName = "TimePicker";
    TimePicker.defaultProps = {
      className: "",
      isDisabled: false,
      time: "",
      is24Hour: false,
      invalidFormatErrorMessage: "Invalid time format",
      invalidMinMaxErrorMessage: "Invalid time entered",
      placeholder: "hh:mm",
      delimiter: ":",
      "aria-label": "Time picker",
      width: "150px",
      menuAppendTo: "inline",
      stepMinutes: 30,
      inputProps: {},
      minTime: "",
      maxTime: "",
      isOpen: false,
      setIsOpen: () => {
      },
      zIndex: 9999
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/index.js
var init_TimePicker2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TimePicker/index.js"() {
    init_TimePicker();
  }
});

// node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.css
var init_timestamp = __esm({
  "node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.mjs
var timestamp_default;
var init_timestamp2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.mjs"() {
    init_timestamp();
    timestamp_default = {
      "modifiers": {
        "helpText": "pf-m-help-text"
      },
      "timestamp": "pf-v5-c-timestamp"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Timestamp/Timestamp.js
var React308, TimestampFormat, TimestampTooltipVariant, Timestamp;
var init_Timestamp = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Timestamp/Timestamp.js"() {
    init_tslib_es6();
    React308 = __toESM(require_react());
    init_timestamp2();
    init_esm();
    init_Tooltip2();
    init_datetimeUtils();
    (function(TimestampFormat2) {
      TimestampFormat2["full"] = "full";
      TimestampFormat2["long"] = "long";
      TimestampFormat2["medium"] = "medium";
      TimestampFormat2["short"] = "short";
    })(TimestampFormat || (TimestampFormat = {}));
    (function(TimestampTooltipVariant2) {
      TimestampTooltipVariant2["default"] = "default";
      TimestampTooltipVariant2["custom"] = "custom";
    })(TimestampTooltipVariant || (TimestampTooltipVariant = {}));
    Timestamp = (_a) => {
      var { children, className, customFormat, date: dateProp, dateFormat, displaySuffix = "", is12Hour, locale, shouldDisplayUTC, timeFormat, tooltip } = _a, props = __rest(_a, ["children", "className", "customFormat", "date", "dateFormat", "displaySuffix", "is12Hour", "locale", "shouldDisplayUTC", "timeFormat", "tooltip"]);
      const [date, setDate] = React308.useState(() => {
        const initDate = new Date(dateProp);
        if (isValidDate(initDate)) {
          return initDate;
        }
        return /* @__PURE__ */ new Date();
      });
      React308.useEffect(() => {
        const dateFromProp = new Date(dateProp);
        if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {
          setDate(dateFromProp);
        } else if (!dateProp) {
          setDate(/* @__PURE__ */ new Date());
        }
      }, [dateProp]);
      const hasTimeFormat = timeFormat && !customFormat;
      const formatOptions = Object.assign(Object.assign(Object.assign({}, dateFormat && !customFormat && { dateStyle: dateFormat }), customFormat && Object.assign({}, customFormat)), is12Hour !== void 0 && { hour12: is12Hour });
      const dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && { timeStyle: timeFormat }));
      const utcTimeFormat = timeFormat !== "short" ? "medium" : "short";
      const convertToUTCString = (date2) => new Date(date2).toUTCString().slice(0, -3);
      const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && { timeStyle: utcTimeFormat }));
      const defaultUTCSuffix = timeFormat === "full" ? "Coordinated Universal Time" : "UTC";
      const createUTCContent = (customSuffix) => `${utcDateString} ${customSuffix ? customSuffix : defaultUTCSuffix}`;
      const defaultDisplay = shouldDisplayUTC ? createUTCContent(displaySuffix) : `${dateAsLocaleString}${displaySuffix ? " " + displaySuffix : ""}`;
      const { dateTime } = props, propsWithoutDateTime = __rest(props, ["dateTime"]);
      const timestamp = React308.createElement(
        "span",
        Object.assign({ className: css(timestamp_default.timestamp, tooltip && timestamp_default.modifiers.helpText, className) }, tooltip && { tabIndex: 0 }, propsWithoutDateTime),
        React308.createElement("time", { className: `${timestamp_default.timestamp}__text`, dateTime: dateTime || new Date(date).toISOString() }, !children ? defaultDisplay : children)
      );
      return tooltip ? React308.createElement(Tooltip, Object.assign({ content: tooltip.variant === TimestampTooltipVariant.default ? createUTCContent(tooltip.suffix) : tooltip.content }, tooltip.tooltipProps), timestamp) : timestamp;
    };
    Timestamp.displayName = "Timestamp";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Timestamp/index.js
var init_Timestamp2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Timestamp/index.js"() {
    init_Timestamp();
  }
});

// node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.css
var init_toggle_group = __esm({
  "node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.mjs
var toggle_group_default;
var init_toggle_group2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.mjs"() {
    init_toggle_group();
    toggle_group_default = {
      "modifiers": {
        "compact": "pf-m-compact",
        "selected": "pf-m-selected",
        "disabled": "pf-m-disabled"
      },
      "themeDark": "pf-v5-theme-dark",
      "toggleGroup": "pf-v5-c-toggle-group",
      "toggleGroupButton": "pf-v5-c-toggle-group__button",
      "toggleGroupIcon": "pf-v5-c-toggle-group__icon",
      "toggleGroupItem": "pf-v5-c-toggle-group__item",
      "toggleGroupText": "pf-v5-c-toggle-group__text"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItemElement.js
var React309, ToggleGroupItemVariant, ToggleGroupItemElement;
var init_ToggleGroupItemElement = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItemElement.js"() {
    React309 = __toESM(require_react());
    init_esm();
    init_toggle_group2();
    (function(ToggleGroupItemVariant2) {
      ToggleGroupItemVariant2["icon"] = "icon";
      ToggleGroupItemVariant2["text"] = "text";
    })(ToggleGroupItemVariant || (ToggleGroupItemVariant = {}));
    ToggleGroupItemElement = ({ variant, children }) => React309.createElement("span", { className: css(variant === "icon" && toggle_group_default.toggleGroupIcon, variant === "text" && toggle_group_default.toggleGroupText) }, children);
    ToggleGroupItemElement.displayName = "ToggleGroupItemElement";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItem.js
var React310, ToggleGroupItem;
var init_ToggleGroupItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItem.js"() {
    init_tslib_es6();
    React310 = __toESM(require_react());
    init_esm();
    init_toggle_group2();
    init_ToggleGroupItemElement();
    ToggleGroupItem = (_a) => {
      var { text, icon, className, isDisabled = false, isSelected = false, "aria-label": ariaLabel = "", onChange = () => {
      }, buttonId = "" } = _a, props = __rest(_a, ["text", "icon", "className", "isDisabled", "isSelected", "aria-label", "onChange", "buttonId"]);
      const handleChange = (event) => {
        onChange(event, !isSelected);
      };
      if (!ariaLabel && icon && !text) {
        console.warn("An accessible aria-label is required when using the toggle group item icon variant.");
      }
      return React310.createElement(
        "div",
        Object.assign({ className: css(toggle_group_default.toggleGroupItem, className) }, props),
        React310.createElement(
          "button",
          Object.assign({ type: "button", className: css(toggle_group_default.toggleGroupButton, isSelected && toggle_group_default.modifiers.selected), "aria-pressed": isSelected, onClick: handleChange }, ariaLabel && { "aria-label": ariaLabel }, isDisabled && { disabled: true }, buttonId && { id: buttonId }),
          icon ? React310.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.icon }, icon) : null,
          text ? React310.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.text }, text) : null
        )
      );
    };
    ToggleGroupItem.displayName = "ToggleGroupItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroup.js
var React311, ToggleGroup;
var init_ToggleGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroup.js"() {
    init_tslib_es6();
    React311 = __toESM(require_react());
    init_esm();
    init_toggle_group2();
    init_ToggleGroupItem();
    ToggleGroup = (_a) => {
      var { className, children, isCompact = false, areAllGroupsDisabled = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isCompact", "areAllGroupsDisabled", "aria-label"]);
      const toggleGroupItemList = React311.Children.map(children, (child) => !(React311.isValidElement(child) && child.type === ToggleGroupItem) ? child : React311.cloneElement(child, areAllGroupsDisabled ? { isDisabled: true } : {}));
      return React311.createElement("div", Object.assign({ className: css(toggle_group_default.toggleGroup, isCompact && toggle_group_default.modifiers.compact, className), role: "group", "aria-label": ariaLabel }, props), toggleGroupItemList);
    };
    ToggleGroup.displayName = "ToggleGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/index.js
var init_ToggleGroup2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/index.js"() {
    init_ToggleGroup();
    init_ToggleGroupItem();
  }
});

// node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.css
var init_toolbar = __esm({
  "node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.mjs
var toolbar_default;
var init_toolbar2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.mjs"() {
    init_toolbar();
    toolbar_default = {
      "button": "pf-v5-c-button",
      "chipGroup": "pf-v5-c-chip-group",
      "divider": "pf-v5-c-divider",
      "modifiers": {
        "hidden": "pf-m-hidden",
        "hiddenOnSm": "pf-m-hidden-on-sm",
        "visibleOnSm": "pf-m-visible-on-sm",
        "hiddenOnMd": "pf-m-hidden-on-md",
        "visibleOnMd": "pf-m-visible-on-md",
        "hiddenOnLg": "pf-m-hidden-on-lg",
        "visibleOnLg": "pf-m-visible-on-lg",
        "hiddenOnXl": "pf-m-hidden-on-xl",
        "visibleOnXl": "pf-m-visible-on-xl",
        "hiddenOn_2xl": "pf-m-hidden-on-2xl",
        "visibleOn_2xl": "pf-m-visible-on-2xl",
        "pageInsets": "pf-m-page-insets",
        "sticky": "pf-m-sticky",
        "fullHeight": "pf-m-full-height",
        "static": "pf-m-static",
        "vertical": "pf-m-vertical",
        "alignItemsStart": "pf-m-align-items-start",
        "alignItemsCenter": "pf-m-align-items-center",
        "alignItemsBaseline": "pf-m-align-items-baseline",
        "alignSelfStart": "pf-m-align-self-start",
        "alignSelfCenter": "pf-m-align-self-center",
        "alignSelfBaseline": "pf-m-align-self-baseline",
        "buttonGroup": "pf-m-button-group",
        "iconButtonGroup": "pf-m-icon-button-group",
        "filterGroup": "pf-m-filter-group",
        "toggleGroup": "pf-m-toggle-group",
        "overflowMenu": "pf-m-overflow-menu",
        "bulkSelect": "pf-m-bulk-select",
        "expandAll": "pf-m-expand-all",
        "expanded": "pf-m-expanded",
        "searchFilter": "pf-m-search-filter",
        "chipGroup": "pf-m-chip-group",
        "label": "pf-m-label",
        "formElement": "pf-m-form-element",
        "pagination": "pf-m-pagination",
        "overflowContainer": "pf-m-overflow-container",
        "chipContainer": "pf-m-chip-container",
        "plain": "pf-m-plain",
        "show": "pf-m-show",
        "showOnSm": "pf-m-show-on-sm",
        "showOnMd": "pf-m-show-on-md",
        "showOnLg": "pf-m-show-on-lg",
        "showOnXl": "pf-m-show-on-xl",
        "showOn_2xl": "pf-m-show-on-2xl",
        "alignRight": "pf-m-align-right",
        "alignLeft": "pf-m-align-left",
        "nowrap": "pf-m-nowrap",
        "wrap": "pf-m-wrap",
        "alignRightOnSm": "pf-m-align-right-on-sm",
        "alignLeftOnSm": "pf-m-align-left-on-sm",
        "nowrapOnSm": "pf-m-nowrap-on-sm",
        "wrapOnSm": "pf-m-wrap-on-sm",
        "alignRightOnMd": "pf-m-align-right-on-md",
        "alignLeftOnMd": "pf-m-align-left-on-md",
        "nowrapOnMd": "pf-m-nowrap-on-md",
        "wrapOnMd": "pf-m-wrap-on-md",
        "alignRightOnLg": "pf-m-align-right-on-lg",
        "alignLeftOnLg": "pf-m-align-left-on-lg",
        "nowrapOnLg": "pf-m-nowrap-on-lg",
        "wrapOnLg": "pf-m-wrap-on-lg",
        "alignRightOnXl": "pf-m-align-right-on-xl",
        "alignLeftOnXl": "pf-m-align-left-on-xl",
        "nowrapOnXl": "pf-m-nowrap-on-xl",
        "wrapOnXl": "pf-m-wrap-on-xl",
        "alignRightOn_2xl": "pf-m-align-right-on-2xl",
        "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
        "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
        "wrapOn_2xl": "pf-m-wrap-on-2xl",
        "spaceItemsNone": "pf-m-space-items-none",
        "spaceItemsSm": "pf-m-space-items-sm",
        "spaceItemsMd": "pf-m-space-items-md",
        "spaceItemsLg": "pf-m-space-items-lg",
        "spaceItemsNoneOnSm": "pf-m-space-items-none-on-sm",
        "spaceItemsSmOnSm": "pf-m-space-items-sm-on-sm",
        "spaceItemsMdOnSm": "pf-m-space-items-md-on-sm",
        "spaceItemsLgOnSm": "pf-m-space-items-lg-on-sm",
        "spaceItemsNoneOnMd": "pf-m-space-items-none-on-md",
        "spaceItemsSmOnMd": "pf-m-space-items-sm-on-md",
        "spaceItemsMdOnMd": "pf-m-space-items-md-on-md",
        "spaceItemsLgOnMd": "pf-m-space-items-lg-on-md",
        "spaceItemsNoneOnLg": "pf-m-space-items-none-on-lg",
        "spaceItemsSmOnLg": "pf-m-space-items-sm-on-lg",
        "spaceItemsMdOnLg": "pf-m-space-items-md-on-lg",
        "spaceItemsLgOnLg": "pf-m-space-items-lg-on-lg",
        "spaceItemsNoneOnXl": "pf-m-space-items-none-on-xl",
        "spaceItemsSmOnXl": "pf-m-space-items-sm-on-xl",
        "spaceItemsMdOnXl": "pf-m-space-items-md-on-xl",
        "spaceItemsLgOnXl": "pf-m-space-items-lg-on-xl",
        "spaceItemsNoneOn_2xl": "pf-m-space-items-none-on-2xl",
        "spaceItemsSmOn_2xl": "pf-m-space-items-sm-on-2xl",
        "spaceItemsMdOn_2xl": "pf-m-space-items-md-on-2xl",
        "spaceItemsLgOn_2xl": "pf-m-space-items-lg-on-2xl",
        "spacerNone": "pf-m-spacer-none",
        "spacerSm": "pf-m-spacer-sm",
        "spacerMd": "pf-m-spacer-md",
        "spacerLg": "pf-m-spacer-lg",
        "spacerNoneOnSm": "pf-m-spacer-none-on-sm",
        "spacerSmOnSm": "pf-m-spacer-sm-on-sm",
        "spacerMdOnSm": "pf-m-spacer-md-on-sm",
        "spacerLgOnSm": "pf-m-spacer-lg-on-sm",
        "spacerNoneOnMd": "pf-m-spacer-none-on-md",
        "spacerSmOnMd": "pf-m-spacer-sm-on-md",
        "spacerMdOnMd": "pf-m-spacer-md-on-md",
        "spacerLgOnMd": "pf-m-spacer-lg-on-md",
        "spacerNoneOnLg": "pf-m-spacer-none-on-lg",
        "spacerSmOnLg": "pf-m-spacer-sm-on-lg",
        "spacerMdOnLg": "pf-m-spacer-md-on-lg",
        "spacerLgOnLg": "pf-m-spacer-lg-on-lg",
        "spacerNoneOnXl": "pf-m-spacer-none-on-xl",
        "spacerSmOnXl": "pf-m-spacer-sm-on-xl",
        "spacerMdOnXl": "pf-m-spacer-md-on-xl",
        "spacerLgOnXl": "pf-m-spacer-lg-on-xl",
        "spacerNoneOn_2xl": "pf-m-spacer-none-on-2xl",
        "spacerSmOn_2xl": "pf-m-spacer-sm-on-2xl",
        "spacerMdOn_2xl": "pf-m-spacer-md-on-2xl",
        "spacerLgOn_2xl": "pf-m-spacer-lg-on-2xl",
        "insetNone": "pf-m-inset-none",
        "insetSm": "pf-m-inset-sm",
        "insetMd": "pf-m-inset-md",
        "insetLg": "pf-m-inset-lg",
        "insetXl": "pf-m-inset-xl",
        "inset_2xl": "pf-m-inset-2xl",
        "insetNoneOnSm": "pf-m-inset-none-on-sm",
        "insetSmOnSm": "pf-m-inset-sm-on-sm",
        "insetMdOnSm": "pf-m-inset-md-on-sm",
        "insetLgOnSm": "pf-m-inset-lg-on-sm",
        "insetXlOnSm": "pf-m-inset-xl-on-sm",
        "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
        "insetNoneOnMd": "pf-m-inset-none-on-md",
        "insetSmOnMd": "pf-m-inset-sm-on-md",
        "insetMdOnMd": "pf-m-inset-md-on-md",
        "insetLgOnMd": "pf-m-inset-lg-on-md",
        "insetXlOnMd": "pf-m-inset-xl-on-md",
        "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
        "insetNoneOnLg": "pf-m-inset-none-on-lg",
        "insetSmOnLg": "pf-m-inset-sm-on-lg",
        "insetMdOnLg": "pf-m-inset-md-on-lg",
        "insetLgOnLg": "pf-m-inset-lg-on-lg",
        "insetXlOnLg": "pf-m-inset-xl-on-lg",
        "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
        "insetNoneOnXl": "pf-m-inset-none-on-xl",
        "insetSmOnXl": "pf-m-inset-sm-on-xl",
        "insetMdOnXl": "pf-m-inset-md-on-xl",
        "insetLgOnXl": "pf-m-inset-lg-on-xl",
        "insetXlOnXl": "pf-m-inset-xl-on-xl",
        "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
        "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
        "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
        "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
        "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
        "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
        "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
      },
      "pagination": "pf-v5-c-pagination",
      "toolbar": "pf-v5-c-toolbar",
      "toolbarContent": "pf-v5-c-toolbar__content",
      "toolbarContentSection": "pf-v5-c-toolbar__content-section",
      "toolbarExpandAllIcon": "pf-v5-c-toolbar__expand-all-icon",
      "toolbarExpandableContent": "pf-v5-c-toolbar__expandable-content",
      "toolbarGroup": "pf-v5-c-toolbar__group",
      "toolbarItem": "pf-v5-c-toolbar__item",
      "toolbarToggle": "pf-v5-c-toolbar__toggle"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarUtils.js
var React312, ToolbarContext, ToolbarContentContext, globalBreakpoints;
var init_ToolbarUtils = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarUtils.js"() {
    React312 = __toESM(require_react());
    init_global_breakpoint_md();
    init_global_breakpoint_lg();
    init_global_breakpoint_xl();
    init_global_breakpoint_2xl();
    ToolbarContext = React312.createContext({
      isExpanded: false,
      toggleIsExpanded: () => {
      },
      chipGroupContentRef: null,
      updateNumberFilters: () => {
      },
      numberOfFilters: 0,
      clearAllFilters: () => {
      }
    });
    ToolbarContentContext = React312.createContext({
      expandableContentRef: null,
      expandableContentId: "",
      chipContainerRef: null,
      clearAllFilters: () => {
      }
    });
    globalBreakpoints = {
      md: parseInt(global_breakpoint_md_default.value),
      lg: parseInt(global_breakpoint_lg_default.value),
      xl: parseInt(global_breakpoint_xl_default.value),
      "2xl": parseInt(global_breakpoint_2xl_default.value)
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_toolbar__item_Width.js
var c_toolbar__item_Width, c_toolbar_item_Width_default;
var init_c_toolbar_item_Width = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_toolbar__item_Width.js"() {
    c_toolbar__item_Width = {
      "name": "--pf-v5-c-toolbar__item--Width",
      "value": "auto",
      "var": "var(--pf-v5-c-toolbar__item--Width)"
    };
    c_toolbar_item_Width_default = c_toolbar__item_Width;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js
var React313, ToolbarItemVariant, ToolbarItem;
var init_ToolbarItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js"() {
    init_tslib_es6();
    React313 = __toESM(require_react());
    init_toolbar2();
    init_esm();
    init_c_toolbar_item_Width();
    init_util();
    init_Divider2();
    init_PageContext();
    (function(ToolbarItemVariant2) {
      ToolbarItemVariant2["separator"] = "separator";
      ToolbarItemVariant2["bulk-select"] = "bulk-select";
      ToolbarItemVariant2["overflow-menu"] = "overflow-menu";
      ToolbarItemVariant2["pagination"] = "pagination";
      ToolbarItemVariant2["search-filter"] = "search-filter";
      ToolbarItemVariant2["label"] = "label";
      ToolbarItemVariant2["chip-group"] = "chip-group";
      ToolbarItemVariant2["expand-all"] = "expand-all";
    })(ToolbarItemVariant || (ToolbarItemVariant = {}));
    ToolbarItem = (_a) => {
      var { className, variant, visibility, spacer, widths, align, alignSelf, alignItems, id, children, isAllExpanded, isOverflowContainer } = _a, props = __rest(_a, ["className", "variant", "visibility", "spacer", "widths", "align", "alignSelf", "alignItems", "id", "children", "isAllExpanded", "isOverflowContainer"]);
      if (variant === ToolbarItemVariant.separator) {
        return React313.createElement(Divider, Object.assign({ className: css(toolbar_default.modifiers.vertical, className) }, props));
      }
      const widthStyles = {};
      if (widths) {
        Object.entries(widths || {}).map(([breakpoint, value]) => widthStyles[`${c_toolbar_item_Width_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
      }
      return React313.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React313.createElement("div", Object.assign({ className: css(toolbar_default.toolbarItem, variant && toolbar_default.modifiers[toCamel(variant)], isAllExpanded && toolbar_default.modifiers.expanded, isOverflowContainer && toolbar_default.modifiers.overflowContainer, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, className) }, variant === "label" && { "aria-hidden": true }, { id }, props, widths && { style: Object.assign(Object.assign({}, widthStyles), props.style) }), children));
    };
    ToolbarItem.displayName = "ToolbarItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarGroup.js
var React314, ToolbarGroupVariant, ToolbarGroupWithRef, ToolbarGroup;
var init_ToolbarGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarGroup.js"() {
    init_tslib_es6();
    React314 = __toESM(require_react());
    init_toolbar2();
    init_esm();
    init_util();
    init_PageContext();
    (function(ToolbarGroupVariant2) {
      ToolbarGroupVariant2["filter-group"] = "filter-group";
      ToolbarGroupVariant2["icon-button-group"] = "icon-button-group";
      ToolbarGroupVariant2["button-group"] = "button-group";
    })(ToolbarGroupVariant || (ToolbarGroupVariant = {}));
    ToolbarGroupWithRef = class extends React314.Component {
      render() {
        const _a = this.props, { visibility, align, alignItems, alignSelf, spacer, spaceItems, className, variant, children, isOverflowContainer, innerRef } = _a, props = __rest(_a, ["visibility", "align", "alignItems", "alignSelf", "spacer", "spaceItems", "className", "variant", "children", "isOverflowContainer", "innerRef"]);
        return React314.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React314.createElement("div", Object.assign({ className: css(toolbar_default.toolbarGroup, variant && toolbar_default.modifiers[toCamel(variant)], formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spaceItems, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, isOverflowContainer && toolbar_default.modifiers.overflowContainer, className) }, props, { ref: innerRef }), children));
      }
    };
    ToolbarGroup = React314.forwardRef((props, ref) => React314.createElement(ToolbarGroupWithRef, Object.assign({}, props, { innerRef: ref })));
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarChipGroupContent.js
var React315, ToolbarChipGroupContent;
var init_ToolbarChipGroupContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarChipGroupContent.js"() {
    init_tslib_es6();
    React315 = __toESM(require_react());
    init_toolbar2();
    init_esm();
    init_util();
    init_ToolbarItem();
    init_Button2();
    init_ToolbarGroup();
    init_ToolbarUtils();
    ToolbarChipGroupContent = class extends React315.Component {
      render() {
        const _a = this.props, { className, isExpanded, chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, collapseListedFiltersBreakpoint, numberOfFilters, numberOfFiltersText, customChipGroupContent } = _a, props = __rest(_a, ["className", "isExpanded", "chipGroupContentRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "numberOfFilters", "numberOfFiltersText", "customChipGroupContent"]);
        const clearChipGroups = () => {
          clearAllFilters();
        };
        let collapseListedFilters = false;
        if (collapseListedFiltersBreakpoint === "all") {
          collapseListedFilters = true;
        } else if (canUseDOM) {
          collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];
        }
        const isHidden3 = numberOfFilters === 0 || isExpanded;
        return React315.createElement(
          "div",
          Object.assign({ className: css(toolbar_default.toolbarContent, !isHidden3 && !collapseListedFilters && toolbar_default.modifiers.chipContainer, isHidden3 && toolbar_default.modifiers.hidden, className) }, (numberOfFilters === 0 || isExpanded) && { hidden: true }, { ref: chipGroupContentRef }, props),
          React315.createElement(ToolbarGroup, Object.assign({ className: css(collapseListedFilters && toolbar_default.modifiers.hidden) }, collapseListedFilters && { hidden: true }, collapseListedFilters && { "aria-hidden": true })),
          collapseListedFilters && numberOfFilters > 0 && !isExpanded && React315.createElement(
            ToolbarGroup,
            null,
            React315.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters))
          ),
          showClearFiltersButton && !isExpanded && !customChipGroupContent && React315.createElement(
            ToolbarItem,
            null,
            React315.createElement(Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)
          ),
          customChipGroupContent && customChipGroupContent
        );
      }
    };
    ToolbarChipGroupContent.displayName = "ToolbarChipGroupContent";
    ToolbarChipGroupContent.defaultProps = {
      clearFiltersButtonText: "Clear all filters",
      collapseListedFiltersBreakpoint: "lg",
      numberOfFiltersText: (numberOfFilters) => `${numberOfFilters} filters applied`
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js
var React316, Toolbar;
var init_Toolbar = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js"() {
    init_tslib_es6();
    React316 = __toESM(require_react());
    init_toolbar2();
    init_GenerateId();
    init_esm();
    init_ToolbarUtils();
    init_ToolbarChipGroupContent();
    init_util();
    init_helpers();
    init_PageContext();
    Toolbar = class _Toolbar extends React316.Component {
      constructor() {
        super(...arguments);
        this.chipGroupContentRef = React316.createRef();
        this.staticFilterInfo = {};
        this.state = {
          isManagedToggleExpanded: false,
          filterInfo: {},
          windowWidth: canUseDOM ? window.innerWidth : 1200,
          ouiaStateId: getDefaultOUIAId(_Toolbar.displayName)
        };
        this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);
        this.toggleIsExpanded = () => {
          this.setState((prevState) => ({
            isManagedToggleExpanded: !prevState.isManagedToggleExpanded
          }));
        };
        this.closeExpandableContent = (e) => {
          if (e.target.innerWidth !== this.state.windowWidth) {
            this.setState(() => ({
              isManagedToggleExpanded: false,
              windowWidth: e.target.innerWidth
            }));
          }
        };
        this.updateNumberFilters = (categoryName, numberOfFilters) => {
          const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);
          if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {
            filterInfoToUpdate[categoryName] = numberOfFilters;
            this.staticFilterInfo = filterInfoToUpdate;
            this.setState({ filterInfo: filterInfoToUpdate });
          }
        };
        this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);
        this.renderToolbar = (randomId) => {
          const _a = this.props, { clearAllFilters, clearFiltersButtonText, collapseListedFiltersBreakpoint, isExpanded: isExpandedProp, toggleIsExpanded, className, children, isFullHeight, isStatic, inset, usePageInsets, isSticky, ouiaId, numberOfFiltersText, customChipGroupContent } = _a, props = __rest(_a, ["clearAllFilters", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "isExpanded", "toggleIsExpanded", "className", "children", "isFullHeight", "isStatic", "inset", "usePageInsets", "isSticky", "ouiaId", "numberOfFiltersText", "customChipGroupContent"]);
          const { isManagedToggleExpanded } = this.state;
          const isToggleManaged = this.isToggleManaged();
          const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;
          const numberOfFilters = this.getNumberOfFilters();
          const showClearFiltersButton = numberOfFilters > 0;
          return React316.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React316.createElement(
            "div",
            Object.assign({ className: css(toolbar_default.toolbar, isFullHeight && toolbar_default.modifiers.fullHeight, isStatic && toolbar_default.modifiers.static, usePageInsets && toolbar_default.modifiers.pageInsets, isSticky && toolbar_default.modifiers.sticky, formatBreakpointMods(inset, toolbar_default, "", getBreakpoint2(width)), className), id: randomId }, getOUIAProps(_Toolbar.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props),
            React316.createElement(
              ToolbarContext.Provider,
              { value: {
                isExpanded,
                toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,
                chipGroupContentRef: this.chipGroupContentRef,
                updateNumberFilters: this.updateNumberFilters,
                numberOfFilters,
                clearAllFilters,
                clearFiltersButtonText,
                showClearFiltersButton,
                toolbarId: randomId,
                customChipGroupContent
              } },
              children,
              React316.createElement(ToolbarChipGroupContent, { isExpanded, chipGroupContentRef: this.chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, numberOfFilters, numberOfFiltersText, collapseListedFiltersBreakpoint, customChipGroupContent })
            )
          ));
        };
      }
      componentDidMount() {
        if (this.isToggleManaged() && canUseDOM) {
          window.addEventListener("resize", this.closeExpandableContent);
        }
      }
      componentWillUnmount() {
        if (this.isToggleManaged() && canUseDOM) {
          window.removeEventListener("resize", this.closeExpandableContent);
        }
      }
      render() {
        return this.props.id ? this.renderToolbar(this.props.id) : React316.createElement(GenerateId, null, (randomId) => this.renderToolbar(randomId));
      }
    };
    Toolbar.displayName = "Toolbar";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarContent.js
var React317, ToolbarContent;
var init_ToolbarContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarContent.js"() {
    init_tslib_es6();
    React317 = __toESM(require_react());
    init_toolbar2();
    init_esm();
    init_ToolbarUtils();
    init_util();
    init_PageContext();
    ToolbarContent = class _ToolbarContent extends React317.Component {
      constructor() {
        super(...arguments);
        this.expandableContentRef = React317.createRef();
        this.chipContainerRef = React317.createRef();
      }
      render() {
        const _a = this.props, { className, children, isExpanded, toolbarId, visibility, alignItems, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, alignSelf } = _a, props = __rest(_a, ["className", "children", "isExpanded", "toolbarId", "visibility", "alignItems", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText", "alignSelf"]);
        return React317.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React317.createElement(
          "div",
          Object.assign({ className: css(toolbar_default.toolbarContent, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), className), ref: this.expandableContentRef }, props),
          React317.createElement(ToolbarContext.Consumer, null, ({ clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext, isExpanded: isExpandedContext, toolbarId: toolbarIdContext }) => {
            const expandableContentId = `${toolbarId || toolbarIdContext}-expandable-content-${_ToolbarContent.currentId++}`;
            return React317.createElement(
              ToolbarContentContext.Provider,
              { value: {
                expandableContentRef: this.expandableContentRef,
                expandableContentId,
                chipContainerRef: this.chipContainerRef,
                isExpanded: isExpanded || isExpandedContext,
                clearAllFilters: clearAllFilters || clearAllFiltersContext,
                clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext,
                showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext
              } },
              React317.createElement("div", { className: css(toolbar_default.toolbarContentSection, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline) }, children)
            );
          })
        ));
      }
    };
    ToolbarContent.displayName = "ToolbarContent";
    ToolbarContent.currentId = 0;
    ToolbarContent.defaultProps = {
      isExpanded: false,
      showClearFiltersButton: false
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandIconWrapper.js
var React318, ToolbarExpandIconWrapper;
var init_ToolbarExpandIconWrapper = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandIconWrapper.js"() {
    init_tslib_es6();
    React318 = __toESM(require_react());
    init_toolbar2();
    init_esm();
    ToolbarExpandIconWrapper = (_a) => {
      var { children, className } = _a, props = __rest(_a, ["children", "className"]);
      return React318.createElement("span", Object.assign({}, props, { className: css(toolbar_default.toolbarExpandAllIcon, className) }), children);
    };
    ToolbarExpandIconWrapper.displayName = "ToolbarExpandIconWrapper";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandableContent.js
var React319, ToolbarExpandableContent;
var init_ToolbarExpandableContent = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandableContent.js"() {
    init_tslib_es6();
    React319 = __toESM(require_react());
    init_toolbar2();
    init_esm();
    init_ToolbarGroup();
    init_ToolbarItem();
    init_Button2();
    init_ToolbarUtils();
    ToolbarExpandableContent = class extends React319.Component {
      render() {
        const _a = this.props, { children, className, expandableContentRef, chipContainerRef, isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, ["children", "className", "expandableContentRef", "chipContainerRef", "isExpanded", "clearAllFilters", "clearFiltersButtonText", "showClearFiltersButton"]);
        const { numberOfFilters, customChipGroupContent } = this.context;
        const clearChipGroups = () => {
          clearAllFilters();
        };
        return React319.createElement(
          "div",
          Object.assign({ className: css(toolbar_default.toolbarExpandableContent, isExpanded && toolbar_default.modifiers.expanded, className), ref: expandableContentRef }, props),
          React319.createElement(ToolbarGroup, null, children),
          numberOfFilters > 0 && React319.createElement(
            ToolbarGroup,
            { className: toolbar_default.modifiers.chipContainer },
            React319.createElement(ToolbarGroup, { ref: chipContainerRef }),
            showClearFiltersButton && !customChipGroupContent && React319.createElement(
              ToolbarItem,
              null,
              React319.createElement(Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)
            ),
            customChipGroupContent && customChipGroupContent
          )
        );
      }
    };
    ToolbarExpandableContent.displayName = "ToolbarExpandableContent";
    ToolbarExpandableContent.contextType = ToolbarContext;
    ToolbarExpandableContent.defaultProps = {
      isExpanded: false,
      clearFiltersButtonText: "Clear all filters"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarFilter.js
var React320, ReactDOM5, ToolbarFilter;
var init_ToolbarFilter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarFilter.js"() {
    init_tslib_es6();
    React320 = __toESM(require_react());
    ReactDOM5 = __toESM(require_react_dom());
    init_ToolbarItem();
    init_Chip2();
    init_Chip2();
    init_ToolbarUtils();
    ToolbarFilter = class extends React320.Component {
      constructor(props) {
        super(props);
        this.state = {
          isMounted: false
        };
      }
      componentDidMount() {
        const { categoryName, chips } = this.props;
        this.context.updateNumberFilters(typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString(), chips.length);
        this.setState({ isMounted: true });
      }
      componentDidUpdate() {
        const { categoryName, chips } = this.props;
        this.context.updateNumberFilters(typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString(), chips.length);
      }
      render() {
        const _a = this.props, { children, chips, deleteChipGroup, deleteChip, chipGroupExpandedText, chipGroupCollapsedText, categoryName, showToolbarItem, isExpanded, expandableChipContainerRef } = _a, props = __rest(_a, ["children", "chips", "deleteChipGroup", "deleteChip", "chipGroupExpandedText", "chipGroupCollapsedText", "categoryName", "showToolbarItem", "isExpanded", "expandableChipContainerRef"]);
        const { isExpanded: managedIsExpanded, chipGroupContentRef } = this.context;
        const _isExpanded = isExpanded !== void 0 ? isExpanded : managedIsExpanded;
        const categoryKey = typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString();
        const chipGroup = chips.length ? React320.createElement(
          ToolbarItem,
          { variant: "chip-group" },
          React320.createElement(ChipGroup, { key: categoryKey, categoryName: typeof categoryName === "string" ? categoryName : categoryName.name, isClosable: deleteChipGroup !== void 0, onClick: () => deleteChipGroup(categoryName), collapsedText: chipGroupCollapsedText, expandedText: chipGroupExpandedText }, chips.map((chip) => typeof chip === "string" ? React320.createElement(Chip, { key: chip, onClick: () => deleteChip(categoryKey, chip) }, chip) : React320.createElement(Chip, { key: chip.key, onClick: () => deleteChip(categoryKey, chip) }, chip.node)))
        ) : null;
        if (!_isExpanded && this.state.isMounted) {
          return React320.createElement(
            React320.Fragment,
            null,
            showToolbarItem && React320.createElement(ToolbarItem, Object.assign({}, props), children),
            ReactDOM5.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)
          );
        }
        return React320.createElement(ToolbarContentContext.Consumer, null, ({ chipContainerRef }) => React320.createElement(
          React320.Fragment,
          null,
          showToolbarItem && React320.createElement(ToolbarItem, Object.assign({}, props), children),
          chipContainerRef.current && ReactDOM5.createPortal(chipGroup, chipContainerRef.current),
          expandableChipContainerRef && expandableChipContainerRef.current && ReactDOM5.createPortal(chipGroup, expandableChipContainerRef.current)
        ));
      }
    };
    ToolbarFilter.displayName = "ToolbarFilter";
    ToolbarFilter.contextType = ToolbarContext;
    ToolbarFilter.defaultProps = {
      chips: [],
      showToolbarItem: true
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarToggleGroup.js
var React321, ReactDOM6, ToolbarToggleGroup;
var init_ToolbarToggleGroup = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarToggleGroup.js"() {
    init_tslib_es6();
    React321 = __toESM(require_react());
    ReactDOM6 = __toESM(require_react_dom());
    init_toolbar2();
    init_esm();
    init_ToolbarUtils();
    init_Button2();
    init_global_breakpoint_lg();
    init_util();
    init_PageContext();
    init_ToolbarExpandableContent();
    ToolbarToggleGroup = class extends React321.Component {
      constructor() {
        super(...arguments);
        this.toggleRef = React321.createRef();
        this.expandableContentRef = React321.createRef();
        this.isContentPopup = () => {
          const viewportSize = canUseDOM ? window.innerWidth : 1200;
          const lgBreakpointValue = parseInt(global_breakpoint_lg_default.value);
          return viewportSize < lgBreakpointValue;
        };
      }
      render() {
        const _a = this.props, { toggleIcon, variant, visibility, breakpoint, alignment, spacer, spaceItems, className, children, isExpanded, onToggle, chipContainerRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, ["toggleIcon", "variant", "visibility", "breakpoint", "alignment", "spacer", "spaceItems", "className", "children", "isExpanded", "onToggle", "chipContainerRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText"]);
        if (!breakpoint && !toggleIcon) {
          console.error("ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.");
        }
        return React321.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React321.createElement(ToolbarContext.Consumer, null, ({ toggleIsExpanded: managedOnToggle }) => {
          const _onToggle = onToggle !== void 0 ? onToggle : managedOnToggle;
          return React321.createElement(ToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId, chipContainerRef: managedChipContainerRef, isExpanded: managedIsExpanded, clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext }) => {
            const _isExpanded = isExpanded !== void 0 ? isExpanded : managedIsExpanded;
            const _chipContainerRef = chipContainerRef !== void 0 ? chipContainerRef : managedChipContainerRef;
            const breakpointMod = {};
            breakpointMod[breakpoint] = "show";
            const expandableContent = React321.createElement(ToolbarExpandableContent, { id: expandableContentId, expandableContentRef: this.expandableContentRef, isExpanded: _isExpanded, clearAllFilters: clearAllFilters || clearAllFiltersContext, showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext, clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext, chipContainerRef: _chipContainerRef }, children);
            const toggleButton = React321.createElement(
              "div",
              { className: css(toolbar_default.toolbarToggle) },
              React321.createElement(Button, Object.assign({ variant: "plain", onClick: _onToggle, "aria-label": "Show Filters" }, _isExpanded && { "aria-expanded": true }, { "aria-haspopup": _isExpanded && this.isContentPopup(), "aria-controls": _isExpanded ? expandableContentId : void 0, ref: this.toggleRef }), toggleIcon)
            );
            return React321.createElement(
              "div",
              Object.assign({ className: css(toolbar_default.toolbarGroup, toolbar_default.modifiers.toggleGroup, variant && toolbar_default.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(alignment, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spaceItems, toolbar_default, "", getBreakpoint2(width)), className) }, props),
              toggleButton,
              _isExpanded && ReactDOM6.createPortal(expandableContent, expandableContentRef.current),
              !_isExpanded && children
            );
          });
        }));
      }
    };
    ToolbarToggleGroup.displayName = "ToolbarToggleGroup";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/index.js
var init_Toolbar2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Toolbar/index.js"() {
    init_Toolbar();
    init_ToolbarContent();
    init_ToolbarExpandIconWrapper();
    init_ToolbarExpandableContent();
    init_ToolbarGroup();
    init_ToolbarItem();
    init_ToolbarFilter();
    init_ToolbarToggleGroup();
    init_ToolbarUtils();
  }
});

// node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.css
var init_number_input = __esm({
  "node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.mjs
var number_input_default;
var init_number_input2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.mjs"() {
    init_number_input();
    number_input_default = {
      "formControl": "pf-v5-c-form-control",
      "inputGroup": "pf-v5-c-input-group",
      "modifiers": {
        "status": "pf-m-status"
      },
      "numberInput": "pf-v5-c-number-input",
      "numberInputIcon": "pf-v5-c-number-input__icon",
      "numberInputUnit": "pf-v5-c-number-input__unit"
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_number_input_c_form_control_width_chars.js
var c_number_input_c_form_control_width_chars, c_number_input_c_form_control_width_chars_default;
var init_c_number_input_c_form_control_width_chars = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/c_number_input_c_form_control_width_chars.js"() {
    c_number_input_c_form_control_width_chars = {
      "name": "--pf-v5-c-number-input--c-form-control--width-chars",
      "value": "4",
      "var": "var(--pf-v5-c-number-input--c-form-control--width-chars)"
    };
    c_number_input_c_form_control_width_chars_default = c_number_input_c_form_control_width_chars;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NumberInput/NumberInput.js
var React322, defaultKeyDownHandler, NumberInput;
var init_NumberInput = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NumberInput/NumberInput.js"() {
    init_tslib_es6();
    React322 = __toESM(require_react());
    init_number_input2();
    init_esm();
    init_minus_icon();
    init_plus_icon();
    init_InputGroup2();
    init_Button2();
    init_helpers();
    init_TextInput2();
    init_c_number_input_c_form_control_width_chars();
    defaultKeyDownHandler = (args) => (event) => {
      if (KeyTypes.ArrowUp === event.key && args.onPlus) {
        event.preventDefault();
        args.onPlus(null, args.inputName);
      }
      if (KeyTypes.ArrowDown === event.key && args.onMinus) {
        event.preventDefault();
        args.onMinus(null, args.inputName);
      }
    };
    NumberInput = (_a) => {
      var { value = 0, className, widthChars, isDisabled = false, validated = ValidatedOptions.default, onMinus = () => {
      }, onChange, onBlur, onPlus = () => {
      }, unit, unitPosition = "after", min, max, inputName, inputAriaLabel = "Input", minusBtnAriaLabel = "Minus", plusBtnAriaLabel = "Plus", inputProps, minusBtnProps, plusBtnProps } = _a, props = __rest(_a, ["value", "className", "widthChars", "isDisabled", "validated", "onMinus", "onChange", "onBlur", "onPlus", "unit", "unitPosition", "min", "max", "inputName", "inputAriaLabel", "minusBtnAriaLabel", "plusBtnAriaLabel", "inputProps", "minusBtnProps", "plusBtnProps"]);
      const numberInputUnit = React322.createElement("div", { className: css(number_input_default.numberInputUnit) }, unit);
      const keyDownHandler = inputProps && inputProps.onKeyDown ? inputProps.onKeyDown : defaultKeyDownHandler({ inputName, onMinus, onPlus });
      const handleBlur = (event) => {
        event.target.value = Number(event.target.value).toString();
        if (onChange) {
          onChange(event);
        }
        if (onBlur) {
          onBlur(event);
        }
      };
      return React322.createElement(
        "div",
        Object.assign({ className: css(number_input_default.numberInput, validated !== "default" && number_input_default.modifiers.status, className) }, widthChars && {
          style: Object.assign({ [c_number_input_c_form_control_width_chars_default.name]: widthChars }, props.style)
        }, props),
        unit && unitPosition === "before" && numberInputUnit,
        React322.createElement(
          InputGroup,
          null,
          React322.createElement(
            InputGroupItem,
            null,
            React322.createElement(
              Button,
              Object.assign({ variant: "control", "aria-label": minusBtnAriaLabel, isDisabled: isDisabled || value <= min, onClick: (evt) => onMinus(evt, inputName) }, minusBtnProps),
              React322.createElement(
                "span",
                { className: css(number_input_default.numberInputIcon) },
                React322.createElement(minus_icon_default, { "aria-hidden": "true" })
              )
            )
          ),
          React322.createElement(
            InputGroupItem,
            null,
            React322.createElement(TextInput, Object.assign({}, inputProps, { type: "number", value, name: inputName, "aria-label": inputAriaLabel }, isDisabled && { isDisabled }, onChange && { onChange: (event, _value) => onChange(event) }, { onBlur: handleBlur }, !onChange && { readOnlyVariant: "default" }, { onKeyDown: keyDownHandler, validated }))
          ),
          React322.createElement(
            InputGroupItem,
            null,
            React322.createElement(
              Button,
              Object.assign({ variant: "control", "aria-label": plusBtnAriaLabel, isDisabled: isDisabled || value >= max, onClick: (evt) => onPlus(evt, inputName) }, plusBtnProps),
              React322.createElement(
                "span",
                { className: css(number_input_default.numberInputIcon) },
                React322.createElement(plus_icon_default, { "aria-hidden": "true" })
              )
            )
          )
        ),
        unit && unitPosition === "after" && numberInputUnit
      );
    };
    NumberInput.displayName = "NumberInput";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/NumberInput/index.js
var init_NumberInput2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/NumberInput/index.js"() {
    init_NumberInput();
  }
});

// node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.css
var init_tree_view = __esm({
  "node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs
var tree_view_default;
var init_tree_view2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs"() {
    init_tree_view();
    tree_view_default = {
      "badge": "pf-v5-c-badge",
      "dirRtl": "pf-v5-m-dir-rtl",
      "modifiers": {
        "compact": "pf-m-compact",
        "guides": "pf-m-guides",
        "expanded": "pf-m-expanded",
        "noBackground": "pf-m-no-background",
        "current": "pf-m-current",
        "read": "pf-m-read",
        "selectable": "pf-m-selectable",
        "truncate": "pf-m-truncate"
      },
      "themeDark": "pf-v5-theme-dark",
      "treeView": "pf-v5-c-tree-view",
      "treeViewAction": "pf-v5-c-tree-view__action",
      "treeViewContent": "pf-v5-c-tree-view__content",
      "treeViewListItem": "pf-v5-c-tree-view__list-item",
      "treeViewNode": "pf-v5-c-tree-view__node",
      "treeViewNodeCheck": "pf-v5-c-tree-view__node-check",
      "treeViewNodeContainer": "pf-v5-c-tree-view__node-container",
      "treeViewNodeContent": "pf-v5-c-tree-view__node-content",
      "treeViewNodeCount": "pf-v5-c-tree-view__node-count",
      "treeViewNodeIcon": "pf-v5-c-tree-view__node-icon",
      "treeViewNodeText": "pf-v5-c-tree-view__node-text",
      "treeViewNodeTitle": "pf-v5-c-tree-view__node-title",
      "treeViewNodeToggle": "pf-v5-c-tree-view__node-toggle",
      "treeViewNodeToggleIcon": "pf-v5-c-tree-view__node-toggle-icon",
      "treeViewSearch": "pf-v5-c-tree-view__search"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js
var React323, TreeViewList;
var init_TreeViewList = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js"() {
    init_tslib_es6();
    React323 = __toESM(require_react());
    init_esm();
    init_Divider2();
    init_tree_view2();
    TreeViewList = (_a) => {
      var { isNested = false, toolbar, children } = _a, props = __rest(_a, ["isNested", "toolbar", "children"]);
      return React323.createElement(
        React323.Fragment,
        null,
        toolbar && React323.createElement(
          React323.Fragment,
          null,
          toolbar,
          React323.createElement(Divider, null)
        ),
        React323.createElement("ul", Object.assign({ className: css(`${tree_view_default.treeView}__list`), role: isNested ? "group" : "tree" }, props), children)
      );
    };
    TreeViewList.displayName = "TreeViewList";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js
var import_react25, TreeViewListItemBase, TreeViewListItem;
var init_TreeViewListItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js"() {
    import_react25 = __toESM(require_react());
    init_esm();
    init_tree_view2();
    init_angle_right_icon();
    init_Badge2();
    init_GenerateId();
    TreeViewListItemBase = ({
      name,
      title,
      id,
      isExpanded,
      defaultExpanded = false,
      children = null,
      onSelect,
      onExpand,
      onCollapse,
      onCheck,
      hasCheckbox = false,
      checkProps = {
        checked: false
      },
      hasBadge = false,
      customBadgeContent,
      badgeProps = { isRead: true },
      isSelectable = false,
      isCompact,
      activeItems = [],
      itemData,
      parentItem,
      icon,
      expandedIcon,
      action,
      compareItems,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      useMemo: useMemo8
    }) => {
      const [internalIsExpanded, setIsExpanded] = (0, import_react25.useState)(defaultExpanded);
      (0, import_react25.useEffect)(() => {
        if (isExpanded !== void 0 && isExpanded !== null) {
          setIsExpanded(isExpanded);
        } else if (defaultExpanded !== void 0 && defaultExpanded !== null) {
          setIsExpanded(internalIsExpanded || defaultExpanded);
        }
      }, [isExpanded, defaultExpanded]);
      let Component44 = "button";
      if (hasCheckbox) {
        Component44 = "label";
      } else if (isSelectable) {
        Component44 = "div";
      }
      const ToggleComponent = hasCheckbox || isSelectable ? "button" : "span";
      const renderToggle = (randomId) => import_react25.default.createElement(
        ToggleComponent,
        Object.assign({ className: css(tree_view_default.treeViewNodeToggle), onClick: (evt) => {
          if (isSelectable || hasCheckbox) {
            if (internalIsExpanded) {
              onCollapse && onCollapse(evt, itemData, parentItem);
            } else {
              onExpand && onExpand(evt, itemData, parentItem);
            }
            setIsExpanded(!internalIsExpanded);
          }
          if (isSelectable) {
            evt.stopPropagation();
          }
        } }, (hasCheckbox || isSelectable) && { "aria-labelledby": `label-${randomId}` }, ToggleComponent === "button" && { type: "button" }, { tabIndex: -1 }),
        import_react25.default.createElement(
          "span",
          { className: css(tree_view_default.treeViewNodeToggleIcon) },
          import_react25.default.createElement(angle_right_icon_default, { "aria-hidden": "true" })
        )
      );
      const renderCheck = (randomId) => import_react25.default.createElement(
        "span",
        { className: css(tree_view_default.treeViewNodeCheck) },
        import_react25.default.createElement("input", Object.assign({ type: "checkbox", onChange: (evt) => onCheck && onCheck(evt, itemData, parentItem), onClick: (evt) => evt.stopPropagation(), ref: (elem) => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))
      );
      const iconRendered = import_react25.default.createElement(
        "span",
        { className: css(tree_view_default.treeViewNodeIcon) },
        !internalIsExpanded && icon,
        internalIsExpanded && (expandedIcon || icon)
      );
      const renderNodeContent = () => {
        const content = import_react25.default.createElement(
          import_react25.default.Fragment,
          null,
          isCompact && title && import_react25.default.createElement("span", { className: css(tree_view_default.treeViewNodeTitle) }, title),
          isSelectable ? import_react25.default.createElement("button", { tabIndex: -1, className: css(tree_view_default.treeViewNodeText), type: "button" }, name) : import_react25.default.createElement("span", { className: css(tree_view_default.treeViewNodeText) }, name)
        );
        return isCompact ? import_react25.default.createElement("span", { className: css(tree_view_default.treeViewNodeContent) }, content) : content;
      };
      const badgeRendered = import_react25.default.createElement(
        import_react25.default.Fragment,
        null,
        hasBadge && children && import_react25.default.createElement(
          "span",
          { className: css(tree_view_default.treeViewNodeCount) },
          import_react25.default.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)
        ),
        hasBadge && !children && customBadgeContent !== void 0 && import_react25.default.createElement(
          "span",
          { className: css(tree_view_default.treeViewNodeCount) },
          import_react25.default.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)
        )
      );
      return import_react25.default.createElement(
        "li",
        { id, className: css(tree_view_default.treeViewListItem, internalIsExpanded && tree_view_default.modifiers.expanded), "aria-expanded": internalIsExpanded, role: "treeitem", tabIndex: -1 },
        import_react25.default.createElement(
          "div",
          { className: css(tree_view_default.treeViewContent) },
          import_react25.default.createElement(GenerateId, { prefix: isSelectable ? "selectable-id" : "checkbox-id" }, (randomId) => import_react25.default.createElement(
            Component44,
            Object.assign({ className: css(tree_view_default.treeViewNode, children && (isSelectable || hasCheckbox) && tree_view_default.modifiers.selectable, (!children || isSelectable) && activeItems && activeItems.length > 0 && activeItems.some((item) => compareItems && item && compareItems(item, itemData)) ? tree_view_default.modifiers.current : ""), onClick: (evt) => {
              if (!hasCheckbox) {
                onSelect && onSelect(evt, itemData, parentItem);
                if (!isSelectable && children && evt.isDefaultPrevented() !== true) {
                  if (internalIsExpanded) {
                    onCollapse && onCollapse(evt, itemData, parentItem);
                  } else {
                    onExpand && onExpand(evt, itemData, parentItem);
                  }
                  setIsExpanded(!internalIsExpanded);
                }
              }
            } }, hasCheckbox && { htmlFor: randomId }, (hasCheckbox || isSelectable && children) && { id: `label-${randomId}` }, Component44 === "button" && { type: "button" }),
            import_react25.default.createElement(
              "span",
              { className: css(tree_view_default.treeViewNodeContainer) },
              children && renderToggle(randomId),
              hasCheckbox && renderCheck(randomId),
              icon && iconRendered,
              renderNodeContent(),
              badgeRendered
            )
          )),
          action && import_react25.default.createElement("div", { className: css(tree_view_default.treeViewAction) }, action)
        ),
        internalIsExpanded && children
      );
    };
    TreeViewListItem = import_react25.default.memo(TreeViewListItemBase, (prevProps, nextProps) => {
      if (!nextProps.useMemo) {
        return false;
      }
      const prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some((item) => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));
      const nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some((item) => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));
      if (prevIncludes || nextIncludes) {
        return false;
      }
      if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.onExpand !== nextProps.onExpand || prevProps.onCollapse !== nextProps.onCollapse || prevProps.hasCheckbox !== nextProps.hasCheckbox || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {
        return false;
      }
      return true;
    });
    TreeViewListItem.displayName = "TreeViewListItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js
var React325, TreeViewRoot;
var init_TreeViewRoot = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js"() {
    init_tslib_es6();
    React325 = __toESM(require_react());
    init_esm();
    init_tree_view2();
    init_util();
    init_helpers();
    init_constants();
    TreeViewRoot = class extends React325.Component {
      constructor() {
        super(...arguments);
        this.displayName = "TreeViewRoot";
        this.treeRef = React325.createRef();
        this.handleKeys = (event) => {
          var _a, _b, _c, _d, _e, _f, _g;
          if (!this.treeRef.current.contains(event.target) || !event.target.classList.contains(tree_view_default.treeViewNode)) {
            return;
          }
          const activeElement = document.activeElement;
          const key = event.key;
          const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)).filter((el) => !el.classList.contains("pf-m-disabled"));
          if (key === KeyTypes.Space) {
            activeElement.click();
            event.preventDefault();
          }
          handleArrows(event, treeItems, (element) => activeElement === element, void 0, [], void 0, true, true);
          if (["ArrowLeft", "ArrowRight"].includes(key)) {
            const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains(tree_view_default.treeViewNodeToggle);
            const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("li")) === null || _d === void 0 ? void 0 : _d.classList.contains("pf-m-expanded");
            if (key === "ArrowLeft") {
              if (isExpandable && isExpanded) {
                activeElement.click();
              } else {
                const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("ul")) === null || _e === void 0 ? void 0 : _e.parentElement;
                if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== "DIV") {
                  const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector("button");
                  activeElement.tabIndex = -1;
                  if (parentButton) {
                    parentButton.tabIndex = 0;
                    parentButton.focus();
                  }
                }
              }
            } else {
              if (isExpandable && !isExpanded) {
                activeElement.tabIndex = -1;
                activeElement.click();
                const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("li")) === null || _f === void 0 ? void 0 : _f.querySelector("ul > li")) === null || _g === void 0 ? void 0 : _g.querySelector("button");
                if (childElement) {
                  childElement.tabIndex = 0;
                  childElement.focus();
                }
              }
            }
            event.preventDefault();
          }
        };
        this.handleKeysCheckbox = (event) => {
          var _a, _b, _c, _d, _e;
          if (!this.treeRef.current.contains(event.target)) {
            return;
          }
          const activeElement = document.activeElement;
          const key = event.key;
          if (key === KeyTypes.Space) {
            activeElement.click();
            event.preventDefault();
          }
          const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode));
          handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector("button,input"), [], void 0, true, true);
          if (["ArrowLeft", "ArrowRight"].includes(key)) {
            if (key === "ArrowLeft") {
              if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "INPUT") {
                ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) && activeElement.parentElement.previousSibling.focus();
              } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {
                if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === "SPAN") {
                  activeElement.previousSibling.firstChild.focus();
                } else {
                  activeElement.previousSibling.focus();
                }
              }
            } else {
              if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "INPUT") {
                ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();
              } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {
                if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === "SPAN") {
                  activeElement.nextSibling.firstChild.focus();
                } else {
                  activeElement.nextSibling.focus();
                }
              }
            }
            event.preventDefault();
          }
        };
        this.variantStyleModifiers = {
          default: "",
          compact: tree_view_default.modifiers.compact,
          compactNoBackground: [tree_view_default.modifiers.compact, tree_view_default.modifiers.noBackground]
        };
      }
      componentDidMount() {
        var _a;
        if (canUseDOM) {
          window.addEventListener("keydown", this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);
        }
        if (this.props.hasCheckboxes || this.props.hasSelectableNodes) {
          const firstToggle = this.treeRef.current.getElementsByClassName(tree_view_default.treeViewNodeToggle)[0];
          if (firstToggle) {
            firstToggle.tabIndex = 0;
          }
          if (this.props.hasCheckboxes) {
            const firstInput = this.treeRef.current.getElementsByTagName("INPUT")[0];
            if (firstInput) {
              firstInput.tabIndex = 0;
            }
          }
          if (this.props.hasSelectableNodes) {
            const firstTextButton = this.treeRef.current.getElementsByClassName(tree_view_default.treeViewNodeText)[0];
            if (firstTextButton) {
              firstTextButton.tabIndex = 0;
            }
          }
        } else {
          ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)[0]).tabIndex = 0;
        }
      }
      componentWillUnmount() {
        if (canUseDOM) {
          window.removeEventListener("keydown", this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);
        }
      }
      render() {
        const _a = this.props, { children, hasCheckboxes, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, ["children", "hasCheckboxes", "hasGuides", "variant", "className", "hasSelectableNodes"]);
        return React325.createElement("div", Object.assign({ className: css(tree_view_default.treeView, hasGuides && tree_view_default.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children);
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js
var React326, TreeView;
var init_TreeView = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js"() {
    init_tslib_es6();
    React326 = __toESM(require_react());
    init_TreeViewList();
    init_TreeViewListItem();
    init_TreeViewRoot();
    TreeView = (_a) => {
      var { data, isNested = false, hasCheckboxes = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = "default", defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, onExpand, onCollapse, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo: useMemo8 } = _a, props = __rest(_a, ["data", "isNested", "hasCheckboxes", "hasBadges", "hasGuides", "hasSelectableNodes", "variant", "defaultAllExpanded", "allExpanded", "icon", "expandedIcon", "parentItem", "onSelect", "onCheck", "onExpand", "onCollapse", "toolbar", "activeItems", "compareItems", "className", "useMemo"]);
      const treeViewList = React326.createElement(TreeViewList, { isNested, toolbar }, data.map((item) => {
        var _a2, _b;
        return React326.createElement(TreeViewListItem, Object.assign({ key: ((_a2 = item.id) === null || _a2 === void 0 ? void 0 : _a2.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== void 0 ? item.defaultExpanded : defaultAllExpanded, onSelect, onCheck, onExpand, onCollapse, hasCheckbox: item.hasCheckbox !== void 0 ? item.hasCheckbox : hasCheckboxes, checkProps: item.checkProps, hasBadge: item.hasBadge !== void 0 ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems, parentItem, itemData: item, icon: item.icon !== void 0 ? item.icon : icon, expandedIcon: item.expandedIcon !== void 0 ? item.expandedIcon : expandedIcon, action: item.action, compareItems, isCompact: variant === "compact" || variant === "compactNoBackground", useMemo: useMemo8 }, item.children && {
          children: React326.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasCheckboxes, hasBadges, hasGuides, hasSelectableNodes, variant, allExpanded, defaultAllExpanded, onSelect, onCheck, onExpand, onCollapse, activeItems, icon, expandedIcon })
        }));
      }));
      return React326.createElement(React326.Fragment, null, parentItem ? treeViewList : React326.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes, hasCheckboxes, hasGuides, variant, className }, props), treeViewList));
    };
    TreeView.displayName = "TreeView";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewSearch.js
var React327, TreeViewSearch;
var init_TreeViewSearch = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewSearch.js"() {
    init_tslib_es6();
    React327 = __toESM(require_react());
    init_esm();
    init_tree_view2();
    init_form_control2();
    init_search_icon();
    TreeViewSearch = (_a) => {
      var { className, onSearch, id, name, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "onSearch", "id", "name", "aria-label"]);
      return React327.createElement(
        "div",
        { className: css(tree_view_default.treeViewSearch, className) },
        React327.createElement(
          "div",
          { className: css(form_control_default.formControl, form_control_default.modifiers.icon) },
          React327.createElement("input", Object.assign({ onChange: onSearch, id, name, "aria-label": ariaLabel, type: "search" }, props)),
          React327.createElement(
            "div",
            { className: css(form_control_default.formControlUtilities) },
            React327.createElement(
              "div",
              { className: css(form_control_default.formControlIcon) },
              React327.createElement(search_icon_default, null)
            )
          )
        )
      );
    };
    TreeViewSearch.displayName = "TreeViewSearch";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/index.js
var init_TreeView2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/TreeView/index.js"() {
    init_TreeView();
    init_TreeViewSearch();
  }
});

// node_modules/@patternfly/react-styles/css/components/Wizard/wizard.css
var init_wizard = __esm({
  "node_modules/@patternfly/react-styles/css/components/Wizard/wizard.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Wizard/wizard.mjs
var wizard_default;
var init_wizard2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Wizard/wizard.mjs"() {
    init_wizard();
    wizard_default = {
      "button": "pf-v5-c-button",
      "dirRtl": "pf-v5-m-dir-rtl",
      "drawer": "pf-v5-c-drawer",
      "modalBox": "pf-v5-c-modal-box",
      "modifiers": {
        "finished": "pf-m-finished",
        "expanded": "pf-m-expanded",
        "current": "pf-m-current",
        "expandable": "pf-m-expandable",
        "disabled": "pf-m-disabled",
        "noPadding": "pf-m-no-padding"
      },
      "pageMainWizard": "pf-v5-c-page__main-wizard",
      "themeDark": "pf-v5-theme-dark",
      "wizard": "pf-v5-c-wizard",
      "wizardClose": "pf-v5-c-wizard__close",
      "wizardDescription": "pf-v5-c-wizard__description",
      "wizardFooter": "pf-v5-c-wizard__footer",
      "wizardFooterCancel": "pf-v5-c-wizard__footer-cancel",
      "wizardHeader": "pf-v5-c-wizard__header",
      "wizardInnerWrap": "pf-v5-c-wizard__inner-wrap",
      "wizardMain": "pf-v5-c-wizard__main",
      "wizardMainBody": "pf-v5-c-wizard__main-body",
      "wizardNav": "pf-v5-c-wizard__nav",
      "wizardNavItem": "pf-v5-c-wizard__nav-item",
      "wizardNavLink": "pf-v5-c-wizard__nav-link",
      "wizardNavLinkText": "pf-v5-c-wizard__nav-link-text",
      "wizardNavLinkToggle": "pf-v5-c-wizard__nav-link-toggle",
      "wizardNavLinkToggleIcon": "pf-v5-c-wizard__nav-link-toggle-icon",
      "wizardNavList": "pf-v5-c-wizard__nav-list",
      "wizardOuterWrap": "pf-v5-c-wizard__outer-wrap",
      "wizardTitle": "pf-v5-c-wizard__title",
      "wizardTitleText": "pf-v5-c-wizard__title-text",
      "wizardToggle": "pf-v5-c-wizard__toggle",
      "wizardToggleIcon": "pf-v5-c-wizard__toggle-icon",
      "wizardToggleList": "pf-v5-c-wizard__toggle-list",
      "wizardToggleListItem": "pf-v5-c-wizard__toggle-list-item",
      "wizardToggleNum": "pf-v5-c-wizard__toggle-num",
      "wizardToggleSeparator": "pf-v5-c-wizard__toggle-separator"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/types.js
function isCustomWizardNav(nav) {
  return typeof nav === "function" || import_react26.default.isValidElement(nav);
}
function isCustomWizardNavItem(navItem) {
  return typeof navItem === "function" || import_react26.default.isValidElement(navItem);
}
function isCustomWizardFooter(footer) {
  return typeof footer === "function" || import_react26.default.isValidElement(footer);
}
function isWizardBasicStep(step) {
  return (step === null || step === void 0 ? void 0 : step.subStepIds) === void 0 && !isWizardSubStep(step);
}
function isWizardSubStep(step) {
  return (step === null || step === void 0 ? void 0 : step.parentId) !== void 0;
}
function isWizardParentStep(step) {
  return (step === null || step === void 0 ? void 0 : step.subStepIds) !== void 0;
}
var import_react26, WizardNavItemStatus, WizardStepChangeScope;
var init_types2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/types.js"() {
    import_react26 = __toESM(require_react());
    (function(WizardNavItemStatus2) {
      WizardNavItemStatus2["Default"] = "default";
      WizardNavItemStatus2["Error"] = "error";
    })(WizardNavItemStatus || (WizardNavItemStatus = {}));
    (function(WizardStepChangeScope2) {
      WizardStepChangeScope2["Next"] = "next";
      WizardStepChangeScope2["Back"] = "back";
      WizardStepChangeScope2["Nav"] = "nav";
    })(WizardStepChangeScope || (WizardStepChangeScope = {}));
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardFooter.js
var import_react27, WizardFooterWrapper, WizardFooter, InternalWizardFooter;
var init_WizardFooter = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardFooter.js"() {
    init_tslib_es6();
    import_react27 = __toESM(require_react());
    init_esm();
    init_wizard2();
    init_Button2();
    init_types2();
    WizardFooterWrapper = ({ children }) => import_react27.default.createElement("footer", { className: css(wizard_default.wizardFooter) }, children);
    WizardFooter = (_a) => {
      var { activeStep } = _a, internalProps = __rest(_a, ["activeStep"]);
      const activeStepFooter = !isCustomWizardFooter(activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer) && (activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer);
      return import_react27.default.createElement(InternalWizardFooter, Object.assign({}, internalProps, activeStepFooter));
    };
    InternalWizardFooter = ({ onNext, onBack, onClose, isNextDisabled, isBackDisabled, isBackHidden, isCancelHidden, nextButtonText = "Next", backButtonText = "Back", cancelButtonText = "Cancel", nextButtonProps, backButtonProps, cancelButtonProps }) => import_react27.default.createElement(
      WizardFooterWrapper,
      null,
      !isBackHidden && import_react27.default.createElement(Button, Object.assign({ variant: ButtonVariant.secondary, onClick: onBack, isDisabled: isBackDisabled }, backButtonProps), backButtonText),
      import_react27.default.createElement(Button, Object.assign({ variant: ButtonVariant.primary, type: "submit", onClick: onNext, isDisabled: isNextDisabled }, nextButtonProps), nextButtonText),
      !isCancelHidden && import_react27.default.createElement(
        "div",
        { className: wizard_default.wizardFooterCancel },
        import_react27.default.createElement(Button, Object.assign({ variant: ButtonVariant.link, onClick: onClose }, cancelButtonProps), cancelButtonText)
      )
    );
    WizardFooterWrapper.displayName = "WizardFooterWrapper";
    WizardFooter.displayName = "WizardFooter";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js
var import_react28, WizardContext, WizardContextProvider, useWizardContext;
var init_WizardContext = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js"() {
    import_react28 = __toESM(require_react());
    init_types2();
    init_WizardFooter();
    WizardContext = import_react28.default.createContext({});
    WizardContextProvider = ({ steps: initialSteps, footer: initialFooter, activeStepIndex, children, onNext, onBack, onClose, goToStepById, goToStepByName, goToStepByIndex }) => {
      const [currentSteps, setCurrentSteps] = import_react28.default.useState(initialSteps);
      const [currentFooter, setCurrentFooter] = import_react28.default.useState();
      const steps = import_react28.default.useMemo(() => currentSteps.map((currentStepProps, index) => Object.assign(Object.assign({}, currentStepProps), initialSteps[index])), [initialSteps, currentSteps]);
      const activeStep = import_react28.default.useMemo(() => steps.find((step) => step.index === activeStepIndex), [activeStepIndex, steps]);
      const close = import_react28.default.useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose(null), [onClose]);
      const goToNextStep = import_react28.default.useCallback(() => onNext(null, steps), [onNext, steps]);
      const goToPrevStep = import_react28.default.useCallback(() => onBack(null, steps), [onBack, steps]);
      const footer = import_react28.default.useMemo(() => {
        const wizardFooter = (activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer) || currentFooter || initialFooter;
        if (isCustomWizardFooter(wizardFooter)) {
          const customFooter = wizardFooter;
          return typeof customFooter === "function" ? customFooter(activeStep, goToNextStep, goToPrevStep, close) : customFooter;
        }
        return import_react28.default.createElement(WizardFooter, Object.assign({ activeStep, onNext: goToNextStep, onBack: goToPrevStep, onClose: close, isBackDisabled: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.index) === 1 || isWizardSubStep(activeStep) && (activeStep === null || activeStep === void 0 ? void 0 : activeStep.index) === 2 }, wizardFooter));
      }, [currentFooter, initialFooter, activeStep, goToNextStep, goToPrevStep, close]);
      const getStep = import_react28.default.useCallback((stepId) => steps.find((step) => step.id === stepId), [steps]);
      const setStep = import_react28.default.useCallback((step) => setCurrentSteps((prevSteps) => prevSteps.map((prevStep) => {
        if (prevStep.id === step.id) {
          return Object.assign(Object.assign({}, prevStep), step);
        }
        return prevStep;
      })), []);
      return import_react28.default.createElement(WizardContext.Provider, { value: {
        steps,
        activeStep,
        footer,
        close,
        getStep,
        setStep,
        goToNextStep,
        goToPrevStep,
        setFooter: setCurrentFooter,
        goToStepById: import_react28.default.useCallback((id) => goToStepById(steps, id), [goToStepById, steps]),
        goToStepByName: import_react28.default.useCallback((name) => goToStepByName(steps, name), [goToStepByName, steps]),
        goToStepByIndex: import_react28.default.useCallback((index) => goToStepByIndex(null, steps, index), [goToStepByIndex, steps])
      } }, children);
    };
    WizardContextProvider.displayName = "WizardContextProvider";
    useWizardContext = () => import_react28.default.useContext(WizardContext);
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardStep.js
var import_react29, WizardStep;
var init_WizardStep = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardStep.js"() {
    init_tslib_es6();
    import_react29 = __toESM(require_react());
    init_types2();
    init_WizardContext();
    WizardStep = (_a) => {
      var { children, steps: _subSteps } = _a, props = __rest(_a, ["children", "steps"]);
      const { activeStep, setStep } = useWizardContext();
      const { id, name, body, isDisabled, isHidden: isHidden3, navItem, footer, status } = props;
      const isParentStep = isWizardParentStep(activeStep);
      import_react29.default.useEffect(() => {
        setStep(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
          id,
          name
        }, body && { body }), isDisabled && { isDisabled }), isHidden3 && { isHidden: isHidden3 }), navItem && { navItem }), footer && { footer }), status && { status }), !isParentStep && id === (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) && !(activeStep === null || activeStep === void 0 ? void 0 : activeStep.isVisited) && { isVisited: true }));
      }, [
        body,
        footer,
        id,
        isDisabled,
        isHidden3,
        name,
        navItem,
        status,
        isParentStep,
        setStep,
        activeStep === null || activeStep === void 0 ? void 0 : activeStep.id,
        activeStep === null || activeStep === void 0 ? void 0 : activeStep.isVisited
      ]);
      return import_react29.default.createElement(import_react29.default.Fragment, null, children);
    };
    WizardStep.displayName = "WizardStep";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/utils.js
function isWizardStep(child) {
  return import_react30.default.isValidElement(child) && child.type === WizardStep;
}
var import_react30, buildSteps, normalizeStepProps, isStepEnabled;
var init_utils2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/utils.js"() {
    init_tslib_es6();
    import_react30 = __toESM(require_react());
    init_types2();
    init_WizardStep();
    buildSteps = (children) => import_react30.default.Children.toArray(children).reduce((acc, child, index) => {
      if (isWizardStep(child)) {
        const { props: childProps } = child;
        const { steps: childStepComponents, id } = childProps;
        const stepIndex = acc.length + 1;
        const subSteps = [];
        acc.push(Object.assign(Object.assign(Object.assign({ index: stepIndex, component: child }, index === 0 && !(childStepComponents === null || childStepComponents === void 0 ? void 0 : childStepComponents.length) && { isVisited: true }), childStepComponents && {
          subStepIds: childStepComponents === null || childStepComponents === void 0 ? void 0 : childStepComponents.map((childStepComponent, subStepIndex) => {
            subSteps.push(Object.assign(Object.assign({ index: stepIndex + subStepIndex + 1, component: childStepComponent, parentId: id }, index === 0 && subStepIndex === 0 && { isVisited: true }), normalizeStepProps(childStepComponent.props)));
            return childStepComponent.props.id;
          })
        }), normalizeStepProps(childProps)), ...subSteps);
      } else {
        throw new Error("Wizard only accepts children of type WizardStep.");
      }
      return acc;
    }, []);
    normalizeStepProps = (_a) => {
      var { children: _children, steps: _steps } = _a, controlStep = __rest(_a, ["children", "steps"]);
      return controlStep;
    };
    isStepEnabled = (steps, step) => {
      if (!isWizardParentStep(step) && !step.isHidden && !step.isDisabled) {
        if (isWizardSubStep(step)) {
          const parentStep = steps.find((otherStep) => otherStep.id === step.parentId);
          if (!parentStep.isHidden && !parentStep.isDisabled) {
            return true;
          }
        } else {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardBody.js
var import_react31, WizardBody;
var init_WizardBody = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardBody.js"() {
    import_react31 = __toESM(require_react());
    init_wizard2();
    init_esm();
    init_WizardContext();
    init_util();
    init_resizeObserver();
    WizardBody = ({ children, hasNoPadding = false, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, component = "div" }) => {
      const [hasScrollbar, setHasScrollbar] = import_react31.default.useState(false);
      const [previousWidth, setPreviousWidth] = import_react31.default.useState(void 0);
      const wrapperRef = import_react31.default.useRef(null);
      const WrapperComponent = component;
      const { activeStep } = import_react31.default.useContext(WizardContext);
      const defaultAriaLabel = ariaLabel || `${activeStep === null || activeStep === void 0 ? void 0 : activeStep.name} content`;
      import_react31.default.useEffect(() => {
        const resize = () => {
          if (wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current) {
            const { offsetWidth, offsetHeight, scrollHeight } = wrapperRef.current;
            if (previousWidth !== offsetWidth) {
              setPreviousWidth(offsetWidth);
              setHasScrollbar(offsetHeight < scrollHeight);
            }
          }
        };
        const handleResizeWithDelay = debounce(resize, 250);
        let observer = () => {
        };
        if (wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current) {
          observer = getResizeObserver(wrapperRef.current, handleResizeWithDelay);
          const { offsetHeight, scrollHeight } = wrapperRef.current;
          setHasScrollbar(offsetHeight < scrollHeight);
          setPreviousWidth(wrapperRef.current.offsetWidth);
        }
        return () => {
          observer();
        };
      }, [previousWidth]);
      return import_react31.default.createElement(
        WrapperComponent,
        Object.assign({ ref: wrapperRef }, component === "div" && hasScrollbar && { role: "region" }, hasScrollbar && { "aria-label": defaultAriaLabel, "aria-labelledby": ariaLabelledBy, tabIndex: 0 }, { className: css(wizard_default.wizardMain) }),
        import_react31.default.createElement("div", { className: css(wizard_default.wizardMainBody, hasNoPadding && wizard_default.modifiers.noPadding) }, children)
      );
    };
    WizardBody.displayName = "WizardBody";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js
var import_react32, WizardToggle;
var init_WizardToggle = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js"() {
    init_tslib_es6();
    import_react32 = __toESM(require_react());
    init_esm();
    init_wizard2();
    init_angle_right_icon();
    init_caret_down_icon();
    init_constants();
    init_types2();
    init_WizardStep();
    init_WizardBody();
    WizardToggle = ({ steps, activeStep, footer, nav, isNavExpanded, toggleNavExpanded, "aria-label": ariaLabel = "Wizard toggle" }) => {
      const isActiveSubStep = isWizardSubStep(activeStep);
      const parentStep = isActiveSubStep && steps.find((step) => step.id === activeStep.parentId);
      const nonSubSteps = steps.filter((step) => !isWizardSubStep(step));
      const wizardToggleIndex = nonSubSteps.indexOf(parentStep || activeStep) + 1;
      const handleKeyClicks = import_react32.default.useCallback((event) => {
        if (isNavExpanded && event.key === KeyTypes.Escape) {
          toggleNavExpanded === null || toggleNavExpanded === void 0 ? void 0 : toggleNavExpanded(event);
        }
      }, [isNavExpanded, toggleNavExpanded]);
      import_react32.default.useEffect(() => {
        const target = typeof document !== "undefined" ? document.body : null;
        target === null || target === void 0 ? void 0 : target.addEventListener("keydown", handleKeyClicks, false);
        return () => {
          target === null || target === void 0 ? void 0 : target.removeEventListener("keydown", handleKeyClicks, false);
        };
      }, [handleKeyClicks]);
      const bodyContent = steps.map((step) => {
        var _a;
        const props = ((_a = step.component) === null || _a === void 0 ? void 0 : _a.props) || {};
        const { children, body } = props, propsWithoutChildren = __rest(props, ["children", "body"]);
        return import_react32.default.createElement(
          import_react32.default.Fragment,
          { key: step.id },
          (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === step.id && (body || body === void 0 ? import_react32.default.createElement(WizardBody, Object.assign({}, body), children) : children),
          import_react32.default.createElement(
            "div",
            { key: step.id, style: { display: "none" } },
            import_react32.default.createElement(WizardStep, Object.assign({}, propsWithoutChildren))
          )
        );
      });
      return import_react32.default.createElement(
        import_react32.default.Fragment,
        null,
        import_react32.default.createElement(
          "button",
          { onClick: toggleNavExpanded, className: css(wizard_default.wizardToggle, isNavExpanded && "pf-m-expanded"), "aria-label": ariaLabel, "aria-expanded": isNavExpanded },
          import_react32.default.createElement(
            "span",
            { className: css(wizard_default.wizardToggleList) },
            import_react32.default.createElement(
              "span",
              { className: css(wizard_default.wizardToggleListItem) },
              import_react32.default.createElement("span", { className: css(wizard_default.wizardToggleNum) }, wizardToggleIndex),
              " ",
              (parentStep === null || parentStep === void 0 ? void 0 : parentStep.name) || (activeStep === null || activeStep === void 0 ? void 0 : activeStep.name),
              isActiveSubStep && import_react32.default.createElement(angle_right_icon_default, { className: css(wizard_default.wizardToggleSeparator), "aria-hidden": "true" })
            ),
            isActiveSubStep && import_react32.default.createElement("span", { className: css(wizard_default.wizardToggleListItem) }, activeStep === null || activeStep === void 0 ? void 0 : activeStep.name)
          ),
          import_react32.default.createElement(
            "span",
            { className: css(wizard_default.wizardToggleIcon) },
            import_react32.default.createElement(caret_down_icon_default, { "aria-hidden": "true" })
          )
        ),
        import_react32.default.createElement(
          "div",
          { className: css(wizard_default.wizardOuterWrap) },
          import_react32.default.createElement(
            "div",
            { className: css(wizard_default.wizardInnerWrap) },
            nav,
            bodyContent
          ),
          footer
        )
      );
    };
    WizardToggle.displayName = "WizardToggle";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNav.js
var React335, WizardNav;
var init_WizardNav = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNav.js"() {
    React335 = __toESM(require_react());
    init_wizard2();
    init_esm();
    WizardNav = ({ children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, isExpanded = false, isInnerList = false }) => {
      if (isInnerList) {
        return React335.createElement("ol", { className: css(wizard_default.wizardNavList), role: "list" }, children);
      }
      return React335.createElement(
        "nav",
        { className: css(wizard_default.wizardNav, isExpanded && wizard_default.modifiers.expanded), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy },
        React335.createElement("ol", { className: css(wizard_default.wizardNavList), role: "list" }, children)
      );
    };
    WizardNav.displayName = "WizardNav";
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_spacer_sm.js
var global_spacer_sm, global_spacer_sm_default;
var init_global_spacer_sm = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_spacer_sm.js"() {
    global_spacer_sm = {
      "name": "--pf-v5-global--spacer--sm",
      "value": "0.5rem",
      "var": "var(--pf-v5-global--spacer--sm)"
    };
    global_spacer_sm_default = global_spacer_sm;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/global_danger_color_100.js
var global_danger_color_100, global_danger_color_100_default;
var init_global_danger_color_100 = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/global_danger_color_100.js"() {
    global_danger_color_100 = {
      "name": "--pf-v5-global--danger-color--100",
      "value": "#c9190b",
      "var": "var(--pf-v5-global--danger-color--100)"
    };
    global_danger_color_100_default = global_danger_color_100;
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavItem.js
var React336, WizardNavItem;
var init_WizardNavItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavItem.js"() {
    React336 = __toESM(require_react());
    init_esm();
    init_wizard2();
    init_angle_right_icon();
    init_exclamation_circle_icon();
    init_helpers();
    init_types2();
    init_global_spacer_sm();
    init_global_danger_color_100();
    WizardNavItem = ({ children = null, content = "", isCurrent = false, isDisabled = false, isVisited = false, stepIndex, onClick, component: NavItemComponent = "button", href, isExpandable = false, id, status = "default", target, ouiaId, ouiaSafe = true }) => {
      const [isExpanded, setIsExpanded] = React336.useState(false);
      const ouiaProps = useOUIAProps(WizardNavItem.displayName, ouiaId, ouiaSafe);
      React336.useEffect(() => {
        setIsExpanded(isCurrent);
      }, [isCurrent]);
      if (NavItemComponent === "a" && !href && true) {
        console.error("WizardNavItem: When using an anchor, please provide an href");
      }
      const ariaLabel = React336.useMemo(() => {
        if (status === WizardNavItemStatus.Error || isVisited && !isCurrent) {
          let label = content.toString();
          if (status === WizardNavItemStatus.Error) {
            label += `, ${status}`;
          }
          if (isVisited && !isCurrent) {
            label += ", visited";
          }
          return label;
        }
      }, [content, isCurrent, isVisited, status]);
      return React336.createElement(
        "li",
        { className: css(wizard_default.wizardNavItem, isExpandable && wizard_default.modifiers.expandable, isExpandable && isExpanded && wizard_default.modifiers.expanded) },
        React336.createElement(NavItemComponent, Object.assign({}, NavItemComponent === "a" ? { tabIndex: isDisabled ? -1 : void 0, href, target } : { disabled: isDisabled }, id && { id: id.toString() }, { onClick: (e) => {
          e.stopPropagation();
          isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onClick === null || onClick === void 0 ? void 0 : onClick(e, stepIndex);
        }, className: css(wizard_default.wizardNavLink, isCurrent && wizard_default.modifiers.current, isDisabled && wizard_default.modifiers.disabled), "aria-disabled": isDisabled ? true : null, "aria-current": isCurrent && !children ? "step" : false }, isExpandable && { "aria-expanded": isExpanded }, ariaLabel && { "aria-label": ariaLabel }, ouiaProps), isExpandable ? React336.createElement(
          React336.Fragment,
          null,
          React336.createElement("span", { className: css(wizard_default.wizardNavLinkText) }, content),
          React336.createElement(
            "span",
            { className: css(wizard_default.wizardNavLinkToggle) },
            React336.createElement(
              "span",
              { className: css(wizard_default.wizardNavLinkToggleIcon) },
              React336.createElement(angle_right_icon_default, { "aria-label": `${isCurrent ? "Collapse" : "Expand"} step icon` })
            )
          )
        ) : React336.createElement(
          React336.Fragment,
          null,
          content,
          status === WizardNavItemStatus.Error && React336.createElement(
            "span",
            { style: { marginLeft: global_spacer_sm_default.var } },
            React336.createElement(exclamation_circle_icon_default, { color: global_danger_color_100_default.var })
          )
        )),
        children
      );
    };
    WizardNavItem.displayName = "WizardNavItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavInternal.js
var import_react33, WizardNavInternal;
var init_WizardNavInternal = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavInternal.js"() {
    import_react33 = __toESM(require_react());
    init_types2();
    init_WizardContext();
    init_WizardNav();
    init_WizardNavItem();
    WizardNavInternal = ({ nav, navAriaLabel, isVisitRequired, isProgressive, isNavExpanded }) => {
      const { activeStep, steps, goToStepByIndex } = useWizardContext();
      const wizardNavProps = Object.assign({ isExpanded: isNavExpanded, "aria-label": navAriaLabel || (nav === null || nav === void 0 ? void 0 : nav["aria-label"]) || "Wizard steps" }, (nav === null || nav === void 0 ? void 0 : nav["aria-labelledby"]) && {
        "aria-labelledby": nav["aria-labelledby"]
      });
      return import_react33.default.createElement(WizardNav, Object.assign({}, wizardNavProps), steps.map((step, stepIndex) => {
        var _a;
        const hasVisitedNextStep = steps.some((step2) => step2.index > stepIndex + 1 && step2.isVisited);
        const isStepDisabled = step.isDisabled || isVisitRequired && !step.isVisited && !hasVisitedNextStep;
        const customStepNavItem = isCustomWizardNavItem(step.navItem) && import_react33.default.createElement(import_react33.default.Fragment, { key: step.id }, typeof step.navItem === "function" ? step.navItem(step, activeStep, steps, goToStepByIndex) : step.navItem);
        if (isWizardParentStep(step) && !step.isHidden) {
          let firstSubStepIndex;
          let hasActiveChild = false;
          const subNavItems = (_a = step.subStepIds) === null || _a === void 0 ? void 0 : _a.map((subStepId, subStepIndex) => {
            const subStep = steps.find((step2) => step2.id === subStepId);
            const hasVisitedNextStep2 = steps.some((step2) => step2.index > subStep.index && step2.isVisited);
            const isSubStepDisabled = subStep.isDisabled || isVisitRequired && !subStep.isVisited && !hasVisitedNextStep2;
            const customSubStepNavItem = isCustomWizardNavItem(subStep.navItem) && import_react33.default.createElement(import_react33.default.Fragment, { key: subStep.id }, typeof subStep.navItem === "function" ? subStep.navItem(subStep, activeStep, steps, goToStepByIndex) : subStep.navItem);
            if (subStep.isHidden) {
              return;
            }
            if (subStepIndex === 0) {
              firstSubStepIndex = subStep.index;
            }
            if ((activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === subStep.id) {
              hasActiveChild = true;
            }
            if (!isProgressive || isProgressive && subStep.index <= activeStep.index) {
              return customSubStepNavItem || import_react33.default.createElement(WizardNavItem, Object.assign({ key: subStep.id, id: subStep.id, content: subStep.name, isCurrent: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === subStep.id, isDisabled: isSubStepDisabled || isStepDisabled, isVisited: subStep.isVisited, stepIndex: subStep.index, onClick: () => goToStepByIndex(subStep.index), status: subStep.status }, subStep.navItem));
            }
          });
          const hasEnabledChildren = import_react33.default.Children.toArray(subNavItems).some((child) => import_react33.default.isValidElement(child) && !child.props.isDisabled);
          if (!isProgressive || isProgressive && step.index <= activeStep.index) {
            return customStepNavItem || import_react33.default.createElement(
              WizardNavItem,
              Object.assign({ key: step.id, id: step.id, content: step.name, isExpandable: step.isExpandable, isCurrent: hasActiveChild, isDisabled: !hasEnabledChildren || isStepDisabled, isVisited: step.isVisited, stepIndex: firstSubStepIndex, onClick: () => goToStepByIndex(firstSubStepIndex), status: step.status }, step.navItem),
              import_react33.default.createElement(WizardNav, Object.assign({}, wizardNavProps, { isInnerList: true }), subNavItems)
            );
          }
        }
        if (isWizardBasicStep(step) && !step.isHidden && (!isProgressive || isProgressive && step.index <= activeStep.index)) {
          return customStepNavItem || import_react33.default.createElement(WizardNavItem, Object.assign({ key: step.id, id: step.id, content: step.name, isCurrent: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === step.id, isDisabled: isStepDisabled, isVisited: step.isVisited, stepIndex: step.index, onClick: () => goToStepByIndex(step.index), status: step.status }, step.navItem));
        }
      }));
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/Wizard.js
var import_react34, Wizard, WizardInternal;
var init_Wizard = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/Wizard.js"() {
    init_tslib_es6();
    import_react34 = __toESM(require_react());
    init_esm();
    init_wizard2();
    init_types2();
    init_utils2();
    init_WizardContext();
    init_WizardToggle();
    init_WizardNavInternal();
    Wizard = (_a) => {
      var { children, footer, height, width, className, header, nav, navAriaLabel, startIndex = 1, isVisitRequired = false, isProgressive = false, onStepChange, onSave, onClose } = _a, wrapperProps = __rest(_a, ["children", "footer", "height", "width", "className", "header", "nav", "navAriaLabel", "startIndex", "isVisitRequired", "isProgressive", "onStepChange", "onSave", "onClose"]);
      const [activeStepIndex, setActiveStepIndex] = import_react34.default.useState(startIndex);
      const initialSteps = buildSteps(children);
      const firstStepRef = import_react34.default.useRef(initialSteps[startIndex - 1]);
      import_react34.default.useEffect(() => {
        if (isWizardParentStep(firstStepRef.current)) {
          setActiveStepIndex(startIndex + 1);
        }
      }, [startIndex]);
      const goToNextStep = (event, steps = initialSteps) => {
        const newStep = steps.find((step) => step.index > activeStepIndex && isStepEnabled(steps, step));
        if (activeStepIndex >= steps.length || !(newStep === null || newStep === void 0 ? void 0 : newStep.index)) {
          return onSave ? onSave(event) : onClose === null || onClose === void 0 ? void 0 : onClose(event);
        }
        setActiveStepIndex(newStep === null || newStep === void 0 ? void 0 : newStep.index);
        onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, newStep, steps[activeStepIndex - 1], WizardStepChangeScope.Next);
      };
      const goToPrevStep = (event, steps = initialSteps) => {
        const newStep = [...steps].reverse().find((step) => step.index < activeStepIndex && isStepEnabled(steps, step));
        setActiveStepIndex(newStep === null || newStep === void 0 ? void 0 : newStep.index);
        onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, newStep, steps[activeStepIndex - 1], WizardStepChangeScope.Back);
      };
      const goToStepByIndex = (event, steps = initialSteps, index) => {
        const lastStepIndex = steps.length + 1;
        if (index < 1) {
          index = 1;
        } else if (index > lastStepIndex) {
          index = lastStepIndex;
        }
        const currStep = steps[index - 1];
        const prevStep = steps[activeStepIndex - 1];
        setActiveStepIndex(index);
        onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, currStep, prevStep, WizardStepChangeScope.Nav);
      };
      const goToStepById = (steps = initialSteps, id) => {
        const step = steps.find((step2) => step2.id === id);
        const stepIndex = step === null || step === void 0 ? void 0 : step.index;
        const lastStepIndex = steps.length + 1;
        if (stepIndex > 0 && stepIndex < lastStepIndex && !step.isDisabled && !step.isHidden) {
          setActiveStepIndex(stepIndex);
        }
      };
      const goToStepByName = (steps = initialSteps, name) => {
        const step = steps.find((step2) => step2.name === name);
        const stepIndex = step === null || step === void 0 ? void 0 : step.index;
        const lastStepIndex = steps.length + 1;
        if (stepIndex > 0 && stepIndex < lastStepIndex && !step.isDisabled && !step.isHidden) {
          setActiveStepIndex(stepIndex);
        }
      };
      return import_react34.default.createElement(
        WizardContextProvider,
        { steps: initialSteps, activeStepIndex, footer, onNext: goToNextStep, onBack: goToPrevStep, onClose, goToStepById, goToStepByName, goToStepByIndex },
        import_react34.default.createElement(
          "div",
          Object.assign({ className: css(wizard_default.wizard, className), style: Object.assign(Object.assign({}, height ? { height } : {}), width ? { width } : {}) }, wrapperProps),
          header,
          import_react34.default.createElement(WizardInternal, { nav, navAriaLabel, isVisitRequired, isProgressive })
        )
      );
    };
    WizardInternal = ({ nav, navAriaLabel, isVisitRequired, isProgressive }) => {
      const { activeStep, steps, footer, goToStepByIndex } = useWizardContext();
      const [isNavExpanded, setIsNavExpanded] = import_react34.default.useState(false);
      const wizardNav = import_react34.default.useMemo(() => {
        if (isCustomWizardNav(nav)) {
          return typeof nav === "function" ? nav(isNavExpanded, steps, activeStep, goToStepByIndex) : nav;
        }
        return import_react34.default.createElement(WizardNavInternal, { nav, navAriaLabel, isNavExpanded, isVisitRequired, isProgressive });
      }, [activeStep, isVisitRequired, isProgressive, goToStepByIndex, isNavExpanded, nav, navAriaLabel, steps]);
      return import_react34.default.createElement(WizardToggle, { nav: wizardNav, footer, steps, activeStep, isNavExpanded, toggleNavExpanded: () => setIsNavExpanded((prevIsExpanded) => !prevIsExpanded) });
    };
    Wizard.displayName = "Wizard";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardHeader.js
var React339, WizardHeader;
var init_WizardHeader = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardHeader.js"() {
    React339 = __toESM(require_react());
    init_wizard2();
    init_esm();
    init_Button2();
    init_times_icon();
    WizardHeader = ({ onClose = () => void 0, title, description, isCloseHidden, closeButtonAriaLabel, titleId, descriptionComponent: Component44 = "div", descriptionId }) => React339.createElement(
      "div",
      { className: css(wizard_default.wizardHeader) },
      !isCloseHidden && React339.createElement(
        "div",
        { className: css(wizard_default.wizardClose) },
        React339.createElement(
          Button,
          { variant: "plain", "aria-label": closeButtonAriaLabel, onClick: onClose },
          React339.createElement(times_icon_default, { "aria-hidden": "true" })
        )
      ),
      React339.createElement(
        "div",
        { className: css(wizard_default.wizardTitle) },
        React339.createElement("h2", { className: css(wizard_default.wizardTitleText), id: titleId }, title || React339.createElement(React339.Fragment, null, "\xA0"))
      ),
      description && React339.createElement(Component44, { className: css(wizard_default.wizardDescription), id: descriptionId }, description)
    );
    WizardHeader.displayName = "WizardHeader";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/index.js
var init_Wizard2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Wizard/index.js"() {
    init_Wizard();
    init_WizardBody();
    init_WizardFooter();
    init_WizardToggle();
    init_WizardStep();
    init_WizardNav();
    init_WizardNavItem();
    init_WizardHeader();
    init_types2();
  }
});

// node_modules/@patternfly/react-styles/css/components/Truncate/truncate.css
var init_truncate = __esm({
  "node_modules/@patternfly/react-styles/css/components/Truncate/truncate.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/components/Truncate/truncate.mjs
var truncate_default;
var init_truncate2 = __esm({
  "node_modules/@patternfly/react-styles/css/components/Truncate/truncate.mjs"() {
    init_truncate();
    truncate_default = {
      "dirRtl": "pf-v5-m-dir-rtl",
      "truncate": "pf-v5-c-truncate",
      "truncateEnd": "pf-v5-c-truncate__end",
      "truncateStart": "pf-v5-c-truncate__start"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Truncate/Truncate.js
var React340, TruncatePosition, truncateStyles, minWidthCharacters, sliceContent, Truncate;
var init_Truncate = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Truncate/Truncate.js"() {
    init_tslib_es6();
    React340 = __toESM(require_react());
    init_truncate2();
    init_esm();
    init_Tooltip2();
    (function(TruncatePosition2) {
      TruncatePosition2["start"] = "start";
      TruncatePosition2["end"] = "end";
      TruncatePosition2["middle"] = "middle";
    })(TruncatePosition || (TruncatePosition = {}));
    truncateStyles = {
      start: truncate_default.truncateEnd,
      end: truncate_default.truncateStart
    };
    minWidthCharacters = 12;
    sliceContent = (str, slice) => [str.slice(0, str.length - slice), str.slice(-slice)];
    Truncate = (_a) => {
      var { className, position = "end", tooltipPosition = "top", trailingNumChars = 7, content } = _a, props = __rest(_a, ["className", "position", "tooltipPosition", "trailingNumChars", "content"]);
      return React340.createElement(
        Tooltip,
        { position: tooltipPosition, content },
        React340.createElement(
          "span",
          Object.assign({ className: css(truncate_default.truncate, className) }, props),
          (position === TruncatePosition.end || position === TruncatePosition.start) && React340.createElement(
            "span",
            { className: truncateStyles[position] },
            content,
            position === TruncatePosition.start && React340.createElement(React340.Fragment, null, "\u200E")
          ),
          position === TruncatePosition.middle && content.slice(0, content.length - trailingNumChars).length > minWidthCharacters && React340.createElement(
            React340.Fragment,
            null,
            React340.createElement("span", { className: truncate_default.truncateStart }, sliceContent(content, trailingNumChars)[0]),
            React340.createElement("span", { className: truncate_default.truncateEnd }, sliceContent(content, trailingNumChars)[1])
          ),
          position === TruncatePosition.middle && content.slice(0, content.length - trailingNumChars).length <= minWidthCharacters && content
        )
      );
    };
    Truncate.displayName = "Truncate";
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/Truncate/index.js
var init_Truncate2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/Truncate/index.js"() {
    init_Truncate();
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/index.js
var init_components = __esm({
  "node_modules/@patternfly/react-core/dist/esm/components/index.js"() {
    init_AboutModal2();
    init_Accordion2();
    init_ActionList2();
    init_Alert2();
    init_Avatar2();
    init_BackToTop2();
    init_Backdrop2();
    init_BackgroundImage2();
    init_Badge2();
    init_Banner2();
    init_Brand2();
    init_Breadcrumb2();
    init_Button2();
    init_CalendarMonth2();
    init_Card2();
    init_Checkbox2();
    init_Chip2();
    init_ClipboardCopy2();
    init_CodeBlock2();
    init_DataList2();
    init_DatePicker2();
    init_DescriptionList2();
    init_Divider2();
    init_DragDrop2();
    init_Drawer2();
    init_Dropdown2();
    init_DualListSelector2();
    init_EmptyState2();
    init_ExpandableSection2();
    init_FileUpload2();
    init_Form2();
    init_FormSelect2();
    init_HelperText2();
    init_Hint2();
    init_Icon2();
    init_InputGroup2();
    init_JumpLinks2();
    init_Label2();
    init_List2();
    init_LoginPage2();
    init_Masthead2();
    init_Menu2();
    init_MenuToggle2();
    init_Modal2();
    init_MultipleFileUpload2();
    init_Nav2();
    init_NotificationBadge2();
    init_NotificationDrawer2();
    init_OverflowMenu2();
    init_Page2();
    init_Pagination2();
    init_Popover2();
    init_Progress2();
    init_ProgressStepper2();
    init_Radio2();
    init_SearchInput2();
    init_Select2();
    init_Sidebar2();
    init_SimpleList2();
    init_Skeleton2();
    init_SkipToContent2();
    init_Slider2();
    init_Spinner2();
    init_Switch2();
    init_Tabs2();
    init_Text2();
    init_TextArea2();
    init_TextInput2();
    init_Tile2();
    init_TimePicker2();
    init_Timestamp2();
    init_Title2();
    init_ToggleGroup2();
    init_Toolbar2();
    init_Tooltip2();
    init_NumberInput2();
    init_TreeView2();
    init_Wizard2();
    init_TextInputGroup2();
    init_Panel2();
    init_Truncate2();
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js
var React341, Bullseye;
var init_Bullseye = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js"() {
    init_tslib_es6();
    React341 = __toESM(require_react());
    init_esm();
    init_bullseye2();
    Bullseye = (_a) => {
      var { children = null, className = "", component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
      const Component44 = component;
      return React341.createElement(Component44, Object.assign({ className: css(bullseye_default.bullseye, className) }, props), children);
    };
    Bullseye.displayName = "Bullseye";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Bullseye/index.js
var init_Bullseye2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Bullseye/index.js"() {
    init_Bullseye();
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Flex/flex.css
var init_flex = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Flex/flex.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Flex/flex.mjs
var flex_default;
var init_flex2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Flex/flex.mjs"() {
    init_flex();
    flex_default = {
      "flex": "pf-v5-l-flex",
      "modifiers": {
        "flex": "pf-m-flex",
        "inlineFlex": "pf-m-inline-flex",
        "column": "pf-m-column",
        "columnReverse": "pf-m-column-reverse",
        "row": "pf-m-row",
        "rowReverse": "pf-m-row-reverse",
        "wrap": "pf-m-wrap",
        "wrapReverse": "pf-m-wrap-reverse",
        "nowrap": "pf-m-nowrap",
        "justifyContentFlexStart": "pf-m-justify-content-flex-start",
        "justifyContentFlexEnd": "pf-m-justify-content-flex-end",
        "justifyContentCenter": "pf-m-justify-content-center",
        "justifyContentSpaceBetween": "pf-m-justify-content-space-between",
        "justifyContentSpaceAround": "pf-m-justify-content-space-around",
        "justifyContentSpaceEvenly": "pf-m-justify-content-space-evenly",
        "alignItemsFlexStart": "pf-m-align-items-flex-start",
        "alignItemsFlexEnd": "pf-m-align-items-flex-end",
        "alignItemsCenter": "pf-m-align-items-center",
        "alignItemsStretch": "pf-m-align-items-stretch",
        "alignItemsBaseline": "pf-m-align-items-baseline",
        "alignContentFlexStart": "pf-m-align-content-flex-start",
        "alignContentFlexEnd": "pf-m-align-content-flex-end",
        "alignContentCenter": "pf-m-align-content-center",
        "alignContentStretch": "pf-m-align-content-stretch",
        "alignContentSpaceBetween": "pf-m-align-content-space-between",
        "alignContentSpaceAround": "pf-m-align-content-space-around",
        "alignRight": "pf-m-align-right",
        "alignLeft": "pf-m-align-left",
        "grow": "pf-m-grow",
        "shrink": "pf-m-shrink",
        "fullWidth": "pf-m-full-width",
        "flex_1": "pf-m-flex-1",
        "flex_2": "pf-m-flex-2",
        "flex_3": "pf-m-flex-3",
        "flex_4": "pf-m-flex-4",
        "flexDefault": "pf-m-flex-default",
        "flexNone": "pf-m-flex-none",
        "alignSelfFlexStart": "pf-m-align-self-flex-start",
        "alignSelfFlexEnd": "pf-m-align-self-flex-end",
        "alignSelfCenter": "pf-m-align-self-center",
        "alignSelfBaseline": "pf-m-align-self-baseline",
        "alignSelfStretch": "pf-m-align-self-stretch",
        "flexOnSm": "pf-m-flex-on-sm",
        "inlineFlexOnSm": "pf-m-inline-flex-on-sm",
        "columnOnSm": "pf-m-column-on-sm",
        "columnReverseOnSm": "pf-m-column-reverse-on-sm",
        "rowOnSm": "pf-m-row-on-sm",
        "rowReverseOnSm": "pf-m-row-reverse-on-sm",
        "wrapOnSm": "pf-m-wrap-on-sm",
        "wrapReverseOnSm": "pf-m-wrap-reverse-on-sm",
        "nowrapOnSm": "pf-m-nowrap-on-sm",
        "justifyContentFlexStartOnSm": "pf-m-justify-content-flex-start-on-sm",
        "justifyContentFlexEndOnSm": "pf-m-justify-content-flex-end-on-sm",
        "justifyContentCenterOnSm": "pf-m-justify-content-center-on-sm",
        "justifyContentSpaceBetweenOnSm": "pf-m-justify-content-space-between-on-sm",
        "justifyContentSpaceAroundOnSm": "pf-m-justify-content-space-around-on-sm",
        "justifyContentSpaceEvenlyOnSm": "pf-m-justify-content-space-evenly-on-sm",
        "alignItemsFlexStartOnSm": "pf-m-align-items-flex-start-on-sm",
        "alignItemsFlexEndOnSm": "pf-m-align-items-flex-end-on-sm",
        "alignItemsCenterOnSm": "pf-m-align-items-center-on-sm",
        "alignItemsStretchOnSm": "pf-m-align-items-stretch-on-sm",
        "alignItemsBaselineOnSm": "pf-m-align-items-baseline-on-sm",
        "alignContentFlexStartOnSm": "pf-m-align-content-flex-start-on-sm",
        "alignContentFlexEndOnSm": "pf-m-align-content-flex-end-on-sm",
        "alignContentCenterOnSm": "pf-m-align-content-center-on-sm",
        "alignContentStretchOnSm": "pf-m-align-content-stretch-on-sm",
        "alignContentSpaceBetweenOnSm": "pf-m-align-content-space-between-on-sm",
        "alignContentSpaceAroundOnSm": "pf-m-align-content-space-around-on-sm",
        "alignRightOnSm": "pf-m-align-right-on-sm",
        "alignLeftOnSm": "pf-m-align-left-on-sm",
        "growOnSm": "pf-m-grow-on-sm",
        "shrinkOnSm": "pf-m-shrink-on-sm",
        "fullWidthOnSm": "pf-m-full-width-on-sm",
        "flex_1OnSm": "pf-m-flex-1-on-sm",
        "flex_2OnSm": "pf-m-flex-2-on-sm",
        "flex_3OnSm": "pf-m-flex-3-on-sm",
        "flex_4OnSm": "pf-m-flex-4-on-sm",
        "flexDefaultOnSm": "pf-m-flex-default-on-sm",
        "flexNoneOnSm": "pf-m-flex-none-on-sm",
        "alignSelfFlexStartOnSm": "pf-m-align-self-flex-start-on-sm",
        "alignSelfFlexEndOnSm": "pf-m-align-self-flex-end-on-sm",
        "alignSelfCenterOnSm": "pf-m-align-self-center-on-sm",
        "alignSelfBaselineOnSm": "pf-m-align-self-baseline-on-sm",
        "alignSelfStretchOnSm": "pf-m-align-self-stretch-on-sm",
        "flexOnMd": "pf-m-flex-on-md",
        "inlineFlexOnMd": "pf-m-inline-flex-on-md",
        "columnOnMd": "pf-m-column-on-md",
        "columnReverseOnMd": "pf-m-column-reverse-on-md",
        "rowOnMd": "pf-m-row-on-md",
        "rowReverseOnMd": "pf-m-row-reverse-on-md",
        "wrapOnMd": "pf-m-wrap-on-md",
        "wrapReverseOnMd": "pf-m-wrap-reverse-on-md",
        "nowrapOnMd": "pf-m-nowrap-on-md",
        "justifyContentFlexStartOnMd": "pf-m-justify-content-flex-start-on-md",
        "justifyContentFlexEndOnMd": "pf-m-justify-content-flex-end-on-md",
        "justifyContentCenterOnMd": "pf-m-justify-content-center-on-md",
        "justifyContentSpaceBetweenOnMd": "pf-m-justify-content-space-between-on-md",
        "justifyContentSpaceAroundOnMd": "pf-m-justify-content-space-around-on-md",
        "justifyContentSpaceEvenlyOnMd": "pf-m-justify-content-space-evenly-on-md",
        "alignItemsFlexStartOnMd": "pf-m-align-items-flex-start-on-md",
        "alignItemsFlexEndOnMd": "pf-m-align-items-flex-end-on-md",
        "alignItemsCenterOnMd": "pf-m-align-items-center-on-md",
        "alignItemsStretchOnMd": "pf-m-align-items-stretch-on-md",
        "alignItemsBaselineOnMd": "pf-m-align-items-baseline-on-md",
        "alignContentFlexStartOnMd": "pf-m-align-content-flex-start-on-md",
        "alignContentFlexEndOnMd": "pf-m-align-content-flex-end-on-md",
        "alignContentCenterOnMd": "pf-m-align-content-center-on-md",
        "alignContentStretchOnMd": "pf-m-align-content-stretch-on-md",
        "alignContentSpaceBetweenOnMd": "pf-m-align-content-space-between-on-md",
        "alignContentSpaceAroundOnMd": "pf-m-align-content-space-around-on-md",
        "alignRightOnMd": "pf-m-align-right-on-md",
        "alignLeftOnMd": "pf-m-align-left-on-md",
        "growOnMd": "pf-m-grow-on-md",
        "shrinkOnMd": "pf-m-shrink-on-md",
        "fullWidthOnMd": "pf-m-full-width-on-md",
        "flex_1OnMd": "pf-m-flex-1-on-md",
        "flex_2OnMd": "pf-m-flex-2-on-md",
        "flex_3OnMd": "pf-m-flex-3-on-md",
        "flex_4OnMd": "pf-m-flex-4-on-md",
        "flexDefaultOnMd": "pf-m-flex-default-on-md",
        "flexNoneOnMd": "pf-m-flex-none-on-md",
        "alignSelfFlexStartOnMd": "pf-m-align-self-flex-start-on-md",
        "alignSelfFlexEndOnMd": "pf-m-align-self-flex-end-on-md",
        "alignSelfCenterOnMd": "pf-m-align-self-center-on-md",
        "alignSelfBaselineOnMd": "pf-m-align-self-baseline-on-md",
        "alignSelfStretchOnMd": "pf-m-align-self-stretch-on-md",
        "flexOnLg": "pf-m-flex-on-lg",
        "inlineFlexOnLg": "pf-m-inline-flex-on-lg",
        "columnOnLg": "pf-m-column-on-lg",
        "columnReverseOnLg": "pf-m-column-reverse-on-lg",
        "rowOnLg": "pf-m-row-on-lg",
        "rowReverseOnLg": "pf-m-row-reverse-on-lg",
        "wrapOnLg": "pf-m-wrap-on-lg",
        "wrapReverseOnLg": "pf-m-wrap-reverse-on-lg",
        "nowrapOnLg": "pf-m-nowrap-on-lg",
        "justifyContentFlexStartOnLg": "pf-m-justify-content-flex-start-on-lg",
        "justifyContentFlexEndOnLg": "pf-m-justify-content-flex-end-on-lg",
        "justifyContentCenterOnLg": "pf-m-justify-content-center-on-lg",
        "justifyContentSpaceBetweenOnLg": "pf-m-justify-content-space-between-on-lg",
        "justifyContentSpaceAroundOnLg": "pf-m-justify-content-space-around-on-lg",
        "justifyContentSpaceEvenlyOnLg": "pf-m-justify-content-space-evenly-on-lg",
        "alignItemsFlexStartOnLg": "pf-m-align-items-flex-start-on-lg",
        "alignItemsFlexEndOnLg": "pf-m-align-items-flex-end-on-lg",
        "alignItemsCenterOnLg": "pf-m-align-items-center-on-lg",
        "alignItemsStretchOnLg": "pf-m-align-items-stretch-on-lg",
        "alignItemsBaselineOnLg": "pf-m-align-items-baseline-on-lg",
        "alignContentFlexStartOnLg": "pf-m-align-content-flex-start-on-lg",
        "alignContentFlexEndOnLg": "pf-m-align-content-flex-end-on-lg",
        "alignContentCenterOnLg": "pf-m-align-content-center-on-lg",
        "alignContentStretchOnLg": "pf-m-align-content-stretch-on-lg",
        "alignContentSpaceBetweenOnLg": "pf-m-align-content-space-between-on-lg",
        "alignContentSpaceAroundOnLg": "pf-m-align-content-space-around-on-lg",
        "alignRightOnLg": "pf-m-align-right-on-lg",
        "alignLeftOnLg": "pf-m-align-left-on-lg",
        "growOnLg": "pf-m-grow-on-lg",
        "shrinkOnLg": "pf-m-shrink-on-lg",
        "fullWidthOnLg": "pf-m-full-width-on-lg",
        "flex_1OnLg": "pf-m-flex-1-on-lg",
        "flex_2OnLg": "pf-m-flex-2-on-lg",
        "flex_3OnLg": "pf-m-flex-3-on-lg",
        "flex_4OnLg": "pf-m-flex-4-on-lg",
        "flexDefaultOnLg": "pf-m-flex-default-on-lg",
        "flexNoneOnLg": "pf-m-flex-none-on-lg",
        "alignSelfFlexStartOnLg": "pf-m-align-self-flex-start-on-lg",
        "alignSelfFlexEndOnLg": "pf-m-align-self-flex-end-on-lg",
        "alignSelfCenterOnLg": "pf-m-align-self-center-on-lg",
        "alignSelfBaselineOnLg": "pf-m-align-self-baseline-on-lg",
        "alignSelfStretchOnLg": "pf-m-align-self-stretch-on-lg",
        "flexOnXl": "pf-m-flex-on-xl",
        "inlineFlexOnXl": "pf-m-inline-flex-on-xl",
        "columnOnXl": "pf-m-column-on-xl",
        "columnReverseOnXl": "pf-m-column-reverse-on-xl",
        "rowOnXl": "pf-m-row-on-xl",
        "rowReverseOnXl": "pf-m-row-reverse-on-xl",
        "wrapOnXl": "pf-m-wrap-on-xl",
        "wrapReverseOnXl": "pf-m-wrap-reverse-on-xl",
        "nowrapOnXl": "pf-m-nowrap-on-xl",
        "justifyContentFlexStartOnXl": "pf-m-justify-content-flex-start-on-xl",
        "justifyContentFlexEndOnXl": "pf-m-justify-content-flex-end-on-xl",
        "justifyContentCenterOnXl": "pf-m-justify-content-center-on-xl",
        "justifyContentSpaceBetweenOnXl": "pf-m-justify-content-space-between-on-xl",
        "justifyContentSpaceAroundOnXl": "pf-m-justify-content-space-around-on-xl",
        "justifyContentSpaceEvenlyOnXl": "pf-m-justify-content-space-evenly-on-xl",
        "alignItemsFlexStartOnXl": "pf-m-align-items-flex-start-on-xl",
        "alignItemsFlexEndOnXl": "pf-m-align-items-flex-end-on-xl",
        "alignItemsCenterOnXl": "pf-m-align-items-center-on-xl",
        "alignItemsStretchOnXl": "pf-m-align-items-stretch-on-xl",
        "alignItemsBaselineOnXl": "pf-m-align-items-baseline-on-xl",
        "alignContentFlexStartOnXl": "pf-m-align-content-flex-start-on-xl",
        "alignContentFlexEndOnXl": "pf-m-align-content-flex-end-on-xl",
        "alignContentCenterOnXl": "pf-m-align-content-center-on-xl",
        "alignContentStretchOnXl": "pf-m-align-content-stretch-on-xl",
        "alignContentSpaceBetweenOnXl": "pf-m-align-content-space-between-on-xl",
        "alignContentSpaceAroundOnXl": "pf-m-align-content-space-around-on-xl",
        "alignRightOnXl": "pf-m-align-right-on-xl",
        "alignLeftOnXl": "pf-m-align-left-on-xl",
        "growOnXl": "pf-m-grow-on-xl",
        "shrinkOnXl": "pf-m-shrink-on-xl",
        "fullWidthOnXl": "pf-m-full-width-on-xl",
        "flex_1OnXl": "pf-m-flex-1-on-xl",
        "flex_2OnXl": "pf-m-flex-2-on-xl",
        "flex_3OnXl": "pf-m-flex-3-on-xl",
        "flex_4OnXl": "pf-m-flex-4-on-xl",
        "flexDefaultOnXl": "pf-m-flex-default-on-xl",
        "flexNoneOnXl": "pf-m-flex-none-on-xl",
        "alignSelfFlexStartOnXl": "pf-m-align-self-flex-start-on-xl",
        "alignSelfFlexEndOnXl": "pf-m-align-self-flex-end-on-xl",
        "alignSelfCenterOnXl": "pf-m-align-self-center-on-xl",
        "alignSelfBaselineOnXl": "pf-m-align-self-baseline-on-xl",
        "alignSelfStretchOnXl": "pf-m-align-self-stretch-on-xl",
        "flexOn_2xl": "pf-m-flex-on-2xl",
        "inlineFlexOn_2xl": "pf-m-inline-flex-on-2xl",
        "columnOn_2xl": "pf-m-column-on-2xl",
        "columnReverseOn_2xl": "pf-m-column-reverse-on-2xl",
        "rowOn_2xl": "pf-m-row-on-2xl",
        "rowReverseOn_2xl": "pf-m-row-reverse-on-2xl",
        "wrapOn_2xl": "pf-m-wrap-on-2xl",
        "wrapReverseOn_2xl": "pf-m-wrap-reverse-on-2xl",
        "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
        "justifyContentFlexStartOn_2xl": "pf-m-justify-content-flex-start-on-2xl",
        "justifyContentFlexEndOn_2xl": "pf-m-justify-content-flex-end-on-2xl",
        "justifyContentCenterOn_2xl": "pf-m-justify-content-center-on-2xl",
        "justifyContentSpaceBetweenOn_2xl": "pf-m-justify-content-space-between-on-2xl",
        "justifyContentSpaceAroundOn_2xl": "pf-m-justify-content-space-around-on-2xl",
        "justifyContentSpaceEvenlyOn_2xl": "pf-m-justify-content-space-evenly-on-2xl",
        "alignItemsFlexStartOn_2xl": "pf-m-align-items-flex-start-on-2xl",
        "alignItemsFlexEndOn_2xl": "pf-m-align-items-flex-end-on-2xl",
        "alignItemsCenterOn_2xl": "pf-m-align-items-center-on-2xl",
        "alignItemsStretchOn_2xl": "pf-m-align-items-stretch-on-2xl",
        "alignItemsBaselineOn_2xl": "pf-m-align-items-baseline-on-2xl",
        "alignContentFlexStartOn_2xl": "pf-m-align-content-flex-start-on-2xl",
        "alignContentFlexEndOn_2xl": "pf-m-align-content-flex-end-on-2xl",
        "alignContentCenterOn_2xl": "pf-m-align-content-center-on-2xl",
        "alignContentStretchOn_2xl": "pf-m-align-content-stretch-on-2xl",
        "alignContentSpaceBetweenOn_2xl": "pf-m-align-content-space-between-on-2xl",
        "alignContentSpaceAroundOn_2xl": "pf-m-align-content-space-around-on-2xl",
        "alignRightOn_2xl": "pf-m-align-right-on-2xl",
        "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
        "growOn_2xl": "pf-m-grow-on-2xl",
        "shrinkOn_2xl": "pf-m-shrink-on-2xl",
        "fullWidthOn_2xl": "pf-m-full-width-on-2xl",
        "flex_1On_2xl": "pf-m-flex-1-on-2xl",
        "flex_2On_2xl": "pf-m-flex-2-on-2xl",
        "flex_3On_2xl": "pf-m-flex-3-on-2xl",
        "flex_4On_2xl": "pf-m-flex-4-on-2xl",
        "flexDefaultOn_2xl": "pf-m-flex-default-on-2xl",
        "flexNoneOn_2xl": "pf-m-flex-none-on-2xl",
        "alignSelfFlexStartOn_2xl": "pf-m-align-self-flex-start-on-2xl",
        "alignSelfFlexEndOn_2xl": "pf-m-align-self-flex-end-on-2xl",
        "alignSelfCenterOn_2xl": "pf-m-align-self-center-on-2xl",
        "alignSelfBaselineOn_2xl": "pf-m-align-self-baseline-on-2xl",
        "alignSelfStretchOn_2xl": "pf-m-align-self-stretch-on-2xl",
        "spaceItemsNone": "pf-m-space-items-none",
        "spaceItemsXs": "pf-m-space-items-xs",
        "spaceItemsSm": "pf-m-space-items-sm",
        "spaceItemsMd": "pf-m-space-items-md",
        "spaceItemsLg": "pf-m-space-items-lg",
        "spaceItemsXl": "pf-m-space-items-xl",
        "spaceItems_2xl": "pf-m-space-items-2xl",
        "spaceItems_3xl": "pf-m-space-items-3xl",
        "spaceItems_4xl": "pf-m-space-items-4xl",
        "spaceItemsNoneOnSm": "pf-m-space-items-none-on-sm",
        "spaceItemsXsOnSm": "pf-m-space-items-xs-on-sm",
        "spaceItemsSmOnSm": "pf-m-space-items-sm-on-sm",
        "spaceItemsMdOnSm": "pf-m-space-items-md-on-sm",
        "spaceItemsLgOnSm": "pf-m-space-items-lg-on-sm",
        "spaceItemsXlOnSm": "pf-m-space-items-xl-on-sm",
        "spaceItems_2xlOnSm": "pf-m-space-items-2xl-on-sm",
        "spaceItems_3xlOnSm": "pf-m-space-items-3xl-on-sm",
        "spaceItems_4xlOnSm": "pf-m-space-items-4xl-on-sm",
        "spaceItemsNoneOnMd": "pf-m-space-items-none-on-md",
        "spaceItemsXsOnMd": "pf-m-space-items-xs-on-md",
        "spaceItemsSmOnMd": "pf-m-space-items-sm-on-md",
        "spaceItemsMdOnMd": "pf-m-space-items-md-on-md",
        "spaceItemsLgOnMd": "pf-m-space-items-lg-on-md",
        "spaceItemsXlOnMd": "pf-m-space-items-xl-on-md",
        "spaceItems_2xlOnMd": "pf-m-space-items-2xl-on-md",
        "spaceItems_3xlOnMd": "pf-m-space-items-3xl-on-md",
        "spaceItems_4xlOnMd": "pf-m-space-items-4xl-on-md",
        "spaceItemsNoneOnLg": "pf-m-space-items-none-on-lg",
        "spaceItemsXsOnLg": "pf-m-space-items-xs-on-lg",
        "spaceItemsSmOnLg": "pf-m-space-items-sm-on-lg",
        "spaceItemsMdOnLg": "pf-m-space-items-md-on-lg",
        "spaceItemsLgOnLg": "pf-m-space-items-lg-on-lg",
        "spaceItemsXlOnLg": "pf-m-space-items-xl-on-lg",
        "spaceItems_2xlOnLg": "pf-m-space-items-2xl-on-lg",
        "spaceItems_3xlOnLg": "pf-m-space-items-3xl-on-lg",
        "spaceItems_4xlOnLg": "pf-m-space-items-4xl-on-lg",
        "spaceItemsNoneOnXl": "pf-m-space-items-none-on-xl",
        "spaceItemsXsOnXl": "pf-m-space-items-xs-on-xl",
        "spaceItemsSmOnXl": "pf-m-space-items-sm-on-xl",
        "spaceItemsMdOnXl": "pf-m-space-items-md-on-xl",
        "spaceItemsLgOnXl": "pf-m-space-items-lg-on-xl",
        "spaceItemsXlOnXl": "pf-m-space-items-xl-on-xl",
        "spaceItems_2xlOnXl": "pf-m-space-items-2xl-on-xl",
        "spaceItems_3xlOnXl": "pf-m-space-items-3xl-on-xl",
        "spaceItems_4xlOnXl": "pf-m-space-items-4xl-on-xl",
        "spaceItemsNoneOn_2xl": "pf-m-space-items-none-on-2xl",
        "spaceItemsXsOn_2xl": "pf-m-space-items-xs-on-2xl",
        "spaceItemsSmOn_2xl": "pf-m-space-items-sm-on-2xl",
        "spaceItemsMdOn_2xl": "pf-m-space-items-md-on-2xl",
        "spaceItemsLgOn_2xl": "pf-m-space-items-lg-on-2xl",
        "spaceItemsXlOn_2xl": "pf-m-space-items-xl-on-2xl",
        "spaceItems_2xlOn_2xl": "pf-m-space-items-2xl-on-2xl",
        "spaceItems_3xlOn_2xl": "pf-m-space-items-3xl-on-2xl",
        "spaceItems_4xlOn_2xl": "pf-m-space-items-4xl-on-2xl",
        "spacerNone": "pf-m-spacer-none",
        "spacerXs": "pf-m-spacer-xs",
        "spacerSm": "pf-m-spacer-sm",
        "spacerMd": "pf-m-spacer-md",
        "spacerLg": "pf-m-spacer-lg",
        "spacerXl": "pf-m-spacer-xl",
        "spacer_2xl": "pf-m-spacer-2xl",
        "spacer_3xl": "pf-m-spacer-3xl",
        "spacer_4xl": "pf-m-spacer-4xl",
        "spacerNoneOnSm": "pf-m-spacer-none-on-sm",
        "spacerXsOnSm": "pf-m-spacer-xs-on-sm",
        "spacerSmOnSm": "pf-m-spacer-sm-on-sm",
        "spacerMdOnSm": "pf-m-spacer-md-on-sm",
        "spacerLgOnSm": "pf-m-spacer-lg-on-sm",
        "spacerXlOnSm": "pf-m-spacer-xl-on-sm",
        "spacer_2xlOnSm": "pf-m-spacer-2xl-on-sm",
        "spacer_3xlOnSm": "pf-m-spacer-3xl-on-sm",
        "spacer_4xlOnSm": "pf-m-spacer-4xl-on-sm",
        "spacerNoneOnMd": "pf-m-spacer-none-on-md",
        "spacerXsOnMd": "pf-m-spacer-xs-on-md",
        "spacerSmOnMd": "pf-m-spacer-sm-on-md",
        "spacerMdOnMd": "pf-m-spacer-md-on-md",
        "spacerLgOnMd": "pf-m-spacer-lg-on-md",
        "spacerXlOnMd": "pf-m-spacer-xl-on-md",
        "spacer_2xlOnMd": "pf-m-spacer-2xl-on-md",
        "spacer_3xlOnMd": "pf-m-spacer-3xl-on-md",
        "spacer_4xlOnMd": "pf-m-spacer-4xl-on-md",
        "spacerNoneOnLg": "pf-m-spacer-none-on-lg",
        "spacerXsOnLg": "pf-m-spacer-xs-on-lg",
        "spacerSmOnLg": "pf-m-spacer-sm-on-lg",
        "spacerMdOnLg": "pf-m-spacer-md-on-lg",
        "spacerLgOnLg": "pf-m-spacer-lg-on-lg",
        "spacerXlOnLg": "pf-m-spacer-xl-on-lg",
        "spacer_2xlOnLg": "pf-m-spacer-2xl-on-lg",
        "spacer_3xlOnLg": "pf-m-spacer-3xl-on-lg",
        "spacer_4xlOnLg": "pf-m-spacer-4xl-on-lg",
        "spacerNoneOnXl": "pf-m-spacer-none-on-xl",
        "spacerXsOnXl": "pf-m-spacer-xs-on-xl",
        "spacerSmOnXl": "pf-m-spacer-sm-on-xl",
        "spacerMdOnXl": "pf-m-spacer-md-on-xl",
        "spacerLgOnXl": "pf-m-spacer-lg-on-xl",
        "spacerXlOnXl": "pf-m-spacer-xl-on-xl",
        "spacer_2xlOnXl": "pf-m-spacer-2xl-on-xl",
        "spacer_3xlOnXl": "pf-m-spacer-3xl-on-xl",
        "spacer_4xlOnXl": "pf-m-spacer-4xl-on-xl",
        "spacerNoneOn_2xl": "pf-m-spacer-none-on-2xl",
        "spacerXsOn_2xl": "pf-m-spacer-xs-on-2xl",
        "spacerSmOn_2xl": "pf-m-spacer-sm-on-2xl",
        "spacerMdOn_2xl": "pf-m-spacer-md-on-2xl",
        "spacerLgOn_2xl": "pf-m-spacer-lg-on-2xl",
        "spacerXlOn_2xl": "pf-m-spacer-xl-on-2xl",
        "spacer_2xlOn_2xl": "pf-m-spacer-2xl-on-2xl",
        "spacer_3xlOn_2xl": "pf-m-spacer-3xl-on-2xl",
        "spacer_4xlOn_2xl": "pf-m-spacer-4xl-on-2xl",
        "gap": "pf-m-gap",
        "gapNone": "pf-m-gap-none",
        "gapXs": "pf-m-gap-xs",
        "gapSm": "pf-m-gap-sm",
        "gapMd": "pf-m-gap-md",
        "gapLg": "pf-m-gap-lg",
        "gapXl": "pf-m-gap-xl",
        "gap_2xl": "pf-m-gap-2xl",
        "gap_3xl": "pf-m-gap-3xl",
        "gap_4xl": "pf-m-gap-4xl",
        "gapOnSm": "pf-m-gap-on-sm",
        "gapNoneOnSm": "pf-m-gap-none-on-sm",
        "gapXsOnSm": "pf-m-gap-xs-on-sm",
        "gapSmOnSm": "pf-m-gap-sm-on-sm",
        "gapMdOnSm": "pf-m-gap-md-on-sm",
        "gapLgOnSm": "pf-m-gap-lg-on-sm",
        "gapXlOnSm": "pf-m-gap-xl-on-sm",
        "gap_2xlOnSm": "pf-m-gap-2xl-on-sm",
        "gap_3xlOnSm": "pf-m-gap-3xl-on-sm",
        "gap_4xlOnSm": "pf-m-gap-4xl-on-sm",
        "gapOnMd": "pf-m-gap-on-md",
        "gapNoneOnMd": "pf-m-gap-none-on-md",
        "gapXsOnMd": "pf-m-gap-xs-on-md",
        "gapSmOnMd": "pf-m-gap-sm-on-md",
        "gapMdOnMd": "pf-m-gap-md-on-md",
        "gapLgOnMd": "pf-m-gap-lg-on-md",
        "gapXlOnMd": "pf-m-gap-xl-on-md",
        "gap_2xlOnMd": "pf-m-gap-2xl-on-md",
        "gap_3xlOnMd": "pf-m-gap-3xl-on-md",
        "gap_4xlOnMd": "pf-m-gap-4xl-on-md",
        "gapOnLg": "pf-m-gap-on-lg",
        "gapNoneOnLg": "pf-m-gap-none-on-lg",
        "gapXsOnLg": "pf-m-gap-xs-on-lg",
        "gapSmOnLg": "pf-m-gap-sm-on-lg",
        "gapMdOnLg": "pf-m-gap-md-on-lg",
        "gapLgOnLg": "pf-m-gap-lg-on-lg",
        "gapXlOnLg": "pf-m-gap-xl-on-lg",
        "gap_2xlOnLg": "pf-m-gap-2xl-on-lg",
        "gap_3xlOnLg": "pf-m-gap-3xl-on-lg",
        "gap_4xlOnLg": "pf-m-gap-4xl-on-lg",
        "gapOnXl": "pf-m-gap-on-xl",
        "gapNoneOnXl": "pf-m-gap-none-on-xl",
        "gapXsOnXl": "pf-m-gap-xs-on-xl",
        "gapSmOnXl": "pf-m-gap-sm-on-xl",
        "gapMdOnXl": "pf-m-gap-md-on-xl",
        "gapLgOnXl": "pf-m-gap-lg-on-xl",
        "gapXlOnXl": "pf-m-gap-xl-on-xl",
        "gap_2xlOnXl": "pf-m-gap-2xl-on-xl",
        "gap_3xlOnXl": "pf-m-gap-3xl-on-xl",
        "gap_4xlOnXl": "pf-m-gap-4xl-on-xl",
        "gapOn_2xl": "pf-m-gap-on-2xl",
        "gapNoneOn_2xl": "pf-m-gap-none-on-2xl",
        "gapXsOn_2xl": "pf-m-gap-xs-on-2xl",
        "gapSmOn_2xl": "pf-m-gap-sm-on-2xl",
        "gapMdOn_2xl": "pf-m-gap-md-on-2xl",
        "gapLgOn_2xl": "pf-m-gap-lg-on-2xl",
        "gapXlOn_2xl": "pf-m-gap-xl-on-2xl",
        "gap_2xlOn_2xl": "pf-m-gap-2xl-on-2xl",
        "gap_3xlOn_2xl": "pf-m-gap-3xl-on-2xl",
        "gap_4xlOn_2xl": "pf-m-gap-4xl-on-2xl",
        "rowGap": "pf-m-row-gap",
        "rowGapNone": "pf-m-row-gap-none",
        "rowGapXs": "pf-m-row-gap-xs",
        "rowGapSm": "pf-m-row-gap-sm",
        "rowGapMd": "pf-m-row-gap-md",
        "rowGapLg": "pf-m-row-gap-lg",
        "rowGapXl": "pf-m-row-gap-xl",
        "rowGap_2xl": "pf-m-row-gap-2xl",
        "rowGap_3xl": "pf-m-row-gap-3xl",
        "rowGap_4xl": "pf-m-row-gap-4xl",
        "rowGapOnSm": "pf-m-row-gap-on-sm",
        "rowGapNoneOnSm": "pf-m-row-gap-none-on-sm",
        "rowGapXsOnSm": "pf-m-row-gap-xs-on-sm",
        "rowGapSmOnSm": "pf-m-row-gap-sm-on-sm",
        "rowGapMdOnSm": "pf-m-row-gap-md-on-sm",
        "rowGapLgOnSm": "pf-m-row-gap-lg-on-sm",
        "rowGapXlOnSm": "pf-m-row-gap-xl-on-sm",
        "rowGap_2xlOnSm": "pf-m-row-gap-2xl-on-sm",
        "rowGap_3xlOnSm": "pf-m-row-gap-3xl-on-sm",
        "rowGap_4xlOnSm": "pf-m-row-gap-4xl-on-sm",
        "rowGapOnMd": "pf-m-row-gap-on-md",
        "rowGapNoneOnMd": "pf-m-row-gap-none-on-md",
        "rowGapXsOnMd": "pf-m-row-gap-xs-on-md",
        "rowGapSmOnMd": "pf-m-row-gap-sm-on-md",
        "rowGapMdOnMd": "pf-m-row-gap-md-on-md",
        "rowGapLgOnMd": "pf-m-row-gap-lg-on-md",
        "rowGapXlOnMd": "pf-m-row-gap-xl-on-md",
        "rowGap_2xlOnMd": "pf-m-row-gap-2xl-on-md",
        "rowGap_3xlOnMd": "pf-m-row-gap-3xl-on-md",
        "rowGap_4xlOnMd": "pf-m-row-gap-4xl-on-md",
        "rowGapOnLg": "pf-m-row-gap-on-lg",
        "rowGapNoneOnLg": "pf-m-row-gap-none-on-lg",
        "rowGapXsOnLg": "pf-m-row-gap-xs-on-lg",
        "rowGapSmOnLg": "pf-m-row-gap-sm-on-lg",
        "rowGapMdOnLg": "pf-m-row-gap-md-on-lg",
        "rowGapLgOnLg": "pf-m-row-gap-lg-on-lg",
        "rowGapXlOnLg": "pf-m-row-gap-xl-on-lg",
        "rowGap_2xlOnLg": "pf-m-row-gap-2xl-on-lg",
        "rowGap_3xlOnLg": "pf-m-row-gap-3xl-on-lg",
        "rowGap_4xlOnLg": "pf-m-row-gap-4xl-on-lg",
        "rowGapOnXl": "pf-m-row-gap-on-xl",
        "rowGapNoneOnXl": "pf-m-row-gap-none-on-xl",
        "rowGapXsOnXl": "pf-m-row-gap-xs-on-xl",
        "rowGapSmOnXl": "pf-m-row-gap-sm-on-xl",
        "rowGapMdOnXl": "pf-m-row-gap-md-on-xl",
        "rowGapLgOnXl": "pf-m-row-gap-lg-on-xl",
        "rowGapXlOnXl": "pf-m-row-gap-xl-on-xl",
        "rowGap_2xlOnXl": "pf-m-row-gap-2xl-on-xl",
        "rowGap_3xlOnXl": "pf-m-row-gap-3xl-on-xl",
        "rowGap_4xlOnXl": "pf-m-row-gap-4xl-on-xl",
        "rowGapOn_2xl": "pf-m-row-gap-on-2xl",
        "rowGapNoneOn_2xl": "pf-m-row-gap-none-on-2xl",
        "rowGapXsOn_2xl": "pf-m-row-gap-xs-on-2xl",
        "rowGapSmOn_2xl": "pf-m-row-gap-sm-on-2xl",
        "rowGapMdOn_2xl": "pf-m-row-gap-md-on-2xl",
        "rowGapLgOn_2xl": "pf-m-row-gap-lg-on-2xl",
        "rowGapXlOn_2xl": "pf-m-row-gap-xl-on-2xl",
        "rowGap_2xlOn_2xl": "pf-m-row-gap-2xl-on-2xl",
        "rowGap_3xlOn_2xl": "pf-m-row-gap-3xl-on-2xl",
        "rowGap_4xlOn_2xl": "pf-m-row-gap-4xl-on-2xl",
        "columnGap": "pf-m-column-gap",
        "columnGapNone": "pf-m-column-gap-none",
        "columnGapXs": "pf-m-column-gap-xs",
        "columnGapSm": "pf-m-column-gap-sm",
        "columnGapMd": "pf-m-column-gap-md",
        "columnGapLg": "pf-m-column-gap-lg",
        "columnGapXl": "pf-m-column-gap-xl",
        "columnGap_2xl": "pf-m-column-gap-2xl",
        "columnGap_3xl": "pf-m-column-gap-3xl",
        "columnGap_4xl": "pf-m-column-gap-4xl",
        "columnGapOnSm": "pf-m-column-gap-on-sm",
        "columnGapNoneOnSm": "pf-m-column-gap-none-on-sm",
        "columnGapXsOnSm": "pf-m-column-gap-xs-on-sm",
        "columnGapSmOnSm": "pf-m-column-gap-sm-on-sm",
        "columnGapMdOnSm": "pf-m-column-gap-md-on-sm",
        "columnGapLgOnSm": "pf-m-column-gap-lg-on-sm",
        "columnGapXlOnSm": "pf-m-column-gap-xl-on-sm",
        "columnGap_2xlOnSm": "pf-m-column-gap-2xl-on-sm",
        "columnGap_3xlOnSm": "pf-m-column-gap-3xl-on-sm",
        "columnGap_4xlOnSm": "pf-m-column-gap-4xl-on-sm",
        "columnGapOnMd": "pf-m-column-gap-on-md",
        "columnGapNoneOnMd": "pf-m-column-gap-none-on-md",
        "columnGapXsOnMd": "pf-m-column-gap-xs-on-md",
        "columnGapSmOnMd": "pf-m-column-gap-sm-on-md",
        "columnGapMdOnMd": "pf-m-column-gap-md-on-md",
        "columnGapLgOnMd": "pf-m-column-gap-lg-on-md",
        "columnGapXlOnMd": "pf-m-column-gap-xl-on-md",
        "columnGap_2xlOnMd": "pf-m-column-gap-2xl-on-md",
        "columnGap_3xlOnMd": "pf-m-column-gap-3xl-on-md",
        "columnGap_4xlOnMd": "pf-m-column-gap-4xl-on-md",
        "columnGapOnLg": "pf-m-column-gap-on-lg",
        "columnGapNoneOnLg": "pf-m-column-gap-none-on-lg",
        "columnGapXsOnLg": "pf-m-column-gap-xs-on-lg",
        "columnGapSmOnLg": "pf-m-column-gap-sm-on-lg",
        "columnGapMdOnLg": "pf-m-column-gap-md-on-lg",
        "columnGapLgOnLg": "pf-m-column-gap-lg-on-lg",
        "columnGapXlOnLg": "pf-m-column-gap-xl-on-lg",
        "columnGap_2xlOnLg": "pf-m-column-gap-2xl-on-lg",
        "columnGap_3xlOnLg": "pf-m-column-gap-3xl-on-lg",
        "columnGap_4xlOnLg": "pf-m-column-gap-4xl-on-lg",
        "columnGapOnXl": "pf-m-column-gap-on-xl",
        "columnGapNoneOnXl": "pf-m-column-gap-none-on-xl",
        "columnGapXsOnXl": "pf-m-column-gap-xs-on-xl",
        "columnGapSmOnXl": "pf-m-column-gap-sm-on-xl",
        "columnGapMdOnXl": "pf-m-column-gap-md-on-xl",
        "columnGapLgOnXl": "pf-m-column-gap-lg-on-xl",
        "columnGapXlOnXl": "pf-m-column-gap-xl-on-xl",
        "columnGap_2xlOnXl": "pf-m-column-gap-2xl-on-xl",
        "columnGap_3xlOnXl": "pf-m-column-gap-3xl-on-xl",
        "columnGap_4xlOnXl": "pf-m-column-gap-4xl-on-xl",
        "columnGapOn_2xl": "pf-m-column-gap-on-2xl",
        "columnGapNoneOn_2xl": "pf-m-column-gap-none-on-2xl",
        "columnGapXsOn_2xl": "pf-m-column-gap-xs-on-2xl",
        "columnGapSmOn_2xl": "pf-m-column-gap-sm-on-2xl",
        "columnGapMdOn_2xl": "pf-m-column-gap-md-on-2xl",
        "columnGapLgOn_2xl": "pf-m-column-gap-lg-on-2xl",
        "columnGapXlOn_2xl": "pf-m-column-gap-xl-on-2xl",
        "columnGap_2xlOn_2xl": "pf-m-column-gap-2xl-on-2xl",
        "columnGap_3xlOn_2xl": "pf-m-column-gap-3xl-on-2xl",
        "columnGap_4xlOn_2xl": "pf-m-column-gap-4xl-on-2xl"
      }
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/l_flex_item_Order.js
var l_flex_item_Order;
var init_l_flex_item_Order = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/l_flex_item_Order.js"() {
    l_flex_item_Order = {
      "name": "--pf-v5-l-flex--item--Order",
      "value": "0",
      "var": "var(--pf-v5-l-flex--item--Order)"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js
var React342, Flex;
var init_Flex = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js"() {
    init_tslib_es6();
    React342 = __toESM(require_react());
    init_esm();
    init_flex2();
    init_l_flex_item_Order();
    init_util();
    Flex = (_a) => {
      var { children = null, className = "", component = "div", spacer, spaceItems, gap, rowGap, columnGap, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "spacer", "spaceItems", "gap", "rowGap", "columnGap", "grow", "shrink", "flex", "direction", "alignItems", "alignContent", "alignSelf", "align", "justifyContent", "display", "fullWidth", "flexWrap", "order", "style"]);
      const Component44 = component;
      return React342.createElement(Component44, Object.assign({ className: css(flex_default.flex, formatBreakpointMods(spacer, flex_default), formatBreakpointMods(spaceItems, flex_default), formatBreakpointMods(grow, flex_default), formatBreakpointMods(shrink, flex_default), formatBreakpointMods(flex, flex_default), formatBreakpointMods(direction, flex_default), formatBreakpointMods(alignItems, flex_default), formatBreakpointMods(alignContent, flex_default), formatBreakpointMods(alignSelf, flex_default), formatBreakpointMods(align, flex_default), formatBreakpointMods(justifyContent, flex_default), formatBreakpointMods(display, flex_default), formatBreakpointMods(fullWidth, flex_default), formatBreakpointMods(flexWrap, flex_default), formatBreakpointMods(gap, flex_default), formatBreakpointMods(rowGap, flex_default), formatBreakpointMods(columnGap, flex_default), className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_flex_item_Order.name)) : void 0 }, props), children);
    };
    Flex.displayName = "Flex";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js
var React343, FlexItem;
var init_FlexItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js"() {
    init_tslib_es6();
    React343 = __toESM(require_react());
    init_esm();
    init_flex2();
    init_l_flex_item_Order();
    init_util();
    FlexItem = (_a) => {
      var { children = null, className = "", component = "div", spacer, grow, shrink, flex, alignSelf, align, fullWidth, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "spacer", "grow", "shrink", "flex", "alignSelf", "align", "fullWidth", "order", "style"]);
      const Component44 = component;
      return React343.createElement(Component44, Object.assign({}, props, { className: css(formatBreakpointMods(spacer, flex_default), formatBreakpointMods(grow, flex_default), formatBreakpointMods(shrink, flex_default), formatBreakpointMods(flex, flex_default), formatBreakpointMods(alignSelf, flex_default), formatBreakpointMods(align, flex_default), formatBreakpointMods(fullWidth, flex_default), className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_flex_item_Order.name)) : void 0 }), children);
    };
    FlexItem.displayName = "FlexItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/index.js
var init_Flex2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Flex/index.js"() {
    init_Flex();
    init_FlexItem();
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.css
var init_gallery = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.mjs
var gallery_default;
var init_gallery2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.mjs"() {
    init_gallery();
    gallery_default = {
      "gallery": "pf-v5-l-gallery",
      "modifiers": {
        "gutter": "pf-m-gutter"
      }
    };
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_min.js
var l_gallery_GridTemplateColumns_min, l_gallery_GridTemplateColumns_min_default;
var init_l_gallery_GridTemplateColumns_min = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_min.js"() {
    l_gallery_GridTemplateColumns_min = {
      "name": "--pf-v5-l-gallery--GridTemplateColumns--min",
      "value": "250px",
      "var": "var(--pf-v5-l-gallery--GridTemplateColumns--min)"
    };
    l_gallery_GridTemplateColumns_min_default = l_gallery_GridTemplateColumns_min;
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_max.js
var l_gallery_GridTemplateColumns_max, l_gallery_GridTemplateColumns_max_default;
var init_l_gallery_GridTemplateColumns_max = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_max.js"() {
    l_gallery_GridTemplateColumns_max = {
      "name": "--pf-v5-l-gallery--GridTemplateColumns--max",
      "value": "1fr",
      "var": "var(--pf-v5-l-gallery--GridTemplateColumns--max)"
    };
    l_gallery_GridTemplateColumns_max_default = l_gallery_GridTemplateColumns_max;
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js
var React344, Gallery;
var init_Gallery = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js"() {
    init_tslib_es6();
    React344 = __toESM(require_react());
    init_esm();
    init_gallery2();
    init_l_gallery_GridTemplateColumns_min();
    init_l_gallery_GridTemplateColumns_max();
    Gallery = (_a) => {
      var { children = null, className = "", component = "div", hasGutter = false, minWidths, maxWidths } = _a, props = __rest(_a, ["children", "className", "component", "hasGutter", "minWidths", "maxWidths"]);
      const minWidthStyles = {};
      const Component44 = component;
      if (minWidths) {
        Object.entries(minWidths || {}).map(([breakpoint, value]) => minWidthStyles[`${l_gallery_GridTemplateColumns_min_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
      }
      const maxWidthStyles = {};
      if (maxWidths) {
        Object.entries(maxWidths || {}).map(([breakpoint, value]) => maxWidthStyles[`${l_gallery_GridTemplateColumns_max_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
      }
      const widthStyles = Object.assign(Object.assign({}, minWidthStyles), maxWidthStyles);
      return React344.createElement(Component44, Object.assign({ className: css(gallery_default.gallery, hasGutter && gallery_default.modifiers.gutter, className) }, props, (minWidths || maxWidths) && { style: Object.assign(Object.assign({}, widthStyles), props.style) }), children);
    };
    Gallery.displayName = "Gallery";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/GalleryItem.js
var React345, GalleryItem;
var init_GalleryItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/GalleryItem.js"() {
    init_tslib_es6();
    React345 = __toESM(require_react());
    GalleryItem = (_a) => {
      var { children = null, component = "div" } = _a, props = __rest(_a, ["children", "component"]);
      const Component44 = component;
      return React345.createElement(Component44, Object.assign({}, props), children);
    };
    GalleryItem.displayName = "GalleryItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/index.js
var init_Gallery2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/index.js"() {
    init_Gallery();
    init_GalleryItem();
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Grid/grid.css
var init_grid = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Grid/grid.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Grid/grid.mjs
var grid_default;
var init_grid2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Grid/grid.mjs"() {
    init_grid();
    grid_default = {
      "grid": "pf-v5-l-grid",
      "gridItem": "pf-v5-l-grid__item",
      "modifiers": {
        "all_1Col": "pf-m-all-1-col",
        "all_2Col": "pf-m-all-2-col",
        "all_3Col": "pf-m-all-3-col",
        "all_4Col": "pf-m-all-4-col",
        "all_5Col": "pf-m-all-5-col",
        "all_6Col": "pf-m-all-6-col",
        "all_7Col": "pf-m-all-7-col",
        "all_8Col": "pf-m-all-8-col",
        "all_9Col": "pf-m-all-9-col",
        "all_10Col": "pf-m-all-10-col",
        "all_11Col": "pf-m-all-11-col",
        "all_12Col": "pf-m-all-12-col",
        "all_1ColOnSm": "pf-m-all-1-col-on-sm",
        "all_2ColOnSm": "pf-m-all-2-col-on-sm",
        "all_3ColOnSm": "pf-m-all-3-col-on-sm",
        "all_4ColOnSm": "pf-m-all-4-col-on-sm",
        "all_5ColOnSm": "pf-m-all-5-col-on-sm",
        "all_6ColOnSm": "pf-m-all-6-col-on-sm",
        "all_7ColOnSm": "pf-m-all-7-col-on-sm",
        "all_8ColOnSm": "pf-m-all-8-col-on-sm",
        "all_9ColOnSm": "pf-m-all-9-col-on-sm",
        "all_10ColOnSm": "pf-m-all-10-col-on-sm",
        "all_11ColOnSm": "pf-m-all-11-col-on-sm",
        "all_12ColOnSm": "pf-m-all-12-col-on-sm",
        "all_1ColOnMd": "pf-m-all-1-col-on-md",
        "all_2ColOnMd": "pf-m-all-2-col-on-md",
        "all_3ColOnMd": "pf-m-all-3-col-on-md",
        "all_4ColOnMd": "pf-m-all-4-col-on-md",
        "all_5ColOnMd": "pf-m-all-5-col-on-md",
        "all_6ColOnMd": "pf-m-all-6-col-on-md",
        "all_7ColOnMd": "pf-m-all-7-col-on-md",
        "all_8ColOnMd": "pf-m-all-8-col-on-md",
        "all_9ColOnMd": "pf-m-all-9-col-on-md",
        "all_10ColOnMd": "pf-m-all-10-col-on-md",
        "all_11ColOnMd": "pf-m-all-11-col-on-md",
        "all_12ColOnMd": "pf-m-all-12-col-on-md",
        "all_1ColOnLg": "pf-m-all-1-col-on-lg",
        "all_2ColOnLg": "pf-m-all-2-col-on-lg",
        "all_3ColOnLg": "pf-m-all-3-col-on-lg",
        "all_4ColOnLg": "pf-m-all-4-col-on-lg",
        "all_5ColOnLg": "pf-m-all-5-col-on-lg",
        "all_6ColOnLg": "pf-m-all-6-col-on-lg",
        "all_7ColOnLg": "pf-m-all-7-col-on-lg",
        "all_8ColOnLg": "pf-m-all-8-col-on-lg",
        "all_9ColOnLg": "pf-m-all-9-col-on-lg",
        "all_10ColOnLg": "pf-m-all-10-col-on-lg",
        "all_11ColOnLg": "pf-m-all-11-col-on-lg",
        "all_12ColOnLg": "pf-m-all-12-col-on-lg",
        "all_1ColOnXl": "pf-m-all-1-col-on-xl",
        "all_2ColOnXl": "pf-m-all-2-col-on-xl",
        "all_3ColOnXl": "pf-m-all-3-col-on-xl",
        "all_4ColOnXl": "pf-m-all-4-col-on-xl",
        "all_5ColOnXl": "pf-m-all-5-col-on-xl",
        "all_6ColOnXl": "pf-m-all-6-col-on-xl",
        "all_7ColOnXl": "pf-m-all-7-col-on-xl",
        "all_8ColOnXl": "pf-m-all-8-col-on-xl",
        "all_9ColOnXl": "pf-m-all-9-col-on-xl",
        "all_10ColOnXl": "pf-m-all-10-col-on-xl",
        "all_11ColOnXl": "pf-m-all-11-col-on-xl",
        "all_12ColOnXl": "pf-m-all-12-col-on-xl",
        "all_1ColOn_2xl": "pf-m-all-1-col-on-2xl",
        "all_2ColOn_2xl": "pf-m-all-2-col-on-2xl",
        "all_3ColOn_2xl": "pf-m-all-3-col-on-2xl",
        "all_4ColOn_2xl": "pf-m-all-4-col-on-2xl",
        "all_5ColOn_2xl": "pf-m-all-5-col-on-2xl",
        "all_6ColOn_2xl": "pf-m-all-6-col-on-2xl",
        "all_7ColOn_2xl": "pf-m-all-7-col-on-2xl",
        "all_8ColOn_2xl": "pf-m-all-8-col-on-2xl",
        "all_9ColOn_2xl": "pf-m-all-9-col-on-2xl",
        "all_10ColOn_2xl": "pf-m-all-10-col-on-2xl",
        "all_11ColOn_2xl": "pf-m-all-11-col-on-2xl",
        "all_12ColOn_2xl": "pf-m-all-12-col-on-2xl",
        "1Col": "pf-m-1-col",
        "2Col": "pf-m-2-col",
        "3Col": "pf-m-3-col",
        "4Col": "pf-m-4-col",
        "5Col": "pf-m-5-col",
        "6Col": "pf-m-6-col",
        "7Col": "pf-m-7-col",
        "8Col": "pf-m-8-col",
        "9Col": "pf-m-9-col",
        "10Col": "pf-m-10-col",
        "11Col": "pf-m-11-col",
        "12Col": "pf-m-12-col",
        "offset_1Col": "pf-m-offset-1-col",
        "offset_2Col": "pf-m-offset-2-col",
        "offset_3Col": "pf-m-offset-3-col",
        "offset_4Col": "pf-m-offset-4-col",
        "offset_5Col": "pf-m-offset-5-col",
        "offset_6Col": "pf-m-offset-6-col",
        "offset_7Col": "pf-m-offset-7-col",
        "offset_8Col": "pf-m-offset-8-col",
        "offset_9Col": "pf-m-offset-9-col",
        "offset_10Col": "pf-m-offset-10-col",
        "offset_11Col": "pf-m-offset-11-col",
        "offset_12Col": "pf-m-offset-12-col",
        "1Row": "pf-m-1-row",
        "2Row": "pf-m-2-row",
        "3Row": "pf-m-3-row",
        "4Row": "pf-m-4-row",
        "5Row": "pf-m-5-row",
        "6Row": "pf-m-6-row",
        "7Row": "pf-m-7-row",
        "8Row": "pf-m-8-row",
        "9Row": "pf-m-9-row",
        "10Row": "pf-m-10-row",
        "11Row": "pf-m-11-row",
        "12Row": "pf-m-12-row",
        "1ColOnSm": "pf-m-1-col-on-sm",
        "2ColOnSm": "pf-m-2-col-on-sm",
        "3ColOnSm": "pf-m-3-col-on-sm",
        "4ColOnSm": "pf-m-4-col-on-sm",
        "5ColOnSm": "pf-m-5-col-on-sm",
        "6ColOnSm": "pf-m-6-col-on-sm",
        "7ColOnSm": "pf-m-7-col-on-sm",
        "8ColOnSm": "pf-m-8-col-on-sm",
        "9ColOnSm": "pf-m-9-col-on-sm",
        "10ColOnSm": "pf-m-10-col-on-sm",
        "11ColOnSm": "pf-m-11-col-on-sm",
        "12ColOnSm": "pf-m-12-col-on-sm",
        "offset_1ColOnSm": "pf-m-offset-1-col-on-sm",
        "offset_2ColOnSm": "pf-m-offset-2-col-on-sm",
        "offset_3ColOnSm": "pf-m-offset-3-col-on-sm",
        "offset_4ColOnSm": "pf-m-offset-4-col-on-sm",
        "offset_5ColOnSm": "pf-m-offset-5-col-on-sm",
        "offset_6ColOnSm": "pf-m-offset-6-col-on-sm",
        "offset_7ColOnSm": "pf-m-offset-7-col-on-sm",
        "offset_8ColOnSm": "pf-m-offset-8-col-on-sm",
        "offset_9ColOnSm": "pf-m-offset-9-col-on-sm",
        "offset_10ColOnSm": "pf-m-offset-10-col-on-sm",
        "offset_11ColOnSm": "pf-m-offset-11-col-on-sm",
        "offset_12ColOnSm": "pf-m-offset-12-col-on-sm",
        "1RowOnSm": "pf-m-1-row-on-sm",
        "2RowOnSm": "pf-m-2-row-on-sm",
        "3RowOnSm": "pf-m-3-row-on-sm",
        "4RowOnSm": "pf-m-4-row-on-sm",
        "5RowOnSm": "pf-m-5-row-on-sm",
        "6RowOnSm": "pf-m-6-row-on-sm",
        "7RowOnSm": "pf-m-7-row-on-sm",
        "8RowOnSm": "pf-m-8-row-on-sm",
        "9RowOnSm": "pf-m-9-row-on-sm",
        "10RowOnSm": "pf-m-10-row-on-sm",
        "11RowOnSm": "pf-m-11-row-on-sm",
        "12RowOnSm": "pf-m-12-row-on-sm",
        "1ColOnMd": "pf-m-1-col-on-md",
        "2ColOnMd": "pf-m-2-col-on-md",
        "3ColOnMd": "pf-m-3-col-on-md",
        "4ColOnMd": "pf-m-4-col-on-md",
        "5ColOnMd": "pf-m-5-col-on-md",
        "6ColOnMd": "pf-m-6-col-on-md",
        "7ColOnMd": "pf-m-7-col-on-md",
        "8ColOnMd": "pf-m-8-col-on-md",
        "9ColOnMd": "pf-m-9-col-on-md",
        "10ColOnMd": "pf-m-10-col-on-md",
        "11ColOnMd": "pf-m-11-col-on-md",
        "12ColOnMd": "pf-m-12-col-on-md",
        "offset_1ColOnMd": "pf-m-offset-1-col-on-md",
        "offset_2ColOnMd": "pf-m-offset-2-col-on-md",
        "offset_3ColOnMd": "pf-m-offset-3-col-on-md",
        "offset_4ColOnMd": "pf-m-offset-4-col-on-md",
        "offset_5ColOnMd": "pf-m-offset-5-col-on-md",
        "offset_6ColOnMd": "pf-m-offset-6-col-on-md",
        "offset_7ColOnMd": "pf-m-offset-7-col-on-md",
        "offset_8ColOnMd": "pf-m-offset-8-col-on-md",
        "offset_9ColOnMd": "pf-m-offset-9-col-on-md",
        "offset_10ColOnMd": "pf-m-offset-10-col-on-md",
        "offset_11ColOnMd": "pf-m-offset-11-col-on-md",
        "offset_12ColOnMd": "pf-m-offset-12-col-on-md",
        "1RowOnMd": "pf-m-1-row-on-md",
        "2RowOnMd": "pf-m-2-row-on-md",
        "3RowOnMd": "pf-m-3-row-on-md",
        "4RowOnMd": "pf-m-4-row-on-md",
        "5RowOnMd": "pf-m-5-row-on-md",
        "6RowOnMd": "pf-m-6-row-on-md",
        "7RowOnMd": "pf-m-7-row-on-md",
        "8RowOnMd": "pf-m-8-row-on-md",
        "9RowOnMd": "pf-m-9-row-on-md",
        "10RowOnMd": "pf-m-10-row-on-md",
        "11RowOnMd": "pf-m-11-row-on-md",
        "12RowOnMd": "pf-m-12-row-on-md",
        "1ColOnLg": "pf-m-1-col-on-lg",
        "2ColOnLg": "pf-m-2-col-on-lg",
        "3ColOnLg": "pf-m-3-col-on-lg",
        "4ColOnLg": "pf-m-4-col-on-lg",
        "5ColOnLg": "pf-m-5-col-on-lg",
        "6ColOnLg": "pf-m-6-col-on-lg",
        "7ColOnLg": "pf-m-7-col-on-lg",
        "8ColOnLg": "pf-m-8-col-on-lg",
        "9ColOnLg": "pf-m-9-col-on-lg",
        "10ColOnLg": "pf-m-10-col-on-lg",
        "11ColOnLg": "pf-m-11-col-on-lg",
        "12ColOnLg": "pf-m-12-col-on-lg",
        "offset_1ColOnLg": "pf-m-offset-1-col-on-lg",
        "offset_2ColOnLg": "pf-m-offset-2-col-on-lg",
        "offset_3ColOnLg": "pf-m-offset-3-col-on-lg",
        "offset_4ColOnLg": "pf-m-offset-4-col-on-lg",
        "offset_5ColOnLg": "pf-m-offset-5-col-on-lg",
        "offset_6ColOnLg": "pf-m-offset-6-col-on-lg",
        "offset_7ColOnLg": "pf-m-offset-7-col-on-lg",
        "offset_8ColOnLg": "pf-m-offset-8-col-on-lg",
        "offset_9ColOnLg": "pf-m-offset-9-col-on-lg",
        "offset_10ColOnLg": "pf-m-offset-10-col-on-lg",
        "offset_11ColOnLg": "pf-m-offset-11-col-on-lg",
        "offset_12ColOnLg": "pf-m-offset-12-col-on-lg",
        "1RowOnLg": "pf-m-1-row-on-lg",
        "2RowOnLg": "pf-m-2-row-on-lg",
        "3RowOnLg": "pf-m-3-row-on-lg",
        "4RowOnLg": "pf-m-4-row-on-lg",
        "5RowOnLg": "pf-m-5-row-on-lg",
        "6RowOnLg": "pf-m-6-row-on-lg",
        "7RowOnLg": "pf-m-7-row-on-lg",
        "8RowOnLg": "pf-m-8-row-on-lg",
        "9RowOnLg": "pf-m-9-row-on-lg",
        "10RowOnLg": "pf-m-10-row-on-lg",
        "11RowOnLg": "pf-m-11-row-on-lg",
        "12RowOnLg": "pf-m-12-row-on-lg",
        "1ColOnXl": "pf-m-1-col-on-xl",
        "2ColOnXl": "pf-m-2-col-on-xl",
        "3ColOnXl": "pf-m-3-col-on-xl",
        "4ColOnXl": "pf-m-4-col-on-xl",
        "5ColOnXl": "pf-m-5-col-on-xl",
        "6ColOnXl": "pf-m-6-col-on-xl",
        "7ColOnXl": "pf-m-7-col-on-xl",
        "8ColOnXl": "pf-m-8-col-on-xl",
        "9ColOnXl": "pf-m-9-col-on-xl",
        "10ColOnXl": "pf-m-10-col-on-xl",
        "11ColOnXl": "pf-m-11-col-on-xl",
        "12ColOnXl": "pf-m-12-col-on-xl",
        "offset_1ColOnXl": "pf-m-offset-1-col-on-xl",
        "offset_2ColOnXl": "pf-m-offset-2-col-on-xl",
        "offset_3ColOnXl": "pf-m-offset-3-col-on-xl",
        "offset_4ColOnXl": "pf-m-offset-4-col-on-xl",
        "offset_5ColOnXl": "pf-m-offset-5-col-on-xl",
        "offset_6ColOnXl": "pf-m-offset-6-col-on-xl",
        "offset_7ColOnXl": "pf-m-offset-7-col-on-xl",
        "offset_8ColOnXl": "pf-m-offset-8-col-on-xl",
        "offset_9ColOnXl": "pf-m-offset-9-col-on-xl",
        "offset_10ColOnXl": "pf-m-offset-10-col-on-xl",
        "offset_11ColOnXl": "pf-m-offset-11-col-on-xl",
        "offset_12ColOnXl": "pf-m-offset-12-col-on-xl",
        "1RowOnXl": "pf-m-1-row-on-xl",
        "2RowOnXl": "pf-m-2-row-on-xl",
        "3RowOnXl": "pf-m-3-row-on-xl",
        "4RowOnXl": "pf-m-4-row-on-xl",
        "5RowOnXl": "pf-m-5-row-on-xl",
        "6RowOnXl": "pf-m-6-row-on-xl",
        "7RowOnXl": "pf-m-7-row-on-xl",
        "8RowOnXl": "pf-m-8-row-on-xl",
        "9RowOnXl": "pf-m-9-row-on-xl",
        "10RowOnXl": "pf-m-10-row-on-xl",
        "11RowOnXl": "pf-m-11-row-on-xl",
        "12RowOnXl": "pf-m-12-row-on-xl",
        "1ColOn_2xl": "pf-m-1-col-on-2xl",
        "2ColOn_2xl": "pf-m-2-col-on-2xl",
        "3ColOn_2xl": "pf-m-3-col-on-2xl",
        "4ColOn_2xl": "pf-m-4-col-on-2xl",
        "5ColOn_2xl": "pf-m-5-col-on-2xl",
        "6ColOn_2xl": "pf-m-6-col-on-2xl",
        "7ColOn_2xl": "pf-m-7-col-on-2xl",
        "8ColOn_2xl": "pf-m-8-col-on-2xl",
        "9ColOn_2xl": "pf-m-9-col-on-2xl",
        "10ColOn_2xl": "pf-m-10-col-on-2xl",
        "11ColOn_2xl": "pf-m-11-col-on-2xl",
        "12ColOn_2xl": "pf-m-12-col-on-2xl",
        "offset_1ColOn_2xl": "pf-m-offset-1-col-on-2xl",
        "offset_2ColOn_2xl": "pf-m-offset-2-col-on-2xl",
        "offset_3ColOn_2xl": "pf-m-offset-3-col-on-2xl",
        "offset_4ColOn_2xl": "pf-m-offset-4-col-on-2xl",
        "offset_5ColOn_2xl": "pf-m-offset-5-col-on-2xl",
        "offset_6ColOn_2xl": "pf-m-offset-6-col-on-2xl",
        "offset_7ColOn_2xl": "pf-m-offset-7-col-on-2xl",
        "offset_8ColOn_2xl": "pf-m-offset-8-col-on-2xl",
        "offset_9ColOn_2xl": "pf-m-offset-9-col-on-2xl",
        "offset_10ColOn_2xl": "pf-m-offset-10-col-on-2xl",
        "offset_11ColOn_2xl": "pf-m-offset-11-col-on-2xl",
        "offset_12ColOn_2xl": "pf-m-offset-12-col-on-2xl",
        "1RowOn_2xl": "pf-m-1-row-on-2xl",
        "2RowOn_2xl": "pf-m-2-row-on-2xl",
        "3RowOn_2xl": "pf-m-3-row-on-2xl",
        "4RowOn_2xl": "pf-m-4-row-on-2xl",
        "5RowOn_2xl": "pf-m-5-row-on-2xl",
        "6RowOn_2xl": "pf-m-6-row-on-2xl",
        "7RowOn_2xl": "pf-m-7-row-on-2xl",
        "8RowOn_2xl": "pf-m-8-row-on-2xl",
        "9RowOn_2xl": "pf-m-9-row-on-2xl",
        "10RowOn_2xl": "pf-m-10-row-on-2xl",
        "11RowOn_2xl": "pf-m-11-row-on-2xl",
        "12RowOn_2xl": "pf-m-12-row-on-2xl",
        "gutter": "pf-m-gutter"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/styles/sizes.js
var BaseSizes, DeviceSizes;
var init_sizes = __esm({
  "node_modules/@patternfly/react-core/dist/esm/styles/sizes.js"() {
    (function(BaseSizes2) {
      BaseSizes2["xs"] = "xs";
      BaseSizes2["sm"] = "sm";
      BaseSizes2["md"] = "md";
      BaseSizes2["lg"] = "lg";
      BaseSizes2["xl"] = "xl";
      BaseSizes2["2xl"] = "2xl";
      BaseSizes2["3xl"] = "3xl";
      BaseSizes2["4xl"] = "4xl";
    })(BaseSizes || (BaseSizes = {}));
    (function(DeviceSizes2) {
      DeviceSizes2["sm"] = "Sm";
      DeviceSizes2["md"] = "Md";
      DeviceSizes2["lg"] = "Lg";
      DeviceSizes2["xl"] = "Xl";
      DeviceSizes2["xl2"] = "_2xl";
    })(DeviceSizes || (DeviceSizes = {}));
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/l_grid_item_Order.js
var l_grid_item_Order;
var init_l_grid_item_Order = __esm({
  "node_modules/@patternfly/react-tokens/dist/esm/l_grid_item_Order.js"() {
    l_grid_item_Order = {
      "name": "--pf-v5-l-grid--item--Order",
      "value": "0",
      "var": "var(--pf-v5-l-grid--item--Order)"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/Grid.js
var React346, Grid;
var init_Grid = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Grid/Grid.js"() {
    init_tslib_es6();
    React346 = __toESM(require_react());
    init_grid2();
    init_esm();
    init_sizes();
    init_l_grid_item_Order();
    init_util();
    Grid = (_a) => {
      var { children = null, className = "", component = "div", hasGutter, span = null, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "hasGutter", "span", "order", "style"]);
      const classes = [grid_default.grid, span && grid_default.modifiers[`all_${span}Col`]];
      const Component44 = component;
      Object.entries(DeviceSizes).forEach(([propKey, gridSpanModifier]) => {
        const key = propKey;
        const propValue = props[key];
        if (propValue) {
          classes.push(grid_default.modifiers[`all_${propValue}ColOn${gridSpanModifier}`]);
        }
        delete props[key];
      });
      return React346.createElement(Component44, Object.assign({ className: css(...classes, hasGutter && grid_default.modifiers.gutter, className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_grid_item_Order.name)) : void 0 }, props), children);
    };
    Grid.displayName = "Grid";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/GridItem.js
var React347, GridItem;
var init_GridItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Grid/GridItem.js"() {
    init_tslib_es6();
    React347 = __toESM(require_react());
    init_grid2();
    init_esm();
    init_sizes();
    init_l_grid_item_Order();
    init_util();
    GridItem = (_a) => {
      var { children = null, className = "", component = "div", span = null, rowSpan = null, offset: offset2 = null, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "span", "rowSpan", "offset", "order", "style"]);
      const classes = [
        grid_default.gridItem,
        span && grid_default.modifiers[`${span}Col`],
        rowSpan && grid_default.modifiers[`${rowSpan}Row`],
        offset2 && grid_default.modifiers[`offset_${offset2}Col`]
      ];
      const Component44 = component;
      Object.entries(DeviceSizes).forEach(([propKey, classModifier]) => {
        const key = propKey;
        const rowSpanKey = `${key}RowSpan`;
        const offsetKey = `${key}Offset`;
        const spanValue = props[key];
        const rowSpanValue = props[rowSpanKey];
        const offsetValue = props[offsetKey];
        if (spanValue) {
          classes.push(grid_default.modifiers[`${spanValue}ColOn${classModifier}`]);
        }
        if (rowSpanValue) {
          classes.push(grid_default.modifiers[`${rowSpanValue}RowOn${classModifier}`]);
        }
        if (offsetValue) {
          classes.push(grid_default.modifiers[`offset_${offsetValue}ColOn${classModifier}`]);
        }
        delete props[key];
        delete props[rowSpanKey];
        delete props[offsetKey];
      });
      return React347.createElement(Component44, Object.assign({ className: css(...classes, className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_grid_item_Order.name)) : void 0 }, props), children);
    };
    GridItem.displayName = "GridItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/index.js
var init_Grid2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Grid/index.js"() {
    init_Grid();
    init_GridItem();
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Level/level.css
var init_level = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Level/level.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Level/level.mjs
var level_default;
var init_level2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Level/level.mjs"() {
    init_level();
    level_default = {
      "level": "pf-v5-l-level",
      "modifiers": {
        "gutter": "pf-m-gutter"
      }
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js
var React348, Level;
var init_Level = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js"() {
    init_tslib_es6();
    React348 = __toESM(require_react());
    init_esm();
    init_level2();
    Level = (_a) => {
      var { hasGutter, className = "", children = null } = _a, props = __rest(_a, ["hasGutter", "className", "children"]);
      return React348.createElement("div", Object.assign({}, props, { className: css(level_default.level, hasGutter && level_default.modifiers.gutter, className) }), children);
    };
    Level.displayName = "Level";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/LevelItem.js
var React349, LevelItem;
var init_LevelItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Level/LevelItem.js"() {
    init_tslib_es6();
    React349 = __toESM(require_react());
    LevelItem = (_a) => {
      var { children = null } = _a, props = __rest(_a, ["children"]);
      return React349.createElement("div", Object.assign({}, props), children);
    };
    LevelItem.displayName = "LevelItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/index.js
var init_Level2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Level/index.js"() {
    init_Level();
    init_LevelItem();
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Split/split.css
var init_split = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Split/split.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Split/split.mjs
var split_default;
var init_split2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Split/split.mjs"() {
    init_split();
    split_default = {
      "modifiers": {
        "wrap": "pf-m-wrap",
        "fill": "pf-m-fill",
        "gutter": "pf-m-gutter"
      },
      "split": "pf-v5-l-split",
      "splitItem": "pf-v5-l-split__item"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/Split.js
var React350, Split;
var init_Split = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Split/Split.js"() {
    init_tslib_es6();
    React350 = __toESM(require_react());
    init_split2();
    init_esm();
    Split = (_a) => {
      var { hasGutter = false, isWrappable = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["hasGutter", "isWrappable", "className", "children", "component"]);
      const Component44 = component;
      return React350.createElement(Component44, Object.assign({}, props, { className: css(split_default.split, hasGutter && split_default.modifiers.gutter, isWrappable && split_default.modifiers.wrap, className) }), children);
    };
    Split.displayName = "Split";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/SplitItem.js
var React351, SplitItem;
var init_SplitItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Split/SplitItem.js"() {
    init_tslib_es6();
    React351 = __toESM(require_react());
    init_split2();
    init_esm();
    SplitItem = (_a) => {
      var { isFilled = false, className = "", children = null } = _a, props = __rest(_a, ["isFilled", "className", "children"]);
      return React351.createElement("div", Object.assign({}, props, { className: css(split_default.splitItem, isFilled && split_default.modifiers.fill, className) }), children);
    };
    SplitItem.displayName = "SplitItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/index.js
var init_Split2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Split/index.js"() {
    init_Split();
    init_SplitItem();
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Stack/stack.css
var init_stack = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Stack/stack.css"() {
  }
});

// node_modules/@patternfly/react-styles/css/layouts/Stack/stack.mjs
var stack_default;
var init_stack2 = __esm({
  "node_modules/@patternfly/react-styles/css/layouts/Stack/stack.mjs"() {
    init_stack();
    stack_default = {
      "modifiers": {
        "fill": "pf-m-fill",
        "gutter": "pf-m-gutter"
      },
      "stack": "pf-v5-l-stack",
      "stackItem": "pf-v5-l-stack__item"
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js
var React352, Stack;
var init_Stack = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js"() {
    init_tslib_es6();
    React352 = __toESM(require_react());
    init_stack2();
    init_esm();
    Stack = (_a) => {
      var { hasGutter = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["hasGutter", "className", "children", "component"]);
      const Component44 = component;
      return React352.createElement(Component44, Object.assign({}, props, { className: css(stack_default.stack, hasGutter && stack_default.modifiers.gutter, className) }), children);
    };
    Stack.displayName = "Stack";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js
var React353, StackItem;
var init_StackItem = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js"() {
    init_tslib_es6();
    React353 = __toESM(require_react());
    init_stack2();
    init_esm();
    StackItem = (_a) => {
      var { isFilled = false, className = "", children = null } = _a, props = __rest(_a, ["isFilled", "className", "children"]);
      return React353.createElement("div", Object.assign({}, props, { className: css(stack_default.stackItem, isFilled && stack_default.modifiers.fill, className) }), children);
    };
    StackItem.displayName = "StackItem";
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/index.js
var init_Stack2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/Stack/index.js"() {
    init_Stack();
    init_StackItem();
  }
});

// node_modules/@patternfly/react-core/dist/esm/layouts/index.js
var init_layouts = __esm({
  "node_modules/@patternfly/react-core/dist/esm/layouts/index.js"() {
    init_Bullseye2();
    init_Flex2();
    init_Gallery2();
    init_Grid2();
    init_Level2();
    init_Split2();
    init_Stack2();
  }
});

// node_modules/@patternfly/react-core/dist/esm/styles/index.js
var init_styles = __esm({
  "node_modules/@patternfly/react-core/dist/esm/styles/index.js"() {
    init_sizes();
  }
});

// node_modules/@patternfly/react-core/dist/esm/index.js
var init_esm2 = __esm({
  "node_modules/@patternfly/react-core/dist/esm/index.js"() {
    init_components();
    init_layouts();
    init_helpers();
    init_styles();
  }
});

// src/button/MyButton.tsx
var MyButton_exports = {};
__export(MyButton_exports, {
  MyButton: () => MyButton,
  MyButtonMFE: () => MyButtonMFE
});
var import_react35, import_client, MyButton, MyButtonMFE;
var init_MyButton = __esm({
  "src/button/MyButton.tsx"() {
    "use strict";
    import_react35 = __toESM(require_react(), 1);
    import_client = __toESM(require_client(), 1);
    init_base();
    init_esm2();
    MyButton = () => {
      const [counter, setCounter] = import_react35.default.useState(0);
      const handleClick = () => {
        console.log("Clicked");
        setCounter((prevState) => prevState + 1);
      };
      return /* @__PURE__ */ import_react35.default.createElement(
        Button,
        null,
        "Counter ",
        counter
      );
    };
    MyButtonMFE = class extends HTMLElement {
      connectedCallback() {
        let root = (0, import_client.createRoot)(this);
        root.render(/* @__PURE__ */ import_react35.default.createElement(MyButton, null));
      }
    };
    customElements.define("mxms-button", MyButtonMFE);
  }
});

// src/index.tsx
var import_native_federation = __toESM(require_src(), 1);
(async () => {
  await (0, import_native_federation.initFederation)();
  await Promise.resolve().then(() => (init_MyButton(), MyButton_exports));
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 7.5.2
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=bundle.js.map
